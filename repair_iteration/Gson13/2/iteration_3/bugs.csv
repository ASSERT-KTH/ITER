bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!result.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!result.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!result.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(long))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals(result))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals(result))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals(result))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(long))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
3	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!result.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!result.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!result.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(long))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
4	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_LONG  &&!result.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_LONG  &&!result.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_LONG  &&!result.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(long))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
5	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PEEKED_LONG  &&!result.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PEEKED_LONG  &&!result.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PEEKED_LONG  &&!result.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(long))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
6	[BUG]  [BUGGY]  }  else  if(p  ==  long  &&!result.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  long  &&!result.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  long  &&!result.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(long))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
7	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
8	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
9	[BUG]  [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  <  Long.MAX_VALUE  ||  p  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
10	[BUG]  [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MAX_VALUE  ||  p  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
11	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p!=  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p!=  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p!=  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
12	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BEGIN_AR)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BEGIN_AR)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BEGIN_AR)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEGIN_AR)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
13	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTE)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEGIN_AR)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
14	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUFFER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUFFER)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUFFER)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEGIN_AR)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
15	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||!peekedLong.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||!peekedLong.isEmpty())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||!peekedLong.isEmpty())  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
16	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!result.isEmpty())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!result.isEmpty())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!result.isEmpty())  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.isEmpty())    {    	non-compiled	[CE]  ';'  expected	107	None	replace
17	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedString.isEmpty())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedString.isEmpty())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedString.isEmpty())  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.isEmpty())    {    	non-compiled	[CE]  ';'  expected	107	None	replace
18	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!pathNames.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!pathNames.isEmpty())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!pathNames.isEmpty())  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
19	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!pathNames.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!pathNames.length  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!pathNames.length  >  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
20	[BUG]  [BUGGY]  }  else  if(p  ==  Long.parseLong(buffer))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.parseLong(buffer))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.parseLong(buffer))  {	  }    else    if(p    ==    Long.toString(buffer))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
21	[BUG]  [BUGGY]  }  else  if(p!=  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.toString(peekedLong))  {	  }    else    if(p    ==    Long.toString(buffer))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
22	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(buffer))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(buffer))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(buffer))  {	  }    else    if(p    ==    Long.toString(buffer))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
23	[BUG]  [BUGGY]  }  else  if(p  >=  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  >=  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  >=  Long.toString(peekedLong))  {	  }    else    if(p    ==    Long.toString(buffer))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
24	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toLong(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toLong(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toLong(peekedLong))  {	  }    else    if(p    ==    Long.toString(buffer))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
25	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedInt))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedInt))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedInt))  {	  }    else    if(p    ==    Long.toString(buffer))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
26	[BUG]  [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  }  else  if(p  <  Long.MIN_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [CE]  unclosed  string  literal  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  <  Long.MIN_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  <  Long.MIN_VALUE  ||  p  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
29	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  >=  Long.MIN_VALUE)  {  [CE]  unclosed  string  literal  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  >=  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  >=  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  unclosed  string  literal	8	None	replace
30	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(value))  {  [CE]  unclosed  string  literal  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(value))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  unclosed  string  literal	95	None	replace
31	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  isEqualValue(peekedLong))  {  [CE]  unclosed  string  literal  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  isEqualValue(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  isEqualValue(peekedLong))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  unclosed  string  literal	95	None	replace
32	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(value))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(value))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
33	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(result))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(result))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(result))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
34	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualKeyword(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualKeyword(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  isEqualKeyword(peekedLong))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
35	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(buffer,  value))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(buffer,  value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(buffer,  value))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
36	[BUG]  [BUGGY]  result  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue(PEEKED_DOUBLE_QUOTED);	  result    =    nextQuotedValue();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
37	[BUG]  [BUGGY]  result  =  nextSingleQuotedValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextSingleQuotedValue();  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextSingleQuotedValue();	  result    =    nextQuotedValue();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
38	[BUG]  [BUGGY]  result  =  nextQuotedValue(PEEKED_BUFFERED);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue(PEEKED_BUFFERED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue(PEEKED_BUFFERED);	  result    =    nextQuotedValue();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
39	[BUG]  [BUGGY]  result  =  nextSingLEQUOTEDValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextSingLEQUOTEDValue();  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextSingLEQUOTEDValue();	  result    =    nextQuotedValue();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
40	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_PREFIX)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
41	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
42	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "- "))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "- "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "- "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
43	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "- "))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "- "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "- "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
44	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals( "- "))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals( "- "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!result.equals( "- "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
45	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( ". "))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( ". "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( ". "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
46	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!result.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!result.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!result.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
47	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!result.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!result.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!result.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
48	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals(Long.toString(peekedLong)))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals(Long.toString(peekedLong)))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!result.equals(Long.toString(peekedLong)))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
49	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||  p  ==  PEEKED_LONG  &&!result.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||  p  ==  PEEKED_LONG  &&!result.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)||  p  ==  PEEKED_LONG  &&!result.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
50	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!result.equals(long.toString()))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!result.equals(long.toString()))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!result.equals(long.toString()))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
51	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BOOLEAN)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BOOLEAN)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
52	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
53	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(pathNames[pos]))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
54	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos])||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    Long.toString(pathNames[pos]))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
55	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos])||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    Long.toString(pathNames[pos]))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
56	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedFloat.equals(peekedFloat))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedFloat.equals(peekedFloat))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!peekedFloat.equals(peekedFloat))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
57	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedInt.equals(peekedInt))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedInt.equals(peekedInt))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!peekedInt.equals(peekedInt))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
58	[BUG]  [BUGGY]  }  else  if(peekedLong  ==  Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong  ==  Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong  ==  Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
59	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedInt)&&!peekedLong.equals(peekedInt))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedInt)&&!peekedLong.equals(peekedInt))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedInt)&&!peekedLong.equals(peekedInt))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
60	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(long)&&!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(long)&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(long)&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
61	[BUG]  [BUGGY]  }  else  if(peekedLong!=  Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
62	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peekedString!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peekedString!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedString!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
63	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedString!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
64	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedString!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedString!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedString!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
65	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  peekedNumberLength  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  peekedNumberLength  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  &&  peekedNumberLength  >  0)  {	  }    else    if(peekedLong!=    null    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
66	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  ||  peekedNumberLength  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  ||  peekedNumberLength  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  ||  peekedNumberLength  >  0)  {	  }    else    if(peekedLong!=    null    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
67	[BUG]  [BUGGY]  }  else  if(peekedLong  ==  null  &&  peekedNumberLength  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong  ==  null  &&  peekedNumberLength  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong  ==  null  &&  peekedNumberLength  >  0)  {	  }    else    if(peekedLong!=    null    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
68	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  >  1)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  >  1)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  peekedNumberLength  >  1)  {	  }    else    if(peekedLong!=    null    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
69	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  peekedNumberLength  >  0)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  peekedNumberLength  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  peekedNumberLength  >  0)  {	  }    else    if(peekedLong!=    null    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
70	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  <  =  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  peekedNumberLength  <  =  0)  {	  }    else    if(peekedLong!=    null    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
71	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peekedString  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peekedString  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  peekedString  ==  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedString    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
72	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedString  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedString  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&  peekedString  ==  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedString    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
73	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  pathIndices[stackSize  -  1]  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  pathIndices[stackSize  -  1]  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  pathIndices[stackSize  -  1]  ==  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedString    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
74	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  result  ==  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  result  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  result  ==  Long.toString(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
75	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(long.toString()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(long.toString()))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(long.toString()))  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
76	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result!=  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result!=  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result!=  Long.toString(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
77	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(buffer,peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(buffer,peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(buffer,peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
78	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(long.length()))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(long.length()))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(long.length()))  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
79	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "+   "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "+   "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "+   "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "+   "))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
80	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "+ "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "+ "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "+ "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "+   "))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
81	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
82	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
84	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
85	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_UNQUOTED)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_UNQUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_UNQUOTED)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
86	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
87	[BUG]  [BUGGY]  }  else  if(result  ==  null  &&  result  <  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(result  ==  null  &&  result  <  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(result  ==  null  &&  result  <  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    <    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
88	[BUG]  [BUGGY]  }  else  if(peekedString!=  null  &&  result  <  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedString!=  null  &&  result  <  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedString!=  null  &&  result  <  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    <    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
89	[BUG]  [BUGGY]  }  else  if(result!=  null  &&  result  <  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(result!=  null  &&  result  <  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(result!=  null  &&  result  <  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    <    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
90	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  ||  result  <  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  ||  result  <  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  ||  result  <  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    <    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
91	[BUG]  [BUGGY]  }  else  if(peekedInLong!=  null  &&  result  <  Long.toString(peekedInLong))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedInLong!=  null  &&  result  <  Long.toString(peekedInLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedInLong!=  null  &&  result  <  Long.toString(peekedInLong))  {	  }    else    if(peekedLong!=    null    &&    result    <    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
92	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  result  <  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&  result  <  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&  result  <  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    <    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
93	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
94	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos++])||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
95	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos++])||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
96	[BUG]  [BUGGY]  }  else  if(pos  ==  Long.toString(pathNames[pos++]))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(pos  ==  Long.toString(pathNames[pos++]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(pos  ==  Long.toString(pathNames[pos++]))  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
97	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&  pathIndices[stackSize++]!=  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&  pathIndices[stackSize++]!=  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos++])&&  pathIndices[stackSize++]!=  PEEKED_LONG)  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
98	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])||  p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos++])||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
99	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
100	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
101	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
102	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_UNQUOTED)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_UNQUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_UNQUOTED)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
103	[BUG]  [BUGGY]  result  =  nextSingleQuotedValue(''');  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextSingleQuotedValue(''');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextSingleQuotedValue(''');	  result    =    nextUnquotedValue(''');    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
104	[BUG]  [BUGGY]  result  =  nextUnquotedValue(''',  PEEKED_DOUBLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextUnquotedValue(''',  PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextUnquotedValue(''',  PEEKED_DOUBLE_QUOTED);	  result    =    nextUnquotedValue(''');    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
105	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_PLUS)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_PLUS)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_PLUS)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PLUS)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
106	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PLUS  &&  p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_PLUS  &&  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PLUS  &&  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PLUS)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
107	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "* "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "* "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "* "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "*   "))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
108	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "* "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "* "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "* "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "*   "))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
109	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals( "* "))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals( "* "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!result.equals( "* "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "*   "))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
110	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedNumber.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedNumber.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&!peekedNumber.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(buffer)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
111	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedFloat.equals(peekedFloat))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedFloat.equals(peekedFloat))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&!peekedFloat.equals(peekedFloat))  {	  }    else    if(p    ==    Long.toString(buffer)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
112	[BUG]  [BUGGY]  }  else  if(peekedLong  ==  Long.toString(buffer)&&!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong  ==  Long.toString(buffer)&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong  ==  Long.toString(buffer)&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(buffer)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
113	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedInLong.equals(peekedInLong))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedInLong.equals(peekedInLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&!peekedInLong.equals(peekedInLong))  {	  }    else    if(p    ==    Long.toString(buffer)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
114	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedLong.equals(value))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedLong.equals(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&!peekedLong.equals(value))  {	  }    else    if(p    ==    Long.toString(buffer)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
115	[BUG]  [BUGGY]  }  else  if(peekedLong  ==  Long.toString(PEEKED_LONG))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong  ==  Long.toString(PEEKED_LONG))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong  ==  Long.toString(PEEKED_LONG))  {	  }    else    if(p    ==    Long.toString(PEEKED_LONG))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
116	[BUG]  [BUGGY]  }  else  if(p  ==  Long.parseLong(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.parseLong(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.parseLong(peekedLong))  {	  }    else    if(p    ==    Long.toString(PEEKED_LONG))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
117	[BUG]  [BUGGY]  }  else  if(p  ==  long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  long.toString(peekedLong))  {	  }    else    if(p    ==    Long.toString(PEEKED_LONG))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
118	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_NONE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_NONE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_NONE)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_NONE)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
119	[BUG]  [BUGGY]  }  else  if(path  ==  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(path  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(path  ==  Long.toString(peekedLong))  {	  }    else    if(p    ==    Long.toString(path))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
120	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedLong))  {	  }    else    if(p    ==    Long.toString(path))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
121	[BUG]  [BUGGY]  }  else  if(p  ==  Long.parseLong(path))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.parseLong(path))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.parseLong(path))  {	  }    else    if(p    ==    Long.toString(path))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
122	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&  p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PREFIX  &&  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_PREFIX    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
123	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PLUS  ||  p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_PLUS  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PLUS  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_PREFIX    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
124	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  ||  p!=  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  ||  p!=  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PREFIX  ||  p!=  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_PREFIX    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
125	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
126	[BUG]  [BUGGY]  result  =  Long.toString(value);  pos  +=  PEEKED_DOUBLE_QUOTED;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(value);  pos  +=  PEEKED_DOUBLE_QUOTED;  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(value);  pos  +=  PEEKED_DOUBLE_QUOTED;	  result    =    Long.toString(peekedLong);    pos    +=    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
127	[BUG]  [BUGGY]  result  =  Long.toString(pathNames);  pos  +=  PEEKED_DOUBLE_QUOTED;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(pathNames);  pos  +=  PEEKED_DOUBLE_QUOTED;  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(pathNames);  pos  +=  PEEKED_DOUBLE_QUOTED;	  result    =    Long.toString(peekedLong);    pos    +=    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
128	[BUG]  [BUGGY]  result  =  Long.toString(path);  pos  +=  PEEKED_DOUBLE_QUOTED;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(path);  pos  +=  PEEKED_DOUBLE_QUOTED;  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(path);  pos  +=  PEEKED_DOUBLE_QUOTED;	  result    =    Long.toString(peekedLong);    pos    +=    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
129	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  value);  pos  +=  PEEKED_DOUBLE_QUOTED;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(buffer,  value);  pos  +=  PEEKED_DOUBLE_QUOTED;  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(buffer,  value);  pos  +=  PEEKED_DOUBLE_QUOTED;	  result    =    Long.toString(peekedLong);    pos    +=    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
130	[BUG]  [BUGGY]  result  =  Long.toString(p);  pos  +=  PEEKED_DOUBLE_QUOTED;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(p);  pos  +=  PEEKED_DOUBLE_QUOTED;  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(p);  pos  +=  PEEKED_DOUBLE_QUOTED;	  result    =    Long.toString(peekedLong);    pos    +=    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
131	[BUG]  [BUGGY]  result  =  Long.toString(buffer);  pos  +=  PEEKED_DOUBLE_QUOTED;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(buffer);  pos  +=  PEEKED_DOUBLE_QUOTED;  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(buffer);  pos  +=  PEEKED_DOUBLE_QUOTED;	  result    =    Long.toString(peekedLong);    pos    +=    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
132	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos);  pos  +=  PEEKED_DOUBLE_QUOTED;  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(buffer,  pos);  pos  +=  PEEKED_DOUBLE_QUOTED;  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(buffer,  pos);  pos  +=  PEEKED_DOUBLE_QUOTED;	  result    =    Long.toString(peekedLong);    pos    +=    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
133	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  peekedLong!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  peekedLong!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
134	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  peekedLong!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  peekedLong!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
135	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedString!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedString!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  peekedString!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
136	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peeredLong!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peeredLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  peeredLong!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
137	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  result  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  result  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  result  ==  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
138	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
139	[BUG]  [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
140	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  >=  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  >=  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  >=  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
141	[BUG]  [BUGGY]  }  else  if(p  <  Long.MIN_VALUE  ||  p  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  <  Long.MIN_VALUE  ||  p  >  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  <  Long.MIN_VALUE  ||  p  >  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
142	[BUG]  [BUGGY]  }  else  if(p  >=  Long.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  >=  Long.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  >=  Long.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
143	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
144	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_NUMBER)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_NUMBER)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
145	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_LOAD)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_LOAD)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_LOAD)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
146	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
147	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
148	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedLong.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedLong.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&!peekedLong.equals(long))  {	  }    else    if(peekedLong!=    null    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
149	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  ||!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  ||!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  ||!peekedLong.equals(peekedLong))  {	  }    else    if(peekedLong!=    null    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
150	[BUG]  [BUGGY]  }  else  if(peekedString!=  null  &&!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedString!=  null  &&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedString!=  null  &&!peekedLong.equals(peekedLong))  {	  }    else    if(peekedLong!=    null    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
151	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedLong.equals(peekedString))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedLong.equals(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&!peekedLong.equals(peekedString))  {	  }    else    if(peekedLong!=    null    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
152	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedLong.equals(value))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedLong.equals(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&!peekedLong.equals(value))  {	  }    else    if(peekedLong!=    null    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
153	[BUG]  [BUGGY]  }  else  if(p  ==  Long.parseLong(pathNames))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.parseLong(pathNames))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.parseLong(pathNames))  {	  }    else    if(p    ==    Long.toString(pathNames))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
154	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||  p  ==  Long.toString(pathNames))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||  p  ==  Long.toString(pathNames))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)||  p  ==  Long.toString(pathNames))  {	  }    else    if(p    ==    Long.toString(pathNames))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
155	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||  p  ==  Long.toString(pathNames[0]))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||  p  ==  Long.toString(pathNames[0]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)||  p  ==  Long.toString(pathNames[0]))  {	  }    else    if(p    ==    Long.toString(pathNames))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
156	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedString.equals( "   "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedString.equals( "   "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedString.equals( "   "))  {	  }    else    if(p    ==    PEEKED_LONG    ||!peekedLong.equals(   "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
157	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "/ "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "/ "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "/ "))  {	  }    else    if(p    ==    PEEKED_LONG    ||!peekedLong.equals(   "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
158	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedString!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedString!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedString!=  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
159	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  result  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  result  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedLong)&&  result  ==  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
160	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedInt!=  null)  {  [CE]  unclosed  character  literal  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedInt!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedInt!=  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  unclosed  character  literal	70	None	replace
161	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedNumberLength!=  null)  {  [CE]  unclosed  character  literal  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedNumberLength!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedNumberLength!=  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  unclosed  character  literal	70	None	replace
162	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedNumberLength!=  0)  {  [CE]  unclosed  character  literal  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedNumberLength!=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedNumberLength!=  0)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  unclosed  character  literal	70	None	replace
163	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  result!=  null)  {  [CE]  unclosed  character  literal  [FE]                                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  result!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedLong)&&  result!=  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  unclosed  character  literal	70	None	replace
164	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedString)&&  peekedLong!=  null)  {  [CE]  unclosed  character  literal  [FE]                                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedString)&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedString)&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  unclosed  character  literal	70	None	replace
165	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [CE]  unclosed  character  literal  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_OBJECT)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  unclosed  character  literal	63	None	replace
166	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  unclosed  character  literal  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  unclosed  character  literal	63	None	replace
167	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_VALUE)  {  [CE]  unclosed  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_VALUE)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  unclosed  character  literal	63	None	replace
168	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN_ARRAY)  {  [CE]  unclosed  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN_ARRAY)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN_ARRAY)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  unclosed  character  literal	63	None	replace
169	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_END_ARRAY)  {  [CE]  unclosed  character  literal  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_END_ARRAY)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_END_ARRAY)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  unclosed  character  literal	63	None	replace
170	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  PeekedLong.isInfinite(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  PeekedLong.isInfinite(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  PeekedLong.isInfinite(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isInfinite(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
171	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(result))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(result))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(result))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isInfinite(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
172	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(value))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(value))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isInfinite(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
173	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(path))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(path))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(path))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isInfinite(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
174	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[pos]))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[pos]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[pos]))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isInfinite(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
175	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[peekedLong]))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[peekedLong]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[peekedLong]))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isInfinite(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
176	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[0]))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[0]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[0]))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isInfinite(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
177	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  peerkedLong!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  peerkedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  peerkedLong!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peerkedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
178	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peerkedLong!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peerkedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  peerkedLong!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peerkedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
179	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.toString(peekedLong)!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.toString(peekedLong)!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.toString(peekedLong)!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peerkedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
180	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  PeekedLong.valueOf(peekedLong)!=  0)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  PeekedLong.valueOf(peekedLong)!=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  PeekedLong.valueOf(peekedLong)!=  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.valueOf(peekedLong)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
181	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(value)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(value)  ==  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(value)  ==  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.valueOf(peekedLong)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
182	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(value)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(value)!=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(value)!=  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.valueOf(peekedLong)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
183	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(result)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(result)!=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(result)!=  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.valueOf(peekedLong)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
184	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)  ==  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)  ==  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.valueOf(peekedLong)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
185	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(long)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(long)!=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(long)!=  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.valueOf(peekedLong)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
186	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  isEqualValue(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  isEqualValue(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  isEqualValue(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
187	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(result))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(result))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(result))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
188	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(buffer,  value))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(buffer,  value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(buffer,  value))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
189	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(buffer,  peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(buffer,  peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(buffer,  peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
190	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKey(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKey(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKey(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
191	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Short.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Short.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Short.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Short.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
192	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Short.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Short.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Short.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Short.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
193	[BUG]  [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Short.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
194	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  >=  Short.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  >=  Short.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  >=  Short.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Short.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
195	[BUG]  [BUGGY]  }  else  if(p  >=  Long.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  >=  Long.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  >=  Long.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Short.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
196	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
197	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
198	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BLOCK)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BLOCK)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
199	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BLOCK  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
200	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_LOCK)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_LOCK)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_LOCK)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
201	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_LEFT)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
202	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_UNQUOTED)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_UNQUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_UNQUOTED)  {	  }    else    if(p    ==    PEEKED_LEFT)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
203	[BUG]  [BUGGY]  pos  =  nextQuotedValue('   "');  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  pos  =  nextQuotedValue('   "');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	pos  =  nextQuotedValue('   "');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
204	[BUG]  [BUGGY]  pos  =  nextQuotedValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  pos  =  nextQuotedValue();  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	pos  =  nextQuotedValue();	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
205	[BUG]  [BUGGY]  pos  =  nextUnquotedValue(''');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  pos  =  nextUnquotedValue(''');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	pos  =  nextUnquotedValue(''');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
206	[BUG]  [BUGGY]  pos  =  nextQuotedValue(''',  result);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  pos  =  nextQuotedValue(''',  result);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	pos  =  nextQuotedValue(''',  result);	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
207	[BUG]  [BUGGY]  pos  =  nextQuotedValue('[');  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  pos  =  nextQuotedValue('[');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	pos  =  nextQuotedValue('[');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
208	[BUG]  [BUGGY]  result  =  nextQuotedValue(''',  PEEKED_BUFFERED);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue(''',  PEEKED_BUFFERED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue(''',  PEEKED_BUFFERED);	  result    =    nextQuotedValue(''',    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
209	[BUG]  [BUGGY]  result  =  nextQuotedValue(''',  PEEKED_SINGLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue(''',  PEEKED_SINGLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue(''',  PEEKED_SINGLE_QUOTED);	  result    =    nextQuotedValue(''',    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
210	[BUG]  [BUGGY]  result  =  nextQuotedValue('   "',  PEEKED_DOUBLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue('   "',  PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue('   "',  PEEKED_DOUBLE_QUOTED);	  result    =    nextQuotedValue(''',    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
211	[BUG]  [BUGGY]  result  =  nextQuotedValue(''',  PEEKED_UNQUOTED);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue(''',  PEEKED_UNQUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue(''',  PEEKED_UNQUOTED);	  result    =    nextQuotedValue(''',    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
212	[BUG]  [BUGGY]  result  =  nextQuotedValue(''',  PEEKED_DOUBLE_QUOTED  +  1);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue(''',  PEEKED_DOUBLE_QUOTED  +  1);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue(''',  PEEKED_DOUBLE_QUOTED  +  1);	  result    =    nextQuotedValue(''',    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
213	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedInLong.equals(peekedInLong))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedInLong.equals(peekedInLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!peekedInLong.equals(peekedInLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(peekedInLong))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
214	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedInLong.equals(peekedInLong))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedInLong.equals(peekedInLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedInLong.equals(peekedInLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(peekedInLong))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
215	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(peekedInLong))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
216	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals(peekedInLong))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals(peekedInLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!result.equals(peekedInLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(peekedInLong))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
217	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!pathNames.equals(peekedInLong))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!pathNames.equals(peekedInLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!pathNames.equals(peekedInLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(peekedInLong))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
218	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(peekedInLong))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(peekedInLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(peekedInLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(peekedInLong))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
219	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!result.equals( "   "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!result.equals( "   "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!result.equals( "   "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(   "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
220	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals( "/ "))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals( "/ "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!result.equals( "/ "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(   "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
221	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_MINUS)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_MINUS)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_MINUS)  {	  }    else    if(p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
222	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
223	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
224	[BUG]  [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  NUMBER_CHAR_LONG  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
225	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_UNQUOTED)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_UNQUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_UNQUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_UNQUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
226	[BUG]  [BUGGY]  }  else  if(peekedLong.length  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong.length  <  =  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong.length  <  =  0)  {	  }    else    if(peekedLong.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
227	[BUG]  [BUGGY]  }  else  if(peekedLong.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong.length()  ==  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong.length()  ==  0)  {	  }    else    if(peekedLong.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
228	[BUG]  [BUGGY]  }  else  if(p  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  0)  {	  }    else    if(peekedLong.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
229	[BUG]  [BUGGY]  }  else  if(peekedLong.length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong.length  ==  1)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong.length  ==  1)  {	  }    else    if(peekedLong.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
230	[BUG]  [BUGGY]  }  else  if(peekedLong.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong.length  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong.length  >  0)  {	  }    else    if(peekedLong.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
231	[BUG]  [BUGGY]  }  else  if(peekedLong.length  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong.length  ==  2)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong.length  ==  2)  {	  }    else    if(peekedLong.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
232	[BUG]  [BUGGY]  result  =  Long.toString(pathNames);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(pathNames);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(pathNames);	  result    =    Long.toString(peekedLong);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
233	[BUG]  [BUGGY]  result  =  Long.toString(value);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(value);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(value);	  result    =    Long.toString(peekedLong);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
234	[BUG]  [BUGGY]  result  =  Long.toString(path);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(path);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(path);	  result    =    Long.toString(peekedLong);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
235	[BUG]  [BUGGY]  result  =  Long.toString(pathNames[pos]);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(pathNames[pos]);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(pathNames[pos]);	  result    =    Long.toString(peekedLong);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
236	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(pathIndices[pos]);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(pathIndices[pos]);	  result    =    Long.toString(peekedLong);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
237	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(pathIndices[pos  +  1]);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(pathIndices[pos  +  1]);	  result    =    Long.toString(peekedLong);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
238	[BUG]  [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_DOUBLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue('  ',  PEEKED_DOUBLE_QUOTED);	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
239	[BUG]  [BUGGY]  result  =  nextUnquotedValue('  ');  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextUnquotedValue('  ');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextUnquotedValue('  ');	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
240	[BUG]  [BUGGY]  result  =  nextSingleQuotedValue('  ');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextSingleQuotedValue('  ');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextSingleQuotedValue('  ');	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
241	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  result  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  result  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&  result  ==  null)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
242	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&  peekedLong!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
243	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedInt!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedInt!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&  peekedInt!=  null)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
244	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedNumberLength!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedNumberLength!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&  peekedNumberLength!=  null)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
245	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedNumberLength!=  0)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedNumberLength!=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&  peekedNumberLength!=  0)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
246	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedInt)&&  peekedLong!=  null)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedInt)&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedInt)&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
247	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  result!=  null)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  result!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&  result!=  null)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
248	[BUG]  [BUGGY]  result  =  Integer.toString(PEEKED_BUFFERED);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Integer.toString(PEEKED_BUFFERED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Integer.toString(PEEKED_BUFFERED);	  result    =    Integer.toString(PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
249	[BUG]  [BUGGY]  result  =  Integer.toString(peekedInt);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Integer.toString(peekedInt);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Integer.toString(peekedInt);	  result    =    Integer.toString(PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
250	[BUG]  [BUGGY]  result  =  Long.toString(PEEKED_DOUBLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(PEEKED_DOUBLE_QUOTED);	  result    =    Integer.toString(PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
251	[BUG]  [BUGGY]  result  =  Integer.toString(PEEKED_SINGLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Integer.toString(PEEKED_SINGLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Integer.toString(PEEKED_SINGLE_QUOTED);	  result    =    Integer.toString(PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
252	[BUG]  [BUGGY]  result  =  Integer.toString(peekedLong);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Integer.toString(peekedLong);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Integer.toString(peekedLong);	  result    =    Integer.toString(PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
253	[BUG]  [BUGGY]  result  =  Integer.toString(PEEKED_UNQUOTED);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Integer.toString(PEEKED_UNQUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Integer.toString(PEEKED_UNQUOTED);	  result    =    Integer.toString(PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
254	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_DOUBLE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_DOUBLE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_DOUBLE)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_DOUBLE)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
255	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  Integer.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
256	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Integer.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Integer.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
257	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Integer.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Integer.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
258	[BUG]  [BUGGY]  }  else  if(p  ==  Integer.MAX_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Integer.MAX_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Integer.MAX_VALUE  ||  p  ==  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
259	[BUG]  [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  <  Long.MAX_VALUE  ||  p  ==  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
260	[BUG]  [BUGGY]  }  else  if(p  ==  Integer.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Integer.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Integer.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
261	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_NUMBER)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_NUMBER)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
262	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
263	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
264	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_BOOLEAN_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
265	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_MINUS  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_MINUS  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_MINUS  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
266	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!long.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!long.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!long.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!long.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
267	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!long.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!long.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!long.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!long.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
268	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(long)&&!long.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(long)&&!long.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(long)&&!long.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!long.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
269	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!long.equals(PEEKED_LONG))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!long.equals(PEEKED_LONG))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!long.equals(PEEKED_LONG))  {	  }    else    if(p    ==    PEEKED_LONG    &&!long.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
270	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( ". "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( ". "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( ". "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedString.equals(   "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
271	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_FLOAT)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_FLOAT)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
272	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FLUSH)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FLUSH)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FLUSH)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
273	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedInt.equals(peekedInt))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedInt.equals(peekedInt))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedInt.equals(peekedInt))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInt.equals(peekedInt))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
274	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInt.equals(peekedInt))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
275	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(value))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(value))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInt.equals(peekedInt))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
276	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(peekedInt))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(peekedInt))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(peekedInt))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInt.equals(peekedInt))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
277	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals( " "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals( " "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals( " "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInt.equals(peekedInt))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
278	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(lenient))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(lenient))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(lenient))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInt.equals(peekedInt))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
279	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peeredLong!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peeredLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  peeredLong!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    ||    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
280	[BUG]  [BUGGY]  }  else  if(p  ==  Long.parseLong(value))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.parseLong(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.parseLong(value))  {	  }    else    if(p    ==    Long.toString(value))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
281	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BEFORE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BEFORE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_BEFORE)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEFORE)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
282	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  PeekedLong.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  PeekedLong.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  PeekedLong.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PeekedLong.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
283	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PeekedLong.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PeekedLong.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PeekedLong.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PeekedLong.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
284	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PeekedLong.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
285	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PeekedLong.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PeekedLong.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PeekedLong.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PeekedLong.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
286	[BUG]  [BUGGY]  }  else  if(p  ==  PeekedLong.MAX_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PeekedLong.MAX_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PeekedLong.MAX_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PeekedLong.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
287	[BUG]  [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  <  Long.MAX_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PeekedLong.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
288	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peekedInt!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peekedInt!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  peekedInt!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedInt!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
289	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  peekedInt  >=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  peekedInt  >=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  peekedInt  >=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedInt!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
290	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  PeekedLong.isEmpty(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  PeekedLong.isEmpty(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  PeekedLong.isEmpty(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
291	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(value))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
292	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(result))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(result))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(result))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
293	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(path))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(path))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(path))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
294	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(PEEKED_DOUBLE_QUOTED))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(PEEKED_DOUBLE_QUOTED))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(PEEKED_DOUBLE_QUOTED))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
295	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(PEEKED_STRING))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(PEEKED_STRING))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(PEEKED_STRING))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
296	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DECIMAL)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DECIMAL)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DECIMAL)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
297	[BUG]  [BUGGY]  result  =  nextQuotedValue('   "');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue('   "');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue('   "');	  result    =    nextUnquotedValue();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
298	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  PeekedLong.isEmpty(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  PeekedLong.isEmpty(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  PeekedLong.isEmpty(peekedLong))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
299	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(result))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(result))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(result))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
300	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(value))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(value))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
301	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(path))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(path))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(path))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
302	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_NUMBER_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_NUMBER_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_NUMBER_QUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_NUMBER_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
303	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_MINUS_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_MINUS_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_MINUS_QUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_NUMBER_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
304	[BUG]  [BUGGY]  }  else  if(result  ==  null  &&  result.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(result  ==  null  &&  result.length()  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(result  ==  null  &&  result.length()  >  0)  {	  }    else    if(peekedLong!=    null    &&    result.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
305	[BUG]  [BUGGY]  }  else  if(result!=  null  &&  result.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(result!=  null  &&  result.length()  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(result!=  null  &&  result.length()  >  0)  {	  }    else    if(peekedLong!=    null    &&    result.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
306	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  result.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&  result.length()  ==  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  result.length()  ==  0)  {	  }    else    if(peekedLong!=    null    &&    result.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
307	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  result.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&  result.length()  <  =  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  result.length()  <  =  0)  {	  }    else    if(peekedLong!=    null    &&    result.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
308	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  ||  result.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  ||  result.length()  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  ||  result.length()  >  0)  {	  }    else    if(peekedLong!=    null    &&    result.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
309	[BUG]  [BUGGY]  }  else  if(result  ==  null  ||  result.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(result  ==  null  ||  result.length()  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(result  ==  null  ||  result.length()  >  0)  {	  }    else    if(peekedLong!=    null    &&    result.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
310	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
311	[BUG]  [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MAX_VALUE  ||  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
312	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p!=  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p!=  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p!=  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
313	[BUG]  [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  <  Long.MAX_VALUE  ||  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
314	[BUG]  [BUGGY]  result  =  nextSingLEQUOTEDValue(''');  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextSingLEQUOTEDValue(''');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextSingLEQUOTEDValue(''');	  result    =    nextQuotedValue(''');    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
315	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Integer.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
316	[BUG]  [BUGGY]  }  else  if(p  ==  Integer.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Integer.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Integer.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
317	[BUG]  [BUGGY]  }  else  if(p  <  Long.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  <  Long.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  <  Long.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
318	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Integer.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p!=  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
319	[BUG]  [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
320	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedString.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedString.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!peekedString.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedString.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
321	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedString.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedString.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedString.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedString.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
322	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedString.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
323	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(PEEKED_LONG)&&!peekedString.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(PEEKED_LONG)&&!peekedString.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(PEEKED_LONG)&&!peekedString.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedString.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
324	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!pathNames.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!pathNames.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!pathNames.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedString.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
325	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)||!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    ||!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
326	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(PEEKED_LONG)||!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(PEEKED_LONG)||!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(PEEKED_LONG)||!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    ||!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
327	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    ||!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
328	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_FUNCTION)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_FUNCTION)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
329	[BUG]  [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_SIGN)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  NUMBER_CHAR_SIGN)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  NUMBER_CHAR_SIGN)  {	  }    else    if(p    ==    PEEKED_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
330	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
331	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedString.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedString.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedString.equals(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
332	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(value))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(value))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
333	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedInt.equals(peekedInt))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedInt.equals(peekedInt))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedInt.equals(peekedInt))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
334	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedFloat.equals(peekedFloat))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedFloat.equals(peekedFloat))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedFloat.equals(peekedFloat))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
335	[BUG]  [BUGGY]  }  else  if(peekedLong!=  Long.MIN_VALUE  &&!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  Long.MIN_VALUE  &&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  Long.MIN_VALUE  &&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
336	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_PREFIX)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
337	[BUG]  [BUGGY]  }  else  if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_PREFIX)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  >=  PEEKED_LONG  ||  p  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
338	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p!=  PEEKED_PREFIX)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p!=  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p!=  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
339	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  >=  PEEKED_PREFIX)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  >=  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  >=  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
340	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedInLong.equals( "   "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedInLong.equals( "   "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedInLong.equals( "   "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(   "   "))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
341	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( "* "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( "* "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( "* "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(   "   "))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
342	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( "- "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( "- "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( "- "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(   "   "))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
343	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( "+ "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( "+ "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( "+ "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(   "   "))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
344	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peeredLong!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peeredLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  peeredLong!=  null)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
345	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedInt!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedInt!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  peekedInt!=  null)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
346	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peerekedLong!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peerekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  peerekedLong!=  null)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
347	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedString!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedString!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  peekedString!=  null)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
348	[BUG]  [BUGGY]  result  =  nextValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextValue();  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextValue();	  result    =    nextValue(''');    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
349	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p!=  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p!=  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p!=  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
350	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  >=  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  >=  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  >=  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
351	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  <  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  <  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  <  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
352	[BUG]  [BUGGY]  }  else  if(result  ==  null  &&  result  ==  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(result  ==  null  &&  result  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(result  ==  null  &&  result  ==  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
353	[BUG]  [BUGGY]  }  else  if(peekedString!=  null  &&  result  ==  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedString!=  null  &&  result  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedString!=  null  &&  result  ==  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
354	[BUG]  [BUGGY]  }  else  if(peekedInLong!=  null  &&  result  ==  Long.toString(peekedInLong))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedInLong!=  null  &&  result  ==  Long.toString(peekedInLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedInLong!=  null  &&  result  ==  Long.toString(peekedInLong))  {	  }    else    if(peekedLong!=    null    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
355	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  ||  result  ==  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  ||  result  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  ||  result  ==  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
356	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedLong.toString()  ==  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedLong.toString()  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  peekedLong.toString()  ==  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
357	[BUG]  [BUGGY]  }  else  if(result  ==  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(result  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(result  ==  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
358	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1)&&!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1)&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1)&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
359	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1)||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1)||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1)||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
360	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1)||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1)||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1)||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
361	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1)||  p  ==  PEEKED_LONG)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1)||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1)||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
362	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(long))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
363	[BUG]  [BUGGY]  }  else  if(p  ==  long  &&!peekedLong.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  long  &&!peekedLong.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  long  &&!peekedLong.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(long))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
364	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(long)&&!peekedLong.equals(long))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(long)&&!peekedLong.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(long)&&!peekedLong.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(long))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
365	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(long))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(long))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
366	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  result  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  result  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  result  ==  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
367	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
368	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result!=  Long.MIN_VALUE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result!=  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result!=  Long.MIN_VALUE)  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    null)    {    	non-compiled	[CE]  	39	None	replace
369	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.equals(peekedLong))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
370	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
371	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  pathIndices[stackSize  -  1]  >=  PEEKED_LONG)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  pathIndices[stackSize  -  1]  >=  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  pathIndices[stackSize  -  1]  >=  PEEKED_LONG)  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
372	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
373	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  pathIndices[stackSize  -  1]  >=  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  pathIndices[stackSize  -  1]  >=  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  pathIndices[stackSize  -  1]  >=  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
374	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  pathIndices[stackSize  -  1]!=  PEEKED_LONG)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  pathIndices[stackSize  -  1]!=  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  pathIndices[stackSize  -  1]!=  PEEKED_LONG)  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
375	[BUG]  [BUGGY]  result  =  nextSingleQuotedValue(' "');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextSingleQuotedValue(' "');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextSingleQuotedValue(' "');	  result    =    nextUnquotedValue('       "');    	non-compiled	[CE]  	99	None	replace
376	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||  peekedLong!=  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)||  peekedLong!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	38	None	replace
377	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos  +  1))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos  +  1))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos  +  1))  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1))    {    	non-compiled	[CE]  	58	None	replace
378	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong  +  1))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong  +  1))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong  +  1))  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1))    {    	non-compiled	[CE]  	58	None	replace
379	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong);  pos  +=  pathNames[pos  +  1))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong);  pos  +=  pathNames[pos  +  1))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong);  pos  +=  pathNames[pos  +  1))  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1))    {    	non-compiled	[CE]  	58	None	replace
380	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BLOCK)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BLOCK)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BLOCK)  {	  }    else    if(p    ==    PEEKED_NUMBER)    {    	non-compiled	[CE]  	26	None	replace
381	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toLongBits(peekedLong)&&  peekedString  ==  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toLongBits(peekedLong)&&  peekedString  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toLongBits(peekedLong)&&  peekedString  ==  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedString    ==    null)    {    	non-compiled	[CE]  	91	None	replace
382	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(peekedString))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(peekedString))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isInfinite(peekedLong))    {    	non-compiled	[CE]  	84	None	replace
383	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isInfinite(peekedLong))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isInfinite(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isInfinite(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isInfinite(peekedLong))    {    	non-compiled	[CE]  	84	None	replace
384	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[pos++]))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[pos++]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(pathNames[pos++]))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isInfinite(peekedLong))    {    	non-compiled	[CE]  	84	None	replace
385	[BUG]  [BUGGY]  }  else  if(peekedLong  ==  null  &&  result.length()  >  0)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong  ==  null  &&  result.length()  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong  ==  null  &&  result.length()  >  0)  {	  }    else    if(peekedLong!=    null    &&    result.length()    >    0)    {    	non-compiled	[CE]  	86	None	replace
386	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedString.length()  >  0)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedString.length()  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  peekedString.length()  >  0)  {	  }    else    if(peekedLong!=    null    &&    result.length()    >    0)    {    	non-compiled	[CE]  	86	None	replace
387	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_NONE  ||  p  ==  PEEKED_PREFIX)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_NONE  ||  p  ==  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_NONE  ||  p  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_PREFIX    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	51	None	replace
388	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SIZE  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_SIZE  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_SIZE  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_PREFIX    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	51	None	replace
389	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toLongBits(peekedLong)&&  peekedInt!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toLongBits(peekedLong)&&  peekedInt!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toLongBits(peekedLong)&&  peekedInt!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedInt!=    null)    {    	non-compiled	[CE]  	93	None	replace
390	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(peekedString))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(peekedString))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  	82	None	replace
391	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(pathNames))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(pathNames))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(pathNames))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  	82	None	replace
392	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedString)!=  0)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedString)!=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedString)!=  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.valueOf(peekedLong)!=    0)    {    	non-compiled	[CE]  	83	None	replace
393	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedInt)!=  0)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedInt)!=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedInt)!=  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.valueOf(peekedLong)!=    0)    {    	non-compiled	[CE]  	83	None	replace
394	[BUG]  [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  ||  PeekedLong.valueOf(peekedLong)!=  0)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  ||  PeekedLong.valueOf(peekedLong)!=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MIN_VALUE  ||  PeekedLong.valueOf(peekedLong)!=  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.valueOf(peekedLong)!=    0)    {    	non-compiled	[CE]  	83	None	replace
395	[BUG]  [BUGGY]  }  else  if(peekedInLong  ==  null)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedInLong  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedInLong  ==  null)  {	  }    else    if(peekedLong    ==    null)    {    	non-compiled	[CE]  	35	None	replace
396	[BUG]  [BUGGY]  }  else  if(peekedFloat  ==  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedFloat  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedFloat  ==  null)  {	  }    else    if(peekedLong    ==    null)    {    	non-compiled	[CE]  	35	None	replace
397	[BUG]  [BUGGY]  }  else  if(peekedLong  ==  null  &&  result  <  Long.toString(peekedLong))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong  ==  null  &&  result  <  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong  ==  null  &&  result  <  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    <    Long.toString(peekedLong))    {    	non-compiled	[CE]  	87	None	replace
398	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos  +  1]))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos  +  1]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos  +  1]))  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
399	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
400	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.contains(peekedLong))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.contains(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.contains(peekedLong))  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
401	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.isEmpty())  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.isEmpty())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.isEmpty())  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
402	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  peekedLong!=  null)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
403	[BUG]  [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Integer.MIN_VALUE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Integer.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  	9	None	replace
404	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEFORE_ARRAY)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEFORE_ARRAY)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEFORE_ARRAY)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEGIN_ARRAY)    {    	non-compiled	[CE]  	63	None	replace
405	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!long.equals(peekedLong))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!long.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&!long.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!long.equals(peekedLong))    {    	non-compiled	[CE]  	21	None	replace
406	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!long.equals(peekedLong))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!long.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!long.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!long.equals(peekedLong))    {    	non-compiled	[CE]  	21	None	replace
407	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals( "- "))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals( "- "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals( "- "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "-   "))    {    	non-compiled	[CE]  	16	None	replace
408	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "-))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "-))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "-))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "-   "))    {    	non-compiled	[CE]  	16	None	replace
409	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toLongBits(peekedLong))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toLongBits(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toLongBits(peekedLong))  {	  }    else    if(p    ==    Long.toString(path))    {    	non-compiled	[CE]  	49	None	replace
410	[BUG]  [BUGGY]  }  else  if(peekedLong  ==  Long.toString(path))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong  ==  Long.toString(path))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong  ==  Long.toString(path))  {	  }    else    if(p    ==    Long.toString(path))    {    	non-compiled	[CE]  	49	None	replace
411	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedInLong))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedInLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedInLong))  {	  }    else    if(p    ==    Long.toString(path))    {    	non-compiled	[CE]  	49	None	replace
412	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos]))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos]))  {	  }    else    if(p    ==    Long.toString(pathNames[pos]))    {    	non-compiled	[CE]  	43	None	replace
413	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong);	  }    else    if(p    ==    Long.toString(pathNames[pos]))    {    	non-compiled	[CE]  	43	None	replace
414	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.isEmpty())  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.isEmpty())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.isEmpty())  {	  }    else    if(p    ==    Long.toString(pathNames[pos]))    {    	non-compiled	[CE]  	43	None	replace
415	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.startsWith(peekedLong))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.startsWith(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.startsWith(peekedLong))  {	  }    else    if(p    ==    Long.toString(pathNames[pos]))    {    	non-compiled	[CE]  	43	None	replace
416	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toLongBits(peekedLong)&&  peekedString!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toLongBits(peekedLong)&&  peekedString!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toLongBits(peekedLong)&&  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedString!=    null)    {    	non-compiled	[CE]  	40	None	replace
417	[BUG]  [BUGGY]  result  =  Long.toString(buffer);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(buffer);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(buffer);	  result    =    Long.toString(peekedLong);    pos    +=    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  	32	None	replace
418	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  10);  pos  +=  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(buffer,  10);  pos  +=  PEEKED_DOUBLE_QUOTED;  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(buffer,  10);  pos  +=  PEEKED_DOUBLE_QUOTED;	  result    =    Long.toString(peekedLong);    pos    +=    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  	32	None	replace
419	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  pos);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(buffer,  pos);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(buffer,  pos);	  result    =    Long.toString(peekedLong);    pos    +=    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  	32	None	replace
420	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  p  ==  PEEKED_PLUS)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  p  ==  PEEKED_PLUS)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&  p  ==  PEEKED_PLUS)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PLUS)    {    	non-compiled	[CE]  	41	None	replace
421	[BUG]  [BUGGY]  pos  =  nextQuotedValue('-');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  pos  =  nextQuotedValue('-');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	pos  =  nextQuotedValue('-');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	98	None	replace
422	[BUG]  [BUGGY]  pos  =  nextQuotedValue('/');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  pos  =  nextQuotedValue('/');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	pos  =  nextQuotedValue('/');	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	98	None	replace
423	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||  p  ==  Long.toString(peekedLong))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||  p  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)||  p  ==  Long.toString(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(peekedLong))    {    	non-compiled	[CE]  	22	None	replace
424	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||!result.equals(peekedLong))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||!result.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)||!result.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(peekedLong))    {    	non-compiled	[CE]  	22	None	replace
425	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!result.equals(long))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!result.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!result.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(peekedLong))    {    	non-compiled	[CE]  	22	None	replace
426	[BUG]  [BUGGY]  }  else  if(peekedLong.length!=  0)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong.length!=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong.length!=  0)  {	  }    else    if(peekedLong.length    ==    0)    {    	non-compiled	[CE]  	73	None	replace
427	[BUG]  [BUGGY]  }  else  if(peekedLong.length  ==  3)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong.length  ==  3)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong.length  ==  3)  {	  }    else    if(peekedLong.length    ==    0)    {    	non-compiled	[CE]  	73	None	replace
428	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toHexString(peekedLong))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toHexString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toHexString(peekedLong))  {	  }    else    if(p    ==    Long.toString(pathNames))    {    	non-compiled	[CE]  	59	None	replace
429	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toLongBoolean(peekedLong))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toLongBoolean(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toLongBoolean(peekedLong))  {	  }    else    if(p    ==    Long.toString(pathNames))    {    	non-compiled	[CE]  	59	None	replace
430	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_NONE  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_NONE  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_NONE  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_NONE)    {    	non-compiled	[CE]  	97	None	replace
431	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  ==  0)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  ==  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  peekedNumberLength  ==  0)  {	  }    else    if(peekedLong!=    null    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	88	None	replace
432	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(value)&&  peekedLong!=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(value)&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(value)&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  	69	None	replace
433	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&  peekedNumberLength!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&  peekedNumberLength!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&  peekedNumberLength!=  null)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  	69	None	replace
434	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedBy)&&  peekedLong!=  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedBy)&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedBy)&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  	69	None	replace
435	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames)&&  peekedLong!=  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames)&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames)&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  	69	None	replace
436	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  ==  Long.toString(peekedLong))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  peekedNumberLength  ==  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  	85	None	replace
437	[BUG]  [BUGGY]  }  else  if(peekedString  ==  null  &&  result  ==  Long.toString(peekedLong))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedString  ==  null  &&  result  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedString  ==  null  &&  result  ==  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  	85	None	replace
438	[BUG]  [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  &&  p  ==  Long.MIN_VALUE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  &&  p  ==  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MAX_VALUE  &&  p  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  	55	None	replace
439	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p!=  Long.MIN_VALUE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  p!=  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  p!=  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  	55	None	replace
440	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedLong.equals( " "))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedLong.equals( " "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&!peekedLong.equals( " "))  {	  }    else    if(peekedLong!=    null    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	104	None	replace
441	[BUG]  [BUGGY]  }  else  if(peekedLong  ==  null  &&!peekedLong.equals(peekedLong))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong  ==  null  &&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong  ==  null  &&!peekedLong.equals(peekedLong))  {	  }    else    if(peekedLong!=    null    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	104	None	replace
442	[BUG]  [BUGGY]  }  else  if(peekedInLong!=  null  &&!peekedInLong.equals(peekedInLong))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedInLong!=  null  &&!peekedInLong.equals(peekedInLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedInLong!=  null  &&!peekedInLong.equals(peekedInLong))  {	  }    else    if(peekedLong!=    null    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	104	None	replace
443	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  result  ==  Long.MIN_VALUE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  result  ==  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  result  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    null)    {    	non-compiled	[CE]  	39	None	replace
444	[BUG]  [BUGGY]  result  =  nextQuotedValue('[');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue('[');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue('[');	  result    =    nextQuotedValue(''');    	non-compiled	[CE]  	29	None	replace
445	[BUG]  [BUGGY]  result  =  nextQuotedValue('.');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue('.');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue('.');	  result    =    nextQuotedValue(''');    	non-compiled	[CE]  	29	None	replace
446	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_MINUS  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_MINUS  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_MINUS  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	25	None	replace
447	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	25	None	replace
448	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_INCOMPLETE_INTEGER)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_INCOMPLETE_INTEGER)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_INCOMPLETE_INTEGER)  {	  }    else    if(p    ==    Long.toString(value))    {    	non-compiled	[CE]  	45	None	replace
449	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedString))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedString))  {	  }    else    if(p    ==    Long.toString(peekedString))    {    	non-compiled	[CE]  	105	None	replace
450	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toLongBits(peekedString))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toLongBits(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toLongBits(peekedString))  {	  }    else    if(p    ==    Long.toString(peekedString))    {    	non-compiled	[CE]  	105	None	replace
451	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	27	None	replace
452	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_SINGLE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_SINGLE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_SINGLE)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	27	None	replace
453	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualKeyword(value))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualKeyword(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  isEqualKeyword(value))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  	95	None	replace
454	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKey(value))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKey(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKey(value))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  	106	None	replace
455	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKey(peekedString))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKey(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKey(peekedString))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  	106	None	replace
456	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKeyword(peekedLong))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKeyword(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualKeyword(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  	106	None	replace
457	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&  Long.isLong(peekedLong))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&  Long.isLong(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PREFIX  &&  Long.isLong(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	50	None	replace
458	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&  Long.toString(peekedLong)!=  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&  Long.toString(peekedLong)!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PREFIX  &&  Long.toString(peekedLong)!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	50	None	replace
459	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&  Long.toString(peekedLong)!=  false)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&  Long.toString(peekedLong)!=  false)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PREFIX  &&  Long.toString(peekedLong)!=  false)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	50	None	replace
460	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_NONE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_NONE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_NONE)  {	  }    else    if(p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	36	None	replace
461	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedNumberLength!=  null)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedNumberLength!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  peekedNumberLength!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  	94	None	replace
462	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedInt!=  null)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedInt!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  peekedInt!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  	94	None	replace
463	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peerekedLong!=  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peerekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  peerekedLong!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  	94	None	replace
464	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	37	None	replace
465	[BUG]  [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Long.MIN_VALUE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  	8	None	replace
466	[BUG]  [BUGGY]  }  else  if(p  >=  Long.MIN_VALUE  &&  p  ==  Long.MIN_VALUE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  >=  Long.MIN_VALUE  &&  p  ==  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  >=  Long.MIN_VALUE  &&  p  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  	8	None	replace
467	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BIGINT)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BIGINT)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BIGINT)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEGIN_AR)    {    	non-compiled	[CE]  	90	None	replace
468	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals( "* "))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals( "* "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals( "* "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "*   "))    {    	non-compiled	[CE]  	14	None	replace
469	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "* ")||  p  ==  Long.toString(peekedLong))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "* ")||  p  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "* ")||  p  ==  Long.toString(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "*   "))    {    	non-compiled	[CE]  	14	None	replace
470	[BUG]  [BUGGY]  }  else  if(p  ==  PeekedLong.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PeekedLong.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PeekedLong.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PeekedLong.MIN_VALUE)    {    	non-compiled	[CE]  	81	None	replace
471	[BUG]  [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  &&  p  ==  PeekedLong.MIN_VALUE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  &&  p  ==  PeekedLong.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MAX_VALUE  &&  p  ==  PeekedLong.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PeekedLong.MIN_VALUE)    {    	non-compiled	[CE]  	81	None	replace
472	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peerkedLong))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peerkedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peerkedLong))  {	  }    else    if(p    ==    Long.toString(buffer))    {    	non-compiled	[CE]  	44	None	replace
473	[BUG]  [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_BUFFERED);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_BUFFERED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue('  ',  PEEKED_BUFFERED);	  result    =    nextQuotedValue(''',    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	34	None	replace
474	[BUG]  [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue('  ',  PEEKED_SINGLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue('  ',  PEEKED_SINGLE_QUOTED);	  result    =    nextQuotedValue(''',    PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	34	None	replace
475	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong!=  Long.MIN_VALUE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong!=  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong!=  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  	67	None	replace
476	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p!=  Long.MAX_VALUE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p!=  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p!=  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  	67	None	replace
477	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  <  =  Long.MIN_VALUE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  <  =  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  <  =  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  	67	None	replace
478	[BUG]  [BUGGY]  result  =  nextQuotedValue(''+  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue(''+  PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue(''+  PEEKED_DOUBLE_QUOTED);	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  	60	None	replace
479	[BUG]  [BUGGY]  result  =  nextQuotedValue('  ',  peekedString);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue('  ',  peekedString);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue('  ',  peekedString);	  result    =    nextQuotedValue('    ');    	non-compiled	[CE]  	60	None	replace
480	[BUG]  [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Long.MAX_VALUE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  	7	None	replace
481	[BUG]  [BUGGY]  }  else  if(p  >=  Long.MIN_VALUE  &&  p  ==  Long.MAX_VALUE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  >=  Long.MIN_VALUE  &&  p  ==  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  >=  Long.MIN_VALUE  &&  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  	7	None	replace
482	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_PREFIX)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	10	None	replace
483	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_NUMBER_QUOTED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_NUMBER_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_NUMBER_QUOTED)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	10	None	replace
484	[BUG]  [BUGGY]  result  =  nextUnquotedValue('   "',  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextUnquotedValue('   "',  PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextUnquotedValue('   "',  PEEKED_DOUBLE_QUOTED);	  result    =    nextUnquotedValue('       "');    	non-compiled	[CE]  	99	None	replace
485	[BUG]  [BUGGY]  result  =  nextUnquotedValue('   "',  PEEKED_BUFFERED);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextUnquotedValue('   "',  PEEKED_BUFFERED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextUnquotedValue('   "',  PEEKED_BUFFERED);	  result    =    nextUnquotedValue('       "');    	non-compiled	[CE]  	99	None	replace
486	[BUG]  [BUGGY]  result  =  nextUnquotedValue('   "',  PEEKED_SINGLE_QUOTED);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextUnquotedValue('   "',  PEEKED_SINGLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextUnquotedValue('   "',  PEEKED_SINGLE_QUOTED);	  result    =    nextUnquotedValue('       "');    	non-compiled	[CE]  	99	None	replace
487	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BEFORE  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BEFORE  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BEFORE  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEFORE)    {    	non-compiled	[CE]  	71	None	replace
488	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEFFER)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEFFER)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEFFER)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_BEFORE)    {    	non-compiled	[CE]  	71	None	replace
489	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos++]))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos++]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong,  pathNames[pos++]))  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  	47	None	replace
490	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.isEmpty())  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.isEmpty())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.isEmpty())  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  	47	None	replace
491	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong[pos++]))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong[pos++]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong[pos++]))  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  	47	None	replace
492	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.startsWith(peekedLong))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.startsWith(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.startsWith(peekedLong))  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  	47	None	replace
493	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedString)&&!peekedLong.equals(peekedLong))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedString)&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedString)&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	18	None	replace
494	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedNumber)&&!peekedLong.equals(peekedLong))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedNumber)&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedNumber)&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	18	None	replace
495	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedInt)&&!peekedLong.equals(peekedLong))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedInt)&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedInt)&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	18	None	replace
496	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peeked)&&!peekedString.equals(peekedLong))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peeked)&&!peekedString.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peeked)&&!peekedString.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	18	None	replace
497	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(value)&&!peekedLong.equals(value))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(value)&&!peekedLong.equals(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(value)&&!peekedLong.equals(value))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	18	None	replace
498	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(buffer))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(buffer))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(buffer))  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  	92	None	replace
499	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  result  ==  Long.toString(peekedLong))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  result  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  result  ==  Long.toString(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  	92	None	replace
500	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&  result  ==  Long.toString(peekedLong))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&  result  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&  result  ==  Long.toString(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  	92	None	replace
501	[BUG]  [BUGGY]  result  =  nextValue('  ');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextValue('  ');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextValue('  ');	  result    =    nextValue(''');    	non-compiled	[CE]  	62	None	replace
502	[BUG]  [BUGGY]  result  =  nextValue('   "');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextValue('   "');  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextValue('   "');	  result    =    nextValue(''');    	non-compiled	[CE]  	62	None	replace
503	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedLong)&&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	3	None	replace
504	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedInt.equals(peekedLong))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedInt.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedInt.equals(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	66	None	replace
505	[BUG]  [BUGGY]  result  =  nextUnquotedValue('  ',  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextUnquotedValue('  ',  PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextUnquotedValue('  ',  PEEKED_DOUBLE_QUOTED);	  result    =    nextUnquotedValue(''');    	non-compiled	[CE]  	31	None	replace
506	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Short.MIN_VALUE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Short.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Short.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Short.MAX_VALUE)    {    	non-compiled	[CE]  	11	None	replace
507	[BUG]  [BUGGY]  }  else  if(p  ==  Short.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Short.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Short.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Short.MAX_VALUE)    {    	non-compiled	[CE]  	11	None	replace
508	[BUG]  [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Short.MAX_VALUE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Short.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MIN_VALUE  &&  p  ==  Short.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Short.MAX_VALUE)    {    	non-compiled	[CE]  	11	None	replace
509	[BUG]  [BUGGY]  }  else  if(p  <  Long.MIN_VALUE  ||  p  >  Short.MAX_VALUE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  <  Long.MIN_VALUE  ||  p  >  Short.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  <  Long.MIN_VALUE  ||  p  >  Short.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Short.MAX_VALUE)    {    	non-compiled	[CE]  	11	None	replace
510	[BUG]  [BUGGY]  }  else  if(p  ==  Short.MIN_VALUE  &&  p  ==  Short.MAX_VALUE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Short.MIN_VALUE  &&  p  ==  Short.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Short.MIN_VALUE  &&  p  ==  Short.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Short.MAX_VALUE)    {    	non-compiled	[CE]  	11	None	replace
511	[BUG]  [BUGGY]  result  =  nextQuotedValue(0);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue(0);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue(0);	  result    =    nextUnquotedValue();    	non-compiled	[CE]  	30	None	replace
512	[BUG]  [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(buffer,  0,  peekedNumberLength);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(buffer,  0,  peekedNumberLength);	  result    =    Long.toString(peekedLong);    	non-compiled	[CE]  	28	None	replace
513	[BUG]  [BUGGY]  result  =  Long.toString(peekedNumberLength);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(peekedNumberLength);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(peekedNumberLength);	  result    =    Long.toString(peekedLong);    	non-compiled	[CE]  	28	None	replace
514	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(long))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(long))    {    	non-compiled	[CE]  	20	None	replace
515	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PEEKED_LONG  &&!peekedLong.equals(long))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PEEKED_LONG  &&!peekedLong.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  PEEKED_LONG  &&!peekedLong.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(long))    {    	non-compiled	[CE]  	20	None	replace
516	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedLong.equals(long))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedLong.equals(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&!peekedLong.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(long))    {    	non-compiled	[CE]  	20	None	replace
517	[BUG]  [BUGGY]  result  =  Long.toString(peekedInt);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(peekedInt);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(peekedInt);	  result    =    Integer.toString(PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	33	None	replace
518	[BUG]  [BUGGY]  result  =  Long.toString(peekedByte);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(peekedByte);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(peekedByte);	  result    =    Integer.toString(PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	33	None	replace
519	[BUG]  [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  &&  p  ==  Long.MAX_VALUE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  &&  p  ==  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MAX_VALUE  &&  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  	54	None	replace
520	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(buffer)&&  peekedLong!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(buffer)&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(buffer)&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  	70	None	replace
521	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedNumberLength  >=  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedNumberLength  >=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedNumberLength  >=  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  	70	None	replace
522	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(value)&&  peekedLong!=  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(value)&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(value)&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  	70	None	replace
523	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedNumberLength!=  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedNumberLength!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  peekedNumberLength!=  null)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  	68	None	replace
524	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedString  ==  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedString  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  peekedString  ==  null)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  	68	None	replace
525	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedString.equals(peekedLong))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedString.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&!peekedString.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(buffer)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	65	None	replace
526	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedInt.equals(peekedInt))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedInt.equals(peekedInt))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&!peekedInt.equals(peekedInt))  {	  }    else    if(p    ==    Long.toString(buffer)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	65	None	replace
527	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toLongBits(long)&&!peekedString.equals(peekedLong))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toLongBits(long)&&!peekedString.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toLongBits(long)&&!peekedString.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedString.equals(peekedLong))    {    	non-compiled	[CE]  	17	None	replace
528	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||!peekedString.equals(peekedLong))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)||!peekedString.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)||!peekedString.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedString.equals(peekedLong))    {    	non-compiled	[CE]  	17	None	replace
529	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedInLong.equals(peekedInLong))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedInLong.equals(peekedInLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedInLong.equals(peekedInLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(peekedInLong))    {    	non-compiled	[CE]  	102	None	replace
530	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peerkedString!=  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peerkedString!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  peerkedString!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peerkedLong!=    null)    {    	non-compiled	[CE]  	96	None	replace
531	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peerkedLong  >=  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peerkedLong  >=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  peerkedLong  >=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peerkedLong!=    null)    {    	non-compiled	[CE]  	96	None	replace
532	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DEPRECATED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_DEPRECATED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_DEPRECATED)  {	  }    else    if(p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	78	None	replace
533	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(peekedString))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(peekedString))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  	80	None	replace
534	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(pathNames))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(pathNames))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(pathNames))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  	80	None	replace
535	[BUG]  [BUGGY]  }  else  if(peekedInLong!=  false)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedInLong!=  false)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedInLong!=  false)  {	  }    else    if(peekedString!=    null)    {    	non-compiled	[CE]  	75	None	replace
536	[BUG]  [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MAX_VALUE  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MAX_VALUE  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	57	None	replace
537	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_PREFIX)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	57	None	replace
538	[BUG]  [BUGGY]  }  else  if(peekedLong  >=  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong  >=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong  >=  null)  {	  }    else    if(peekedInLong!=    null)    {    	non-compiled	[CE]  	74	None	replace
539	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&!peekedLong.isEmpty())  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&!peekedLong.isEmpty())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&!peekedLong.isEmpty())  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.isEmpty())    {    	non-compiled	[CE]  	107	None	replace
540	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedInLong.isEmpty())  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedInLong.isEmpty())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedInLong.isEmpty())  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.isEmpty())    {    	non-compiled	[CE]  	107	None	replace
541	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedFloat.isEmpty())  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedFloat.isEmpty())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedFloat.isEmpty())  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.isEmpty())    {    	non-compiled	[CE]  	107	None	replace
542	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.length())  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.length())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.length())  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.isEmpty())    {    	non-compiled	[CE]  	107	None	replace
543	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals(value))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals(value))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(long))    {    	non-compiled	[CE]  	20	None	replace
544	[BUG]  [BUGGY]  }  else  if(p  ==  PeekedLong.toString(pathNames))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PeekedLong.toString(pathNames))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PeekedLong.toString(pathNames))  {	  }    else    if(p    ==    Long.toString(pathNames))    {    	non-compiled	[CE]  	59	None	replace
545	[BUG]  [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)!=  0)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)!=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)!=  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.valueOf(peekedLong)!=    0)    {    	non-compiled	[CE]  	83	None	replace
546	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)  >=  0)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)  >=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)  >=  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.valueOf(peekedLong)!=    0)    {    	non-compiled	[CE]  	83	None	replace
547	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toUpperCase(peekedString))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toUpperCase(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toUpperCase(peekedString))  {	  }    else    if(p    ==    Long.toString(peekedString))    {    	non-compiled	[CE]  	105	None	replace
548	[BUG]  [BUGGY]  }  else  if(peekedString  ==  Long.toString(peekedLong))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedString  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedString  ==  Long.toString(peekedLong))  {	  }    else    if(p    ==    Long.toString(peekedString))    {    	non-compiled	[CE]  	105	None	replace
549	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toHexString(peekedString))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toHexString(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toHexString(peekedString))  {	  }    else    if(p    ==    Long.toString(peekedString))    {    	non-compiled	[CE]  	105	None	replace
550	[BUG]  [BUGGY]  }  else  if(peekedString  ==  null  ||  result  ==  Long.toString(peekedLong))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedString  ==  null  ||  result  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedString  ==  null  ||  result  ==  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  	85	None	replace
551	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toLongBits(value))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toLongBits(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toLongBits(value))  {	  }    else    if(p    ==    Long.toString(value))    {    	non-compiled	[CE]  	45	None	replace
552	[BUG]  [BUGGY]  }  else  if(p  ==  PeekedLong.toString(value))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PeekedLong.toString(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PeekedLong.toString(value))  {	  }    else    if(p    ==    Long.toString(value))    {    	non-compiled	[CE]  	45	None	replace
553	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedCharacter.equals(peekedCharacter))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedCharacter.equals(peekedCharacter))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&!peekedCharacter.equals(peekedCharacter))  {	  }    else    if(p    ==    Long.toString(buffer)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	65	None	replace
554	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  null  ||  result  ==  Long.toString(peekedLong))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  null  ||  result  ==  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result  ==  null  ||  result  ==  Long.toString(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    null)    {    	non-compiled	[CE]  	39	None	replace
555	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.equals(result))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.equals(result))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos])&&!peekedLong.equals(result))  {	  }    else    if(p    ==    Long.toString(pathNames[pos]))    {    	non-compiled	[CE]  	43	None	replace
556	[BUG]  [BUGGY]  }  else  if(PEEKED_LONG.equals(pathNames[pos]))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(PEEKED_LONG.equals(pathNames[pos]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(PEEKED_LONG.equals(pathNames[pos]))  {	  }    else    if(p    ==    Long.toString(pathNames[pos]))    {    	non-compiled	[CE]  	43	None	replace
557	[BUG]  [BUGGY]  pos  =  nextQuotedValue(''',  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  pos  =  nextQuotedValue(''',  PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	pos  =  nextQuotedValue(''',  PEEKED_DOUBLE_QUOTED);	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	98	None	replace
558	[BUG]  [BUGGY]  pos  =  nextQuotedValue(''',  PEEKED_BUFFERED);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  pos  =  nextQuotedValue(''',  PEEKED_BUFFERED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	pos  =  nextQuotedValue(''',  PEEKED_BUFFERED);	  pos    =    nextQuotedValue(''');    	non-compiled	[CE]  	98	None	replace
559	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_SPACE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_SPACE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_SPACE)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PLUS)    {    	non-compiled	[CE]  	41	None	replace
560	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  result.length()  >=  0)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&  result.length()  >=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  result.length()  >=  0)  {	  }    else    if(peekedLong!=    null    &&    result.length()    >    0)    {    	non-compiled	[CE]  	86	None	replace
561	[BUG]  [BUGGY]  }  else  if(peekedObject  ==  null)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedObject  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedObject  ==  null)  {	  }    else    if(peekedLong    ==    null)    {    	non-compiled	[CE]  	35	None	replace
562	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_LEFT)    {    	non-compiled	[CE]  	77	None	replace
563	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_PREFIX)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_LEFT)    {    	non-compiled	[CE]  	77	None	replace
564	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LEFT  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_LEFT)    {    	non-compiled	[CE]  	77	None	replace
565	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DECIMAL  ||  p  ==  PEEKED_LONG)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_DECIMAL  ||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_DECIMAL  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_PREFIX    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	51	None	replace
566	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  pos  ==  PEEKED_PREFIX)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  pos  ==  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  pos  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_PREFIX    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	51	None	replace
567	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peeked)&&!peekedLong.equals(peekedLong))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peeked)&&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peeked)&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	18	None	replace
568	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.equals(pathNames[pos  +  1]))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.equals(pathNames[pos  +  1]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.equals(pathNames[pos  +  1]))  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
569	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])||  p  ==  PEEKED_LONG)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])||  p  ==  PEEKED_LONG)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
570	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.equals(result))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.equals(result))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1])&&!peekedLong.equals(result))  {	  }    else    if(p    ==    Long.toString(pathNames[pos    +    1]))    {    	non-compiled	[CE]  	46	None	replace
571	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&!peekedLong.equals(peekedLong))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PREFIX  &&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	78	None	replace
572	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&!peekedLong.equals(result))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  &&!peekedLong.equals(result))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PREFIX  &&!peekedLong.equals(result))  {	  }    else    if(p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	78	None	replace
573	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.contains( "+ "))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.contains( "+ "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.contains( "+ "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "+   "))    {    	non-compiled	[CE]  	101	None	replace
574	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "/ "))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "/ "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "/ "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "+   "))    {    	non-compiled	[CE]  	101	None	replace
575	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  &&!peekedLong.equals(peekedLong))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  &&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BOOLEAN  &&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	37	None	replace
576	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BEGIN_OBJECT)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BOOLEAN  ||  p  ==  PEEKED_BEGIN_OBJECT)  {	  }    else    if(p    ==    PEEKED_BOOLEAN)    {    	non-compiled	[CE]  	37	None	replace
577	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedLong  <  =  null)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedLong  <  =  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  peekedLong  <  =  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  	94	None	replace
578	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedString  ==  null)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedString  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  peekedString  ==  null)  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  	94	None	replace
579	[BUG]  [BUGGY]  result  =  nextValue(''',  PEEKED_DOUBLE_QUOTED);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextValue(''',  PEEKED_DOUBLE_QUOTED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextValue(''',  PEEKED_DOUBLE_QUOTED);	  result    =    nextValue(''');    	non-compiled	[CE]  	62	None	replace
580	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peekedNumberLength!=  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peekedNumberLength!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  peekedNumberLength!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    ||    peekedLong!=    null)    {    	non-compiled	[CE]  	38	None	replace
581	[BUG]  [BUGGY]  result  =  nextQuotedValue(''',  p);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextQuotedValue(''',  p);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue(''',  p);	  result    =    nextQuotedValue(''');    	non-compiled	[CE]  	29	None	replace
582	[BUG]  [BUGGY]  }  else  if(peekedString  ==  null  &&  result  <  Long.toString(peekedLong))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedString  ==  null  &&  result  <  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedString  ==  null  &&  result  <  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    <    Long.toString(peekedLong))    {    	non-compiled	[CE]  	87	None	replace
583	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  result  <  =  Long.toString(peekedLong))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&  result  <  =  Long.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  result  <  =  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null    &&    result    <    Long.toString(peekedLong))    {    	non-compiled	[CE]  	87	None	replace
584	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.contains( "- "))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.contains( "- "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.contains( "- "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "-   "))    {    	non-compiled	[CE]  	16	None	replace
585	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals( "- "))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals( "- "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals( "- "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "-   "))    {    	non-compiled	[CE]  	16	None	replace
586	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BLACK)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BLACK)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BLACK)  {	  }    else    if(p    ==    PEEKED_NUMBER)    {    	non-compiled	[CE]  	26	None	replace
587	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedString  ==  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedString  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedString  ==  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  	70	None	replace
588	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedInt)&&  peekedLong!=  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedInt)&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedInt)&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  	70	None	replace
589	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedBy)&&  peekedLong!=  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedBy)&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedBy)&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.valueOf(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  	70	None	replace
590	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_LONG  &&!result.equals(peekedLong))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  PEEKED_LONG  &&!result.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  PEEKED_LONG  &&!result.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(long))    {    	non-compiled	[CE]  	23	None	replace
591	[BUG]  [BUGGY]  }  else  if(p  ==  Integer.MIN_VALUE  ||  p  ==  Integer.MAX_VALUE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Integer.MIN_VALUE  ||  p  ==  Integer.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Integer.MIN_VALUE  ||  p  ==  Integer.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  	9	None	replace
592	[BUG]  [BUGGY]  result  =  nextUnquotedValue(''',  PEEKED_BUFFERED);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  nextUnquotedValue(''',  PEEKED_BUFFERED);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextUnquotedValue(''',  PEEKED_BUFFERED);	  result    =    nextUnquotedValue(''');    	non-compiled	[CE]  	31	None	replace
593	[BUG]  [BUGGY]  }  else  if(p  ==  PeekedLong.toString(peekedLong))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PeekedLong.toString(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PeekedLong.toString(peekedLong))  {	  }    else    if(p    ==    Long.toString(path))    {    	non-compiled	[CE]  	49	None	replace
594	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(peekedInt))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(peekedInt))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(peekedInt))  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  	92	None	replace
595	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(pathNames[pos  +  1]))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(pathNames[pos  +  1]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(pathNames[pos  +  1]))  {	  }    else    if(p    ==    PEEKED_LONG    &&    result    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  	92	None	replace
596	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals( "+ "))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals( "+ "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!result.equals( "+ "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!result.equals(   "       "))    {    	non-compiled	[CE]  	15	None	replace
597	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  >=  0)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  >=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  peekedNumberLength  >=  0)  {	  }    else    if(peekedLong!=    null    &&    peekedNumberLength    >    0)    {    	non-compiled	[CE]  	88	None	replace
598	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!long.equals(peekedString))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!long.equals(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!long.equals(peekedString))  {	  }    else    if(p    ==    PEEKED_LONG    &&!long.equals(peekedLong))    {    	non-compiled	[CE]  	21	None	replace
599	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!long.equals(pathNames))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!long.equals(pathNames))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!long.equals(pathNames))  {	  }    else    if(p    ==    PEEKED_LONG    &&!long.equals(peekedLong))    {    	non-compiled	[CE]  	21	None	replace
600	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.equals(pathNames[pos++]))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.equals(pathNames[pos++]))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.equals(pathNames[pos++]))  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  	47	None	replace
601	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.equals(result))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.equals(result))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.equals(result))  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  	47	None	replace
602	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.contains(result))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.contains(result))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos++])&&!peekedLong.contains(result))  {	  }    else    if(p    ==    Long.toString(pathNames[pos++]))    {    	non-compiled	[CE]  	47	None	replace
603	[BUG]  [BUGGY]  }  else  if(p  ==  Integer.MAX_VALUE  &&  p  ==  Integer.MIN_VALUE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Integer.MAX_VALUE  &&  p  ==  Integer.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Integer.MAX_VALUE  &&  p  ==  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  	56	None	replace
604	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedBuffer)&&  peekedLong!=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedBuffer)&&  peekedLong!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedBuffer)&&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.toString(peekedLong)&&    peekedLong!=    null)    {    	non-compiled	[CE]  	69	None	replace
605	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.contains( "* "))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.contains( "* "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.contains( "* "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "*   "))    {    	non-compiled	[CE]  	14	None	replace
606	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals( "* "))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals( "* "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals( "* "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "*   "))    {    	non-compiled	[CE]  	14	None	replace
607	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_MIN_VALUE  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_MIN_VALUE  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_MIN_VALUE  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  	57	None	replace
608	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!result.length()  >  0)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!result.length()  >  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!result.length()  >  0)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.isEmpty())    {    	non-compiled	[CE]  	107	None	replace
609	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!result.length())  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!result.length())  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!result.length())  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.isEmpty())    {    	non-compiled	[CE]  	107	None	replace
610	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedString.equals(peekedLong))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedString.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&!peekedString.equals(peekedLong))  {	  }    else    if(peekedLong!=    null    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	104	None	replace
611	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BEFORE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BEFORE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BEFORE)  {	  }    else    if(p    ==    null)    {    	non-compiled	[CE]  	76	None	replace
612	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong  <  =  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong  <  =  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong  <  =  null)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  	68	None	replace
613	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong  >=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong  >=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong  >=  null)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    peekedLong!=    null)    {    	non-compiled	[CE]  	68	None	replace
614	[BUG]  [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  >  Long.MAX_VALUE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  >  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  <  Long.MAX_VALUE  ||  p  >  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  	54	None	replace
615	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(peekedString))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(peekedString))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  	95	None	replace
616	[BUG]  [BUGGY]  }  else  if(peekedString  ==  null  ||  peekedLong.length()  ==  0)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedString  ==  null  ||  peekedLong.length()  ==  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedString  ==  null  ||  peekedLong.length()  ==  0)  {	  }    else    if(peekedString    ==    null)    {    	non-compiled	[CE]  	72	None	replace
617	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  <  =  Long.MAX_VALUE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  <  =  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  <  =  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  	67	None	replace
618	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  >=  Long.MAX_VALUE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  >=  Long.MAX_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  >=  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  	67	None	replace
619	[BUG]  [BUGGY]  result  =  Integer.toString(peeked);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Integer.toString(peeked);  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Integer.toString(peeked);	  result    =    Integer.toString(PEEKED_DOUBLE_QUOTED);    	non-compiled	[CE]  	33	None	replace
620	[BUG]  [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  >  Long.MIN_VALUE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  <  Long.MAX_VALUE  ||  p  >  Long.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  <  Long.MAX_VALUE  ||  p  >  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  	55	None	replace
621	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(value))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(value))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(peekedInLong))    {    	non-compiled	[CE]  	102	None	replace
622	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(lenient))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(lenient))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(lenient))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInLong.equals(peekedInLong))    {    	non-compiled	[CE]  	102	None	replace
623	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(long))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(long))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  	82	None	replace
624	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(len))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(len))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(len))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedInt.equals(peekedInt))    {    	non-compiled	[CE]  	103	None	replace
625	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(peekedString))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(peekedString))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	66	None	replace
626	[BUG]  [BUGGY]  }  else  if(peekedLong  ==  null  ||!peekedLong.equals(peekedLong))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong  ==  null  ||!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong  ==  null  ||!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    ||!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  	19	None	replace
627	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!lenient)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!lenient)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!lenient)  {	  }    else    if(p    ==    Long.toString(PEEKED_LONG))    {    	non-compiled	[CE]  	48	None	replace
628	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(len))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(len))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(len))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedString.equals(peekedLong))    {    	non-compiled	[CE]  	17	None	replace
629	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!pathNames.contains(peekedString))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!pathNames.contains(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!pathNames.contains(peekedString))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedString.equals(peekedLong))    {    	non-compiled	[CE]  	17	None	replace
630	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(long))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(long))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(long))  {	  }    else    if(p    ==    Long.MAX_VALUE    &&    PeekedLong.isEmpty(peekedLong))    {    	non-compiled	[CE]  	80	None	replace
631	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  PEEKED_LONG  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED    ||    p    ==    PEEKED_LONG)    {    	non-compiled	[CE]  	27	None	replace
632	[BUG]  [BUGGY]  }  else  if(p  ==  PeekedLong.MAX_VALUE  &&  p  ==  PeekedLong.MIN_VALUE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PeekedLong.MAX_VALUE  &&  p  ==  PeekedLong.MIN_VALUE)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PeekedLong.MAX_VALUE  &&  p  ==  PeekedLong.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE    ||    p    ==    PeekedLong.MIN_VALUE)    {    	non-compiled	[CE]  	81	None	replace
633	[BUG]  [BUGGY]  }  else  if(peekedLong.length  >=  0)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(peekedLong.length  >=  0)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong.length  >=  0)  {	  }    else    if(peekedLong.length    ==    0)    {    	non-compiled	[CE]  	73	None	replace
634	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "/ "))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "/ "))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "/ "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedString.equals(   "       "))    {    	non-compiled	[CE]  	12	None	replace
635	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toLongBits(buffer))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.toLongBits(buffer))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toLongBits(buffer))  {	  }    else    if(p    ==    Long.toString(buffer))    {    	non-compiled	[CE]  	44	None	replace
636	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  pos  ==  PEEKED_PREFIX)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  pos  ==  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  pos  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	50	None	replace
637	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_LONG  &&  p  ==  PEEKED_PREFIX)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  PEEKED_LONG  &&  p  ==  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  PEEKED_LONG  &&  p  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	50	None	replace
638	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p!=  PEEKED_PREFIX)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p!=  PEEKED_PREFIX)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p!=  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	50	None	replace
639	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    &&    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  	50	None	replace
640	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	36	None	replace
641	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&!peekedLong.equals(peekedLong))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED  &&!peekedLong.equals(peekedLong))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BUFFERED  &&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_BUFFERED)    {    	non-compiled	[CE]  	36	None	replace
642	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  peekedInt  ==  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  peekedInt  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  peekedInt  ==  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedString    ==    null)    {    	non-compiled	[CE]  	91	None	replace
643	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  pathIndices[pos  +  1]  ==  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  pathIndices[pos  +  1]  ==  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  pathIndices[pos  +  1]  ==  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedString    ==    null)    {    	non-compiled	[CE]  	91	None	replace
644	[BUG]  [BUGGY]  }  else  if(p!=  PEEKED_LONG  &&  peekedString!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p!=  PEEKED_LONG  &&  peekedString!=  null)  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p!=  PEEKED_LONG  &&  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedString    ==    null)    {    	non-compiled	[CE]  	91	None	replace
645	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(result,  value))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(result,  value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(result,  value))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  	106	None	replace
646	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(peekedString))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(peekedString))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(peekedString))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  	106	None	replace
647	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(peekedLong,  value))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(peekedLong,  value))  {  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(peekedLong,  value))  {	  }    else    if(p    ==    Long.MIN_VALUE    &&    isEqualValue(peekedLong))    {    	non-compiled	[CE]  	106	None	replace
648	[BUG]  [BUGGY]  result  =  Long.toString(pathIndices[pos]);  pos  +=  PEEKED_DOUBLE_QUOTED;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('     "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;      [BUGGY]  result  =  Long.toString(pathIndices[pos]);  pos  +=  PEEKED_DOUBLE_QUOTED;  [BUGGY]      result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(     "Expected  a  string  but  was       "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(pathIndices[pos]);  pos  +=  PEEKED_DOUBLE_QUOTED;	  result    =    Long.toString(peekedLong);    pos    +=    PEEKED_DOUBLE_QUOTED;    	non-compiled	[CE]  	32	None	replace
