bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_SINGLE_QUOTED)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_SINGLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BUFFERED)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
4	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_UNQUOTED)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_UNQUOTED)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_UNQUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_NUMBER_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_NUMBER_QUOTED)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_NUMBER_QUOTED)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FUNCTION)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FUNCTION)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  ||  p  ==  Short.MAX_VALUE)  {	  }    else    if(p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "   "))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "   "))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals( "   "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "   "))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
13	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "   "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "   "))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals( "   "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "   "))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
14	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "* "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "* "))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "* "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "   "))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals( "   "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals( "   "))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!result.equals( "   "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "   "))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "- "))  {  [CE]  orphaned  default  [FE]                        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "- "))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "- "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "   "))    {    	non-compiled	[CE]  orphaned  default	12	None	replace
17	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(peekedLong))  {  [CE]  orphaned  default  [FE]        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedString.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  orphaned  default	8	None	replace
18	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))  {  [CE]  orphaned  default  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  orphaned  default	8	None	replace
19	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals(peekedLong))  {  [CE]  orphaned  default  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  orphaned  default	8	None	replace
20	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals(long))  {  [CE]  orphaned  default  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals(long))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  orphaned  default	8	None	replace
21	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!long.equals(peekedLong))  {  [CE]  orphaned  default  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!long.equals(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!long.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  orphaned  default	8	None	replace
22	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals(peekedLong))  {  [CE]  orphaned  default  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!result.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  orphaned  default	8	None	replace
23	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals(long))  {  [CE]  orphaned  default  [FE]                    ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!result.equals(long))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!result.equals(long))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  orphaned  default	8	None	replace
24	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  orphaned  default  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  orphaned  default	3	None	replace
25	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  orphaned  default  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  orphaned  default	3	None	replace
26	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_NUMBER)  {  [CE]  orphaned  default  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_NUMBER)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_NUMBER)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  orphaned  default	3	None	replace
27	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_LONG)  {  [CE]  orphaned  default  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_LONG)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  orphaned  default	3	None	replace
28	[BUG]  [BUGGY]  result  =  Long.toString(peekedLong);  [CE]  orphaned  default  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  result  =  Long.toString(peekedLong);  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(peekedLong);	      	non-compiled	[CE]  orphaned  default	5	None	replace
29	[BUG]  [BUGGY]  result  =  nextQuotedValue(''');  [CE]  orphaned  default  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  result  =  nextQuotedValue(''');  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue(''');	      	non-compiled	[CE]  orphaned  default	5	None	replace
30	[BUG]  [BUGGY]  result  =  nextUnquotedValue();  [CE]  orphaned  default  [FE]                    ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  result  =  nextUnquotedValue();  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextUnquotedValue();	      	non-compiled	[CE]  orphaned  default	5	None	replace
31	[BUG]  [BUGGY]  result  =  nextUnquotedValue(''');  [CE]  orphaned  default  [FE]                      ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  result  =  nextUnquotedValue(''');  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextUnquotedValue(''');	      	non-compiled	[CE]  orphaned  default	5	None	replace
32	[BUG]  [BUGGY]  result  =  Long.toString(peekedLong);  pos  +=  PEEKED_DOUBLE_QUOTED;  [CE]  orphaned  default  [FE]                        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  result  =  Long.toString(peekedLong);  pos  +=  PEEKED_DOUBLE_QUOTED;  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Long.toString(peekedLong);  pos  +=  PEEKED_DOUBLE_QUOTED;	      	non-compiled	[CE]  orphaned  default	5	None	replace
33	[BUG]  [BUGGY]  result  =  Integer.toString(PEEKED_DOUBLE_QUOTED);  [CE]  orphaned  default  [FE]                          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  result  =  Integer.toString(PEEKED_DOUBLE_QUOTED);  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  Integer.toString(PEEKED_DOUBLE_QUOTED);	      	non-compiled	[CE]  orphaned  default	5	None	replace
34	[BUG]  [BUGGY]  result  =  nextQuotedValue(''',  PEEKED_DOUBLE_QUOTED);  [CE]  orphaned  default  [FE]                            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  result  =  nextQuotedValue(''',  PEEKED_DOUBLE_QUOTED);  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue(''',  PEEKED_DOUBLE_QUOTED);	      	non-compiled	[CE]  orphaned  default	5	None	replace
35	[BUG]  [BUGGY]  }  else  if(peekedLong  ==  null)  {  [CE]  orphaned  default  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(peekedLong  ==  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong  ==  null)  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  orphaned  default	7	None	replace
36	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED)  {  [CE]  orphaned  default  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_BUFFERED)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BUFFERED)  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  orphaned  default	7	None	replace
37	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN)  {  [CE]  orphaned  default  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_BOOLEAN)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_BOOLEAN)  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  orphaned  default	7	None	replace
38	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peekedLong!=  null)  {  [CE]  orphaned  default  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  peekedLong!=  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  peekedLong!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedLong!=    null)    {    	non-compiled	[CE]  orphaned  default	11	None	replace
39	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  null)  {  [CE]  orphaned  default  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result  ==  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedLong!=    null)    {    	non-compiled	[CE]  orphaned  default	11	None	replace
40	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  peekedString!=  null)  {  [CE]  orphaned  default  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  peekedString!=  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  peekedString!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedLong!=    null)    {    	non-compiled	[CE]  orphaned  default	11	None	replace
41	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_PLUS)  {  [CE]  orphaned  default  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_PLUS)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_PLUS)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_PLUS)    {    	non-compiled	[CE]  orphaned  default	10	None	replace
42	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_NUMBER)  {  [CE]  orphaned  default  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_NUMBER)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_NUMBER)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_PLUS)    {    	non-compiled	[CE]  orphaned  default	10	None	replace
43	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos]))  {  [CE]  orphaned  default  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos]))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos]))  {	  }    else    if(p    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  orphaned  default	2	None	replace
44	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer))  {  [CE]  orphaned  default  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(buffer))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer))  {	  }    else    if(p    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  orphaned  default	2	None	replace
45	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(value))  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(value))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(value))  {	  }    else    if(p    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
46	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1]))  {  [CE]  orphaned  default  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1]))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1]))  {	  }    else    if(p    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  orphaned  default	2	None	replace
47	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++]))  {  [CE]  orphaned  default  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos++]))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos++]))  {	  }    else    if(p    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  orphaned  default	2	None	replace
48	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(PEEKED_LONG))  {  [CE]  orphaned  default  [FE]                    ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(PEEKED_LONG))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(PEEKED_LONG))  {	  }    else    if(p    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  orphaned  default	2	None	replace
49	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(path))  {  [CE]  orphaned  default  [FE]                      ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(path))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(path))  {	  }    else    if(p    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  orphaned  default	2	None	replace
50	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_PREFIX)  {  [CE]  orphaned  default  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_PREFIX)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  p  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  orphaned  default	9	None	replace
51	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_LONG)  {  [CE]  orphaned  default  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_LONG)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PREFIX  ||  p  ==  PEEKED_LONG)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  orphaned  default	9	None	replace
52	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FLOAT)  {  [CE]  orphaned  default  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FLOAT)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_FLOAT)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  orphaned  default	9	None	replace
53	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {  [CE]  orphaned  default  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BOOLEAN)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  orphaned  default	9	None	replace
54	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [CE]  orphaned  default  [FE]        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Long.MAX_VALUE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Long.MAX_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  orphaned  default	6	None	replace
55	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [CE]  orphaned  default  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Long.MIN_VALUE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  orphaned  default	6	None	replace
56	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [CE]  orphaned  default  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Integer.MIN_VALUE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  Integer.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  orphaned  default	6	None	replace
57	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PEEKED_DOUBLE_QUOTED)  {	  }    else    if(p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
58	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1))  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(pathNames[pos  +  1))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames[pos  +  1))  {	  }    else    if(p    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
59	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(pathNames))  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(pathNames))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(pathNames))  {	  }    else    if(p    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
60	[BUG]  [BUGGY]  result  =  nextQuotedValue('  ');  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  result  =  nextQuotedValue('  ');  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue('  ');	      	non-compiled	[CE]  ';'  expected	5	None	replace
61	[BUG]  [BUGGY]  result  =  nextQuotedValue();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  result  =  nextQuotedValue();  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextQuotedValue();	      	non-compiled	[CE]  ';'  expected	5	None	replace
62	[BUG]  [BUGGY]  result  =  nextValue(''');  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  result  =  nextValue(''');  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextValue(''');	      	non-compiled	[CE]  ';'  expected	5	None	replace
63	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_ARRAY)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_ARRAY)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_PLUS)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
64	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BLOCK)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BLOCK)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BLOCK)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_PLUS)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
65	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedLong.equals(peekedLong))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(buffer)&&!peekedLong.equals(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(buffer)&&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  ';'  expected	8	None	replace
66	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(peekedLong))  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  ';'  expected	8	None	replace
67	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Long.MIN_VALUE)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Long.MIN_VALUE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  p  ==  Long.MIN_VALUE)  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  ';'  expected	8	None	replace
68	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong!=  null)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong!=  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  peekedLong!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedLong!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
69	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedLong!=  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(peekedLong)&&  peekedLong!=  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedLong)&&  peekedLong!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedLong!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
70	[BUG]  [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedLong!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedLong!=  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.valueOf(peekedLong)&&  peekedLong!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedLong!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
71	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEFORE)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEFORE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEFORE)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
72	[BUG]  [BUGGY]  }  else  if(peekedString  ==  null)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(peekedString  ==  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedString  ==  null)  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
73	[BUG]  [BUGGY]  }  else  if(peekedLong.length  ==  0)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(peekedLong.length  ==  0)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong.length  ==  0)  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
74	[BUG]  [BUGGY]  }  else  if(peekedInLong!=  null)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(peekedInLong!=  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedInLong!=  null)  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
75	[BUG]  [BUGGY]  }  else  if(peekedString!=  null)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(peekedString!=  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedString!=  null)  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
76	[BUG]  [BUGGY]  }  else  if(p  ==  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  null)  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
77	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LEFT)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LEFT)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LEFT)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
78	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_PREFIX)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
79	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( " "))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( " "))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals( " "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "   "))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
80	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  PeekedLong.isEmpty(peekedLong))  {	  }    else    if(p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  ||  p  ==  PeekedLong.MIN_VALUE)  {	  }    else    if(p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
82	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isEmpty(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
83	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)!=  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)!=  0)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.valueOf(peekedLong)!=  0)  {	  }    else    if(p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
84	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  PeekedLong.isInfinite(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
85	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  result  ==  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(peekedLong!=  null  &&  result  ==  Long.toString(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  result  ==  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
86	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  result.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(peekedLong!=  null  &&  result.length()  >  0)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  result.length()  >  0)  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
87	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  result  <  Long.toString(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(peekedLong!=  null  &&  result  <  Long.toString(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  result  <  Long.toString(peekedLong))  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
88	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  >  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(peekedLong!=  null  &&  peekedNumberLength  >  0)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&  peekedNumberLength  >  0)  {	  }    else    if(peekedLong!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
89	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE)  {  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_DOUBLE)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_PLUS)    {    	non-compiled	[CE]  unclosed  character  literal	10	None	replace
90	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_AR)  {  [CE]  unclosed  character  literal  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_AR)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_BEGIN_AR)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_PREFIX)    {    	non-compiled	[CE]  unclosed  character  literal	9	None	replace
91	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  peekedString  ==  null)  {  [CE]  unclosed  character  literal  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  peekedString  ==  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  peekedString  ==  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedLong!=    null)    {    	non-compiled	[CE]  unclosed  character  literal	11	None	replace
92	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(peekedLong))  {  [CE]  unclosed  character  literal  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  result  ==  Long.toString(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedLong!=    null)    {    	non-compiled	[CE]  unclosed  character  literal	11	None	replace
93	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  peekedInt!=  null)  {  [CE]  unclosed  character  literal  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&  peekedInt!=  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&  peekedInt!=  null)  {	  }    else    if(p    ==    PEEKED_LONG    &&    peekedLong!=    null)    {    	non-compiled	[CE]  unclosed  character  literal	11	None	replace
94	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedLong!=  null)  {  [CE]  unclosed  character  literal  [FE]        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peekedLong!=  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  peekedLong!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  unclosed  character  literal	6	None	replace
95	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(peekedLong))  {  [CE]  unclosed  character  literal  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  isEqualValue(peekedLong))  {	  }    else    if(p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  unclosed  character  literal	6	None	replace
96	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peerkedLong!=  null)  {  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MAX_VALUE  &&  peerkedLong!=  null)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MAX_VALUE  &&  peerkedLong!=  null)  {	  }    else    if(p    ==    Long.MAX_VALUE)    {    	non-compiled	[CE]  unclosed  character  literal	6	None	replace
97	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_NONE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_NONE)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  ||  p  ==  PEEKED_NONE)  {	  }    else    if(p    ==    PEEKED_LONG    ||    p    ==    PEEKED_DOUBLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
98	[BUG]  [BUGGY]  pos  =  nextQuotedValue(''');  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  pos  =  nextQuotedValue(''');  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	pos  =  nextQuotedValue(''');	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
99	[BUG]  [BUGGY]  result  =  nextUnquotedValue('   "');  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  result  =  nextUnquotedValue('   "');  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	result  =  nextUnquotedValue('   "');	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_PREFIX)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_PREFIX)  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_SINGLE_QUOTED  ||  p  ==  PEEKED_PREFIX)  {	  }    else    if(p    ==    PEEKED_SINGLE_QUOTED)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
101	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "+ "))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "+ "))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedLong.equals( "+ "))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(   "   "))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
102	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(peekedInLong))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(peekedInLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInLong.equals(peekedInLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
103	[BUG]  [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(peekedInt))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(peekedInt))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  PEEKED_LONG  &&!peekedInt.equals(peekedInt))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
104	[BUG]  [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedLong.equals(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(peekedLong!=  null  &&!peekedLong.equals(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(peekedLong!=  null  &&!peekedLong.equals(peekedLong))  {	  }    else    if(p    ==    PEEKED_LONG    &&!peekedLong.equals(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
105	[BUG]  [BUGGY]  }  else  if(p  ==  Long.toString(peekedString))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.toString(peekedString))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.toString(peekedString))  {	  }    else    if(p    ==    Long.toString(peekedLong))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
106	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(peekedLong))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(peekedLong))  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&  isEqualValue(peekedLong))  {	  }    else    if(p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
107	[BUG]  [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    String  result;  if  (p  ==  PEEKED_UNQUOTED)  {  result  =  nextUnquotedValue();  }  else  if  (p  ==  PEEKED_SINGLE_QUOTED)  {  result  =  nextQuotedValue('\'');  }  else  if  (p  ==  PEEKED_DOUBLE_QUOTED)  {  result  =  nextQuotedValue('   "');  }  else  if  (p  ==  PEEKED_BUFFERED)  {  result  =  peekedString;  peekedString  =  null;    [BUGGY]  }  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.isEmpty())  {  [BUGGY]    result  =  Long.toString(peekedLong);  }  else  if  (p  ==  PEEKED_NUMBER)  {  result  =  new  String(buffer,  pos,  peekedNumberLength);  pos  +=  peekedNumberLength;  }  else  {  throw  new  IllegalStateException(   "Expected  a  string  but  was     "  +  peek()  +  locationString());  }  peeked  =  PEEKED_NONE;  pathIndices[stackSize  -  1]++;  return  result;  [CLASS]  JsonReader  1  [METHOD]  nextString  [RETURN_TYPE]  String  [VARIABLES]  boolean  fitsInLong  lenient  negative  Reader  in  int[]  pathIndices  stack  String  keyword  keywordUpper  peekedString  result  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  newValue  peekedLong  value  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  i  l  last  length  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  peeking  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson13/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.5773502691896258	819	819	1	replace	}  else  if(p  ==  Long.MIN_VALUE  &&!peekedLong.isEmpty())  {	  }    else    if(p    ==    Long.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
