bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] switch (val2) { [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { [BUGGY] switch (val2) { [BUGGY] case -1: return -val1; case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { [BUGGY] [BUGGY] switch (val2) { case -1: return -val1; case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	136	136	1	add	
3	[BUG] [BUGGY] return -val1; [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: [BUGGY] return -val1; [BUGGY] case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return total; [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: [BUGGY] [BUGGY] return -val1; case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return total; [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	
5	[BUG] [BUGGY] return 0L; [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: return -val1; case 0: [BUGGY] return 0L; [BUGGY] case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return total; } [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	140	140	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: return -val1; case 0: [BUGGY] [BUGGY] return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return total; } [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	140	140	1	add	
7	[BUG] [BUGGY] return val1; [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: return -val1; case 0: return 0L; case 1: [BUGGY] return val1; [BUGGY] } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return total; } [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	142	142	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: return -val1; case 0: return 0L; case 1: [BUGGY] [BUGGY] return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return total; } [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	142	142	1	add	
9	[BUG] [BUGGY] long total = val1 * val2; [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: return -val1; case 0: return 0L; case 1: return val1; } [BUGGY] long total = val1 * val2; [BUGGY] if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return total; } [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	144	144	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: return -val1; case 0: return 0L; case 1: return val1; } [BUGGY] [BUGGY] long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return total; } [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	144	144	1	add	
11	[BUG] [BUGGY] if (total / val2 != val1) { [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: return -val1; case 0: return 0L; case 1: return val1; } long total = val1 * val2; [BUGGY] if (total / val2 != val1) { [BUGGY] throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return total; } [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	145	145	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: return -val1; case 0: return 0L; case 1: return val1; } long total = val1 * val2; [BUGGY] [BUGGY] if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } return total; } [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	145	145	1	add	
13	[BUG] [BUGGY] return total; [FE] AssertionFailedError [CONTEXT] return -val1; case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } [BUGGY] return total; [BUGGY] } [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	148	148	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return -val1; case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2); } [BUGGY] [BUGGY] return total; } [CLASS] FieldUtils [METHOD] safeMultiply [RETURN_TYPE] long  long val1 int val2 [VARIABLES] boolean long total val1 int val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	148	148	1	add	
