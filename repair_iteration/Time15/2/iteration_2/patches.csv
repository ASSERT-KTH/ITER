bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	354	1	add
2	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	354	1	add
3	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  ArithmeticException  	354	1	add
4	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  ArithmeticException  	354	1	add
5	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  <identifier>  expected	354	None	add
6	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2,  val1);  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2,  val1);  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2,  val1);  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  ';'  expected	354	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	354	1	add
8	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	354	1	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	354	1	add
10	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	354	1	add
11	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val3,  val1);  }  [CE]  cannot  find  symbol  val3  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val3,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val3,  val1);  }	  	non-compiled	[CE]  cannot  find  symbol  val3	354	None	add
12	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1).;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1).;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1).;  }	  	non-compiled	[CE]  <identifier>  expected	354	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	354	1	add
14	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	354	1	add
15	[BUG]  [BUGGY]  long  return  -1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  return  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  return  -1;	  return    -1L;    long    return    -1L;    	non-compiled	[CE]  not  a  statement	227	None	replace
16	[BUG]  [BUGGY]  long  return  -1L;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  return  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  return  -1L;	  return    -1L;    long    return    -1L;    	non-compiled	[CE]  not  a  statement	227	None	replace
17	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    long    return    -1L;    	non-compiled	[CE]  not  a  statement	227	None	replace
18	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    long    return    -1L;    	non-compiled	[CE]  not  a  statement	227	None	replace
19	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    long    return    -1L;    	non-compiled	[CE]  not  a  statement	227	None	replace
20	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }  else  {  throw  new  ArithmeticException( " ");  }	  return    -1L;    long    return    -1L;    	non-compiled	[CE]  not  a  statement	227	None	replace
21	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  =  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  =  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    long    return    -1L;    	non-compiled	[CE]  illegal  start  of  expression	227	None	replace
22	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }	  return    -1L;    long    return    -1L;    	non-compiled	[CE]  not  a  statement	227	None	replace
23	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1);  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1L;  long  return  -1L;  }  else  {  safeMultiply(val1);  }	  return    -1L;    long    return    -1L;    	non-compiled	[CE]  not  a  statement	227	None	replace
24	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2)/  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  safeMultiply(val1,  val2)/  1;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val1,  val2)/  1;	  int    val2    =    safeMultiply(val1,    val2)+    1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	307	None	replace
25	[BUG]  [BUGGY]  long  val2  =  safeMultiply(val1,  val2)+  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  safeMultiply(val1,  val2)+  1;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  safeMultiply(val1,  val2)+  1;	  int    val2    =    safeMultiply(val1,    val2)+    1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	307	None	replace
26	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val2,  val1)+  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  safeMultiply(val2,  val1)+  1;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val2,  val1)+  1;	  int    val2    =    safeMultiply(val1,    val2)+    1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	307	None	replace
27	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2)+  1L;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  safeMultiply(val1,  val2)+  1L;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val1,  val2)+  1L;	  int    val2    =    safeMultiply(val1,    val2)+    1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	307	None	replace
28	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2)+  2;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  safeMultiply(val1,  val2)+  2;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val1,  val2)+  2;	  int    val2    =    safeMultiply(val1,    val2)+    1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	307	None	replace
29	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2,  val1)+  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  safeMultiply(val1,  val2,  val1)+  1;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val1,  val2,  val1)+  1;	  int    val2    =    safeMultiply(val1,    val2)+    1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	307	None	replace
30	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2)%  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  safeMultiply(val1,  val2)%  1;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val1,  val2)%  1;	  int    val2    =    safeMultiply(val1,    val2)+    1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	307	None	replace
31	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	164	None	replace
32	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	164	None	replace
33	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	164	None	replace
34	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	164	None	replace
35	[BUG]  [BUGGY]  if(val1  <  val2)  {  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	164	None	replace
36	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	164	None	replace
37	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	164	None	replace
38	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	164	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	648	1	add
40	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	648	1	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val2  >  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	648	1	add
42	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val2  >  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val2  >  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	648	1	add
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	648	1	add
44	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	648	1	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	648	1	add
46	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	648	1	add
47	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1.  >  val2)  {  return  -1;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1.  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1.  >  val2)  {  return  -1;  }	  	non-compiled	[CE]  <identifier>  expected	648	None	add
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	648	1	add
49	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	648	1	add
50	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val0  >  val2)  {  return  -1;  }  [CE]  cannot  find  symbol  val0  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val0  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val0  >  val2)  {  return  -1;  }	  	non-compiled	[CE]  cannot  find  symbol  val0	648	None	add
51	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1)  {  return  -1;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1)  {  return  -1;  }	  	non-compiled	[CE]  incompatible  types	648	None	add
52	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  while(val1  >  val2)  {  return  -1;	  	non-compiled	[CE]  orphaned  case	648	None	add
53	[BUG]  [BUGGY]  safeMultiply(val1,  val2).clear();  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1,  val2).clear();  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2).clear();	  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    >=    val2)    {    return    -val2.;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	373	None	replace
54	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  false);  [CE]  no  suitable  method  found  for  safeMultiply(long,int,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1,  val2,  false);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2,  false);	  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    >=    val2)    {    return    -val2.;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long,int,boolean)	373	None	replace
55	[BUG]  [BUGGY]  safeMultiply(val1,  val2).return0;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1,  val2).return0;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2).return0;	  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    >=    val2)    {    return    -val2.;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	373	None	replace
56	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	259	None	replace
57	[BUG]  [BUGGY]  long  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	259	None	replace
58	[BUG]  [BUGGY]  long  val1  =  -1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  -1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  -1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	259	None	replace
59	[BUG]  [BUGGY]  short  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  short  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	short  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	259	None	replace
60	[BUG]  [BUGGY]  long  val1  =  val1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  val1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  val1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	259	None	replace
61	[BUG]  [BUGGY]  if(val1  <  val2)  {  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	259	None	replace
62	[BUG]  [BUGGY]  long  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	259	None	replace
63	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  not  a  statement	558	None	replace
64	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  ';'  expected	558	None	replace
65	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  return  -val2;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  return  -val2;  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  not  a  statement	558	None	replace
66	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >=  val2)  {  return  -val2;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  +  1)  {  if(val1  >=  val2)  {  return  -val2;  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  not  a  statement	558	None	replace
67	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  not  a  statement	558	None	replace
68	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  not  a  statement	558	None	replace
69	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  >  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  ';'  expected	558	None	replace
70	[BUG]  [BUGGY]  long  val2  =  val2.longValue()  +  val1.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val2.longValue()  +  val1.longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val2.longValue()  +  val1.longValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	291	None	replace
71	[BUG]  [BUGGY]  int  val2  =  val1.longValue()  +  val2.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  val1.longValue()  +  val2.longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  val1.longValue()  +  val2.longValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	291	None	replace
72	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  +  val2.doubleValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.doubleValue()  +  val2.doubleValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.doubleValue()  +  val2.doubleValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	291	None	replace
73	[BUG]  [BUGGY]  long  val2  =  val1,  val2.longValue()  +  val1.longValue();  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1,  val2.longValue()  +  val1.longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1,  val2.longValue()  +  val1.longValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  ';'  expected	291	None	replace
74	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  +  val2.longValue().longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.longValue()  +  val2.longValue().longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.longValue()  +  val2.longValue().longValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	291	None	replace
75	[BUG]  [BUGGY]  long  val2  =  val1  +  val2.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1  +  val2.longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1  +  val2.longValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	291	None	replace
76	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  *  val2.doubleValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.doubleValue()  *  val2.doubleValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.doubleValue()  *  val2.doubleValue();	  long    val2    =    val1.longValue()    +    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	291	None	replace
77	[BUG]  [BUGGY]  while(val2  <  val1)  {  val1  =  val2;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  <  val1)  {  val1  =  val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2  <  val1)  {  val1  =  val2;	  if(val2    <    val1)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  orphaned  case	725	None	replace
78	[BUG]  [BUGGY]  safeMultiply(val1);  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1);	  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    [Delete]    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	44	None	replace
79	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >  val1)  {  return  -1;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >  val1)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1,    val2)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	757	None	replace
80	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >=  val1)  {  return  -1;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >=  val1)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >=  val1)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1,    val2)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	757	None	replace
81	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  ==  val1)  {  return  -1;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  ==  val1)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1,    val2)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	757	None	replace
82	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  <  val1)  {  return  -1;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  <  val1)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  <  val1)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1,    val2)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	757	None	replace
83	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1,    val2)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  >  expected	757	None	replace
84	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >  val1)  {  return  -1L;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >  val1)  {  return  -1L;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2  >  val1)  {  return  -1L;  }	  for(int    val1    =    0;    val2    <    val1,    val2)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	757	None	replace
85	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1,    val2)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  >  expected	757	None	replace
86	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2!=  val1)  {  return  -1;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2!=  val1)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val2!=  val1)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1,    val2)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	757	None	replace
87	[BUG]  [BUGGY]  if(val1  <  val2)  {  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1,    val2)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	757	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	726	1	add
89	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	726	1	add
90	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1.;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1.;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val1.;  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  <identifier>  expected	726	None	add
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	726	1	add
92	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	726	1	add
93	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  ArithmeticException  	726	1	add
94	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val1,  val1);  }  [FE]  ArithmeticException  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  ArithmeticException  	726	1	add
95	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	726	1	add
96	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	726	1	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	726	1	add
98	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	726	1	add
99	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val1,  val2);  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  ';'  expected	726	None	add
100	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  ArithmeticException  	726	1	add
101	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [FE]  ArithmeticException  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  ArithmeticException  	726	1	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	726	1	add
103	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -val1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	726	1	add
104	[BUG]  [BUGGY]  safeMultiply(val1.longValue(),  val2.longValue());  [CE]  long  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1.longValue(),  val2.longValue());  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1.longValue(),  val2.longValue());	  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	138	None	replace
105	[BUG]  [BUGGY]  safeMultiply(val1,  val2).return0L;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1,  val2).return0L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2).return0L;	  if(val1    >=    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	661	None	replace
106	[BUG]  [BUGGY]  long  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	122	None	replace
107	[BUG]  [BUGGY]  long  val1  =  1L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	122	None	replace
108	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	122	None	replace
109	[BUG]  [BUGGY]  for(int  val1  =  2;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  2;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  2;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	122	None	replace
110	[BUG]  [BUGGY]  int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	122	None	replace
111	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val2.length;  val2++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	122	None	replace
112	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  return(val1  >=  val2)?  -1  :  -1;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  return(val1  >=  val2)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -1;    return(val1  >=  val2)?  -1  :  -1;	  	non-compiled	[CE]  unreachable  statement	433	None	add
113	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  long  val1  =  val2)?  -1  :  -1;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  long  val1  =  val2)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -1;    long  val1  =  val2)?  -1  :  -1;	  	non-compiled	[CE]  ';'  expected	433	None	add
114	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  if(val1  >=  val2)?  -1  :  -1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  if(val1  >=  val2)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -1;    if(val1  >=  val2)?  -1  :  -1;	  	non-compiled	[CE]  illegal  start  of  expression	433	None	add
115	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  return(val1  >>  val2)?  -1  :  -1;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  return(val1  >>  val2)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -1;    return(val1  >>  val2)?  -1  :  -1;	  	non-compiled	[CE]  incompatible  types	433	None	add
116	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =(val1  >=  val2)?  -1  :  -1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =(val1  >=  val2)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -1;    int  val2  =(val1  >=  val2)?  -1  :  -1;	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	433	None	add
117	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  (val1  >=  val2)?  -1  :  -1;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  (val1  >=  val2)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -1;    (val1  >=  val2)?  -1  :  -1;	  	non-compiled	[CE]  not  a  statement	433	None	add
118	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =  val1  <  val2)?  -1  :  -1;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =  val1  <  val2)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -1;    int  val2  =  val1  <  val2)?  -1  :  -1;	  	non-compiled	[CE]  ';'  expected	433	None	add
119	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  ||(val1  >=  val2)?  -1  :  -1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  ||(val1  >=  val2)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -1;    ||(val1  >=  val2)?  -1  :  -1;	  	non-compiled	[CE]  illegal  start  of  expression	433	None	add
120	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =  val1  >=  val2)?  -1  :  -1;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =  val1  >=  val2)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1    :    -1;    int  val2  =  val1  >=  val2)?  -1  :  -1;	  	non-compiled	[CE]  ';'  expected	433	None	add
121	[BUG]  [BUGGY]  safeMultiply(val1,  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1,  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1    >    val2))    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	602	None	replace
122	[BUG]  [BUGGY]  safe(val1))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1    >    val2))    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	602	None	replace
123	[BUG]  [BUGGY]  safe(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1    >    val2))    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	602	None	replace
124	[BUG]  [BUGGY]  safe(val1  >  val2))  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  >  val2))  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  >  val2))  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1    >    val2))    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	602	None	replace
125	[BUG]  [BUGGY]  safe(val1,  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1,  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1,  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1    >    val2))    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	602	None	replace
126	[BUG]  [BUGGY]  safe(val1  <  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  <  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  <  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1    >    val2))    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	602	None	replace
127	[BUG]  [BUGGY]  safeMultiply(val1,  val2))  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1,  val2))  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2))  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1    >    val2))    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	602	None	replace
128	[BUG]  [BUGGY]  safe(val1  <  =  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  <  =  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  <  =  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1    >    val2))    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  illegal  start  of  expression	602	None	replace
129	[BUG]  [BUGGY]  safe(val1  +  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  +  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  +  val2))  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1    >    val2))    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	602	None	replace
130	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	242	None	replace
131	[BUG]  [BUGGY]  long  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	242	None	replace
132	[BUG]  [BUGGY]  long  val1  =  -1;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  -1;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  -1;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	242	None	replace
133	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >>  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >>  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >>  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	242	None	replace
134	[BUG]  [BUGGY]  short  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  short  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	short  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	242	None	replace
135	[BUG]  [BUGGY]  long  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  >=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	242	None	replace
136	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	755	None	replace
137	[BUG]  [BUGGY]  for(int  val1  =  1;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	755	None	replace
138	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	755	None	replace
139	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val2  =  0;  val1  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	755	None	replace
140	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  0;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	755	None	replace
141	[BUG]  [BUGGY]  for(int  val1  =  0L;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val1  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	755	None	replace
142	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  ++val2)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    ++val2)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	755	None	replace
143	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2  <  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2  <  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2  <  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	694	None	replace
144	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2  >  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2  >  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2  >  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	694	None	replace
145	[BUG]  [BUGGY]  long  val1  =  0;  val2!=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2!=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2!=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	694	None	replace
146	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2  <  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2  <  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2  <  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	694	None	replace
147	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2  >  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2  >  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2  >  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	694	None	replace
148	[BUG]  [BUGGY]  int  val1  =  0;  val2  >=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  0;  val2  >=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  >=  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	694	None	replace
149	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2  <  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2  <  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2  <  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	694	None	replace
150	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
151	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
152	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
153	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
154	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
155	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
156	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
157	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
158	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
159	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
160	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
161	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -val2;  }  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
162	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	333	None	add
163	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
164	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
165	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
166	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	333	1	add
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
168	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
169	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }	  	non-compiled	[CE]  incompatible  types	272	None	add
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
171	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
172	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >>  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >>  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >>  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	non-compiled	[CE]  incompatible  types	272	None	add
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
174	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
176	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
178	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  ==  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  ==  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
180	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  ==  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  ==  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  ==  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
181	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }	  	non-compiled	[CE]  incompatible  types	272	None	add
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
183	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	272	1	add
184	[BUG]  [BUGGY]  parent.safeMultiply(val1,  val2);  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  parent.safeMultiply(val1,  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	parent.safeMultiply(val1,  val2);	  if(val1    >=    val2)    {    return    -1;    }    if(val1    [PATCH]    val2)    {    return    -1;    }    	non-compiled	[CE]  cannot  find  symbol  parent	466	None	replace
185	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "Multiplication    overflows    a    long:     "    +    val1    +     "    *     "    +    val2);    }    if(val1!=  val2)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long: "  +  val1  +  [CE]  illegal  start  of  expression  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "Multiplication    overflows    a    long:     "    +    val1    +     "    *     "    +    val2);    }    if(val1!=  val2)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long: "  +  val1  +  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "Multiplication        overflows        a        long:       "        +        val1        +       "        *       "        +        val2);        }        if(val1!=    val2)    {    throw    new    ArithmeticException(       "Multiplication    overflows    a    long:       "    +    val1    +       "    *       "    +    val2);    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long: "  +  val1  +	  	non-compiled	[CE]  illegal  start  of  expression	471	None	add
186	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "Multiplication    overflows    a    long:     "    +    val1    +     "    *     "    +    val2);    }    if(val1!=  val2)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "Multiplication        overflows        a        long:       "        +        val1        +       "        *       "        +        val2);        }        if(val1!=    val2)    {    throw    new    ArithmeticException(       "Multiplication    overflows    a    long:       "    +    val1    +       "    *       "    +    val2);    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }	  	compilable	  [FE]  ArithmeticException  	471	1	add
187	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "Multiplication    overflows    a    long:     "    +    val1    +     "    *     "    +    val2);    }    if(val1!=  val2)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  [FE]  ArithmeticException  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "Multiplication    overflows    a    long:     "    +    val1    +     "    *     "    +    val2);    }    if(val1!=  val2)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "Multiplication        overflows        a        long:       "        +        val1        +       "        *       "        +        val2);        }        if(val1!=    val2)    {    throw    new    ArithmeticException(       "Multiplication    overflows    a    long:       "    +    val1    +       "    *       "    +    val2);    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }	  	compilable	  [FE]  ArithmeticException  	471	1	add
188	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "Multiplication    overflows    a    long:     "    +    val1    +     "    *     "    +    val2);    }    if(val1!=  val2)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long: "  +  val1  +   "  *   "  +  val2);  }  if(val1!=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long: "  +  val1  +  [CE]  illegal  start  of  expression  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "Multiplication    overflows    a    long:     "    +    val1    +     "    *     "    +    val2);    }    if(val1!=  val2)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:     "  +  val1  +     "  *     "  +  val2);  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long: "  +  val1  +   "  *   "  +  val2);  }  if(val1!=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long: "  +  val1  +  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "Multiplication        overflows        a        long:       "        +        val1        +       "        *       "        +        val2);        }        if(val1!=    val2)    {    throw    new    ArithmeticException(       "Multiplication    overflows    a    long:       "    +    val1    +       "    *       "    +    val2);    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long: "  +  val1  +   "  *   "  +  val2);  }  if(val1!=  val2)  {  throw  new  ArithmeticException(   "Multiplication  overflows  a  long: "  +  val1  +	  	non-compiled	[CE]  illegal  start  of  expression	471	None	add
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
190	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
192	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
194	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
196	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
198	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
199	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1	  	non-compiled	[CE]  ';'  expected	17	None	add
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
201	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
203	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
205	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
207	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        if(val1    ==    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }  if(val2  ==  val1)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
208	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    >=    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	545	None	replace
209	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    >=    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	545	None	replace
210	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    >=    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	545	None	replace
211	[BUG]  [BUGGY]  long  val1  =  1L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  >  expected	187	None	replace
212	[BUG]  [BUGGY]  long  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  >  expected	187	None	replace
213	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	187	None	replace
214	[BUG]  [BUGGY]  while(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  'else'  without  'if'  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  while(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  'else'  without  'if'	353	None	replace
215	[BUG]  [BUGGY]  while(val1  <  =  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  =  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  =  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  while(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  illegal  start  of  expression	353	None	replace
216	[BUG]  [BUGGY]  while(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  'else'  without  'if'  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  while(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  'else'  without  'if'	353	None	replace
217	[BUG]  [BUGGY]  while(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  'else'  without  'if'  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  while(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  'else'  without  'if'	353	None	replace
218	[BUG]  [BUGGY]  while(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  'else'  without  'if'  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  while(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  'else'  without  'if'	353	None	replace
219	[BUG]  [BUGGY]  while(val1  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  'else'  without  'if'  [FE]                      StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  while(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  'else'  without  'if'	353	None	replace
220	[BUG]  [BUGGY]  while(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  'else'  without  'if'  [FE]                        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  while(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  'else'  without  'if'	353	None	replace
221	[BUG]  [BUGGY]  while(val1  <  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  'else'  without  'if'  [FE]                          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  while(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  'else'  without  'if'	353	None	replace
222	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  0L;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  0L;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  0L;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    val2.length)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	180	None	replace
223	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    val2.length)    {    return    -1;    }    	non-compiled	[CE]  >  expected	180	None	replace
224	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    val2.length)    {    return    -1;    }    	non-compiled	[CE]  >  expected	180	None	replace
225	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    val2.length)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	180	None	replace
226	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  val2.length)  {  return  -1;  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  val2.length)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  val2.length)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    val2.length)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	180	None	replace
227	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  val2.length)  {  return  -1;  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  val2.length)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  val2.length)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    val2.length)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	180	None	replace
228	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  val2.length)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    val2.length)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	180	None	replace
229	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  val2.length)  {  return  0L;  }  [CE]  orphaned  case  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  val2.length)  {  return  0L;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  val2.length)  {  return  0L;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >=    val2.length)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	180	None	replace
230	[BUG]  [BUGGY]  parent  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  parent  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	parent  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	215	None	replace
231	[BUG]  [BUGGY]  parent  ==  val1  ||  val2  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  not  a  statement  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  parent  ==  val1  ||  val2  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	parent  ==  val1  ||  val2  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	215	None	replace
232	[BUG]  [BUGGY]  parent  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  parent  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	parent  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	215	None	replace
233	[BUG]  [BUGGY]  parent  ==  val1  ||  val2  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  not  a  statement  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  parent  ==  val1  ||  val2  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	parent  ==  val1  ||  val2  ==  val1  ||  val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	215	None	replace
234	[BUG]  [BUGGY]  safeMultiply(val1.doubleValue(),  val2.doubleValue())  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1.doubleValue(),  val2.doubleValue())  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1.doubleValue(),  val2.doubleValue())  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	215	None	replace
235	[BUG]  [BUGGY]  safeMultiply(val1.doubleValue(),  val2.doubleValue())  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1.doubleValue(),  val2.doubleValue())  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1.doubleValue(),  val2.doubleValue())  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	215	None	replace
236	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  +  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.doubleValue()  +  1;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.doubleValue()  +  1;	  long    val2    =    val1.doubleValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	287	None	replace
237	[BUG]  [BUGGY]  int  val2  =  val1.doubleValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  val1.doubleValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  val1.doubleValue();	  long    val2    =    val1.doubleValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	287	None	replace
238	[BUG]  [BUGGY]  long  val2  =  val2.doubleValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val2.doubleValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val2.doubleValue();	  long    val2    =    val1.doubleValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	287	None	replace
239	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  /  val2.doubleValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.doubleValue()  /  val2.doubleValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.doubleValue()  /  val2.doubleValue();	  long    val2    =    val1.doubleValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	287	None	replace
240	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  -  val2.doubleValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.doubleValue()  -  val2.doubleValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.doubleValue()  -  val2.doubleValue();	  long    val2    =    val1.doubleValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	287	None	replace
241	[BUG]  [BUGGY]  long  val2  =  val1.doubleValue()  +  2;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.doubleValue()  +  2;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.doubleValue()  +  2;	  long    val2    =    val1.doubleValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	287	None	replace
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	539	1	add
243	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	539	1	add
244	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  0,  val1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  0,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  0,  val1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	539	None	add
245	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  0,  val1.length);  }  [CE]  long  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  0,  val1.length);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  0,  val1.length);  }	  	non-compiled	[CE]  long  cannot  be  dereferenced	539	None	add
246	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  1,  val2,  0,  val1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  1,  val2,  0,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  1,  val2,  0,  val1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	539	None	add
247	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  case  0:  return  0L;  [CE]  duplicate  case  label  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  case  0:  return  0L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  case  0:  return  0L;	  	non-compiled	[CE]  duplicate  case  label	539	None	add
248	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  0,  val1);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  0,  val1);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  0,  val1);	  	non-compiled	[CE]  orphaned  case	539	None	add
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  while(val1  <  val2)  {  return  0L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  while(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	539	1	add
250	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  while(val1  <  val2)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  }  while(val1  <  val2)  {  return  0L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  }  while(val1  <  val2)  {  return  0L;  }	  	compilable	  [FE]  AssertionFailedError  	539	1	add
251	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  1,  val1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  0L;  }  if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    0L;    }    if(val1  <  val2)  {  return  0L;  System.arraycopy(val1,  0,  val2,  1,  val1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	539	None	add
252	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val1++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val1++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val1++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	508	None	replace
253	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	508	None	replace
254	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	508	None	replace
255	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	508	None	replace
256	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val1++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val1++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val1++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	508	None	replace
257	[BUG]  [BUGGY]  for(int  val1  =  0L;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	508	None	replace
258	[BUG]  [BUGGY]  for(int  val1  =  1;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val1  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	508	None	replace
259	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	508	None	replace
260	[BUG]  [BUGGY]  place(val1,  val2);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  place(val1,  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	place(val1,  val2);	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
261	[BUG]  [BUGGY]  safeMultiply(val1,  val2).setValue(val2);  [CE]  long  cannot  be  dereferenced  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1,  val2).setValue(val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2).setValue(val2);	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	141	None	replace
262	[BUG]  [BUGGY]  case  0L:  return  0L;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  case  0L:  return  0L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	case  0L:  return  0L;	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    case    0L:    return    0L;    	non-compiled	[CE]  possible  loss  of  precision	646	None	replace
263	[BUG]  [BUGGY]  if(val1  <  val2)  {  if(val2  >  val1)  {  return  -1;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  if(val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    case    0L:    return    0L;    	non-compiled	[CE]  orphaned  case	646	None	replace
264	[BUG]  [BUGGY]  if(val1  >=  val2)  {  if(val2  >  val1)  {  return  -1;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  if(val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    case    0L:    return    0L;    	non-compiled	[CE]  orphaned  case	646	None	replace
265	[BUG]  [BUGGY]  if(val1  >=  val2)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  if(val1  >  val2)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    case    0L:    return    0L;    	non-compiled	[CE]  orphaned  case	646	None	replace
266	[BUG]  [BUGGY]  if(val1  ==  val2)  {  if(val2  >  val1)  {  return  -1;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  if(val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    case    0L:    return    0L;    	non-compiled	[CE]  orphaned  case	646	None	replace
267	[BUG]  [BUGGY]  System.arraycopy(val1,  0,  val1,  0,  val2);  case  0L:  return  0L;  [CE]  possible  loss  of  precision  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  System.arraycopy(val1,  0,  val1,  0,  val2);  case  0L:  return  0L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	System.arraycopy(val1,  0,  val1,  0,  val2);  case  0L:  return  0L;	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    case    0L:    return    0L;    	non-compiled	[CE]  possible  loss  of  precision	646	None	replace
268	[BUG]  [BUGGY]  if(val1  ==  val2)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  if(val1  >  val2)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    case    0L:    return    0L;    	non-compiled	[CE]  orphaned  case	646	None	replace
269	[BUG]  [BUGGY]  case  0:  return  0L;  [CE]  duplicate  case  label  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  case  0:  return  0L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	case  0:  return  0L;	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    case    0L:    return    0L;    	non-compiled	[CE]  duplicate  case  label	646	None	replace
270	[BUG]  [BUGGY]  if(val1  <  val2)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  if(val1  >  val2)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    case    0L:    return    0L;    	non-compiled	[CE]  orphaned  case	646	None	replace
271	[BUG]  [BUGGY]  int  val1  =(val1  >=  val2)?  -1  :  -val2;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =(val1  >=  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =(val1  >=  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val2;    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	538	None	replace
272	[BUG]  [BUGGY]  int  val1  =(val1  >>  val2)?  -1  :  -val2;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =(val1  >>  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =(val1  >>  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val2;    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	538	None	replace
273	[BUG]  [BUGGY]  int  val1  =(val1  <  val2)?  -1  :  -val2;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =(val1  <  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =(val1  <  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val2;    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	538	None	replace
274	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -val2;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val2;    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	538	None	replace
275	[BUG]  [BUGGY]  long  val2  =(val1  >=  val2)?  -1  :  -val2;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =(val1  >=  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =(val1  >=  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val2;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	538	None	replace
276	[BUG]  [BUGGY]  int  val1  =(val1  ==  val2)?  -1  :  -val2;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =(val1  ==  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =(val1  ==  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val2;    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	538	None	replace
277	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -1;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -1;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val2;    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	538	None	replace
278	[BUG]  [BUGGY]  return(val1  >>  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -val2;  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >>  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >>  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val2;    	non-compiled	[CE]  incompatible  types	538	None	replace
279	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >>  val2)?  -1  :  -val2;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >>  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >>  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val2;    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	538	None	replace
280	[BUG]  [BUGGY]  long  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	610	None	replace
281	[BUG]  [BUGGY]  for(int  val1  =  1;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2!=  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	610	None	replace
282	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1,  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1,  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1,  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1;    val2++)    {    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	610	None	replace
283	[BUG]  [BUGGY]  if(val2  >=  val1)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  >=  val1)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  >=  val1)  {  if(val1  >=  val2)  {  return  -1;  }	  if(val1    >=    val2)    {    return    -val1;    }    if(val1    >=    val2)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	264	None	replace
284	[BUG]  [BUGGY]  if(val2  >=  val1)  {  if(val1  >=  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  >=  val1)  {  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  >=  val1)  {  if(val1  >=  val2)  {  return  -val2;  }	  if(val1    >=    val2)    {    return    -val1;    }    if(val1    >=    val2)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	264	None	replace
285	[BUG]  [BUGGY]  if(val2  >=  val1)  {  if(val1  >=  val2)  {  return  -val1;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  >=  val1)  {  if(val1  >=  val2)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  >=  val1)  {  if(val1  >=  val2)  {  return  -val1;  }	  if(val1    >=    val2)    {    return    -val1;    }    if(val1    >=    val2)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	264	None	replace
286	[BUG]  [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  return(val1  ==  val2)?  -1L  :  -1L;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  return(val1  ==  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    ==    val2)?    -1L    :    -1L;    return(val1  ==  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  unreachable  statement	738	None	add
287	[BUG]  [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  long  val1  =  val2)?  -1L  :  -1L;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  long  val1  =  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    ==    val2)?    -1L    :    -1L;    long  val1  =  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  ';'  expected	738	None	add
288	[BUG]  [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  if(val1  ==  val2)?  -1L  :  -1L;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  if(val1  ==  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    ==    val2)?    -1L    :    -1L;    if(val1  ==  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  illegal  start  of  expression	738	None	add
289	[BUG]  [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  (val1  ==  val2)?  -1L  :  -1L;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  (val1  ==  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    ==    val2)?    -1L    :    -1L;    (val1  ==  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  not  a  statement	738	None	add
290	[BUG]  [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  int  val2  =(val1  ==  val2)?  -1L  :  -1L;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  int  val2  =(val1  ==  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    ==    val2)?    -1L    :    -1L;    int  val2  =(val1  ==  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	738	None	add
291	[BUG]  [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  int  val2  =  val1  ==  val2)?  -1L  :  -1L;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  int  val2  =  val1  ==  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    ==    val2)?    -1L    :    -1L;    int  val2  =  val1  ==  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  ';'  expected	738	None	add
292	[BUG]  [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  ||(val1  ==  val2)?  -1L  :  -1L;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  ||(val1  ==  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    ==    val2)?    -1L    :    -1L;    ||(val1  ==  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  illegal  start  of  expression	738	None	add
293	[BUG]  [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  long  val2  =  val1  ==  val2)?  -1L  :  -1L;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  long  val2  =  val1  ==  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    ==    val2)?    -1L    :    -1L;    long  val2  =  val1  ==  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  ';'  expected	738	None	add
294	[BUG]  [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  int  val2  =  val1  >>  val2)?  -1L  :  -1L;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  ==  val2)?  -1L  :  -1L;  int  val2  =  val1  >>  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    ==    val2)?    -1L    :    -1L;    int  val2  =  val1  >>  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  ';'  expected	738	None	add
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  return  -1;  }	  return    -1;    return    -1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
296	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  return  -1;  }	  return    -1;    return    -1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  return  -1;  }	  return    -1;    return    -1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
298	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  return  -1;  }	  return    -1;    return    -1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
299	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	544	None	replace
300	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	544	None	replace
301	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  >  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  >  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  >  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	544	None	replace
302	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	544	None	replace
303	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  >  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  >  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  >  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	544	None	replace
304	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1;  val2  +  1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	544	None	replace
305	[BUG]  [BUGGY]  long  val2  =  val2.longValue()  *  val1.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val2.longValue()  *  val1.longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val2.longValue()  *  val1.longValue();	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	289	None	replace
306	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  *  val2.longValue()  +  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.longValue()  *  val2.longValue()  +  1;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.longValue()  *  val2.longValue()  +  1;	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	289	None	replace
307	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  /  val2.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.longValue()  /  val2.longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.longValue()  /  val2.longValue();	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	289	None	replace
308	[BUG]  [BUGGY]  int  val2  =  val1.longValue()  *  val2.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  val1.longValue()  *  val2.longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  val1.longValue()  *  val2.longValue();	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	289	None	replace
309	[BUG]  [BUGGY]  long  val2  =  val1,  val2.longValue()  *  val1.longValue();  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1,  val2.longValue()  *  val1.longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1,  val2.longValue()  *  val1.longValue();	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  ';'  expected	289	None	replace
310	[BUG]  [BUGGY]  long  val2  =  val1.longValue()  *  val2.longValue().longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.longValue()  *  val2.longValue().longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.longValue()  *  val2.longValue().longValue();	  long    val2    =    val1.longValue()    *    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	289	None	replace
311	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val1)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	158	None	replace
312	[BUG]  [BUGGY]  long  val1  =  -1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  -1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  -1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	158	None	replace
313	[BUG]  [BUGGY]  long  val1  =  1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	158	None	replace
314	[BUG]  [BUGGY]  short  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  short  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	short  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	158	None	replace
315	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	158	None	replace
316	[BUG]  [BUGGY]  long  val1  =  val1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  val1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  val1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	158	None	replace
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	551	1	replace
318	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	551	1	replace
319	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  StackOverflowError  	551	1	replace
320	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  return    -1L;    if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  StackOverflowError  	551	1	replace
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  return    -1L;    if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	551	1	replace
322	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  return    -1L;    if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	551	1	replace
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  return    -1L;    if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	551	1	replace
324	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  return    -1L;    if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	551	1	replace
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  return    -1L;    if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	551	1	replace
326	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  return    -1L;    if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    	compilable	  [FE]  AssertionFailedError  	551	1	replace
327	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	609	None	replace
328	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	609	None	replace
329	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	609	None	replace
330	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1;  val2++)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	609	None	replace
331	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	609	None	replace
332	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	609	None	replace
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	379	1	add
334	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	379	1	add
335	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >>  val2)  {  return  -val2;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >>  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    if(val1  >>  val2)  {  return  -val2;  }	  	non-compiled	[CE]  incompatible  types	379	None	add
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	379	1	add
337	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1!=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	379	1	add
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  ==  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    if(val1  ==  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	379	1	add
339	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  ==  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  ==  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    if(val1  ==  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	379	1	add
340	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  [Delete]  val2)  {  return  -val2;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  [Delete]  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    if(val1  [Delete]  val2)  {  return  -val2;  }	  	non-compiled	[CE]  ')'  expected	379	None	add
341	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  [BUGGY]  val2)  {  return  -val2;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  [BUGGY]  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    if(val1  [BUGGY]  val2)  {  return  -val2;  }	  	non-compiled	[CE]  ')'  expected	379	None	add
342	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  [PATCH]  val2)  {  return  -val2;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  [PATCH]  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    if(val1  [PATCH]  val2)  {  return  -val2;  }	  	non-compiled	[CE]  ')'  expected	379	None	add
343	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  [BUG]  val2)  {  return  -val2;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  if(val1  [BUG]  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    if(val1  [BUG]  val2)  {  return  -val2;  }	  	non-compiled	[CE]  ')'  expected	379	None	add
344	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	507	None	replace
345	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	507	None	replace
346	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val2.length;  val1++)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	507	None	replace
347	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val1++)    {    if(val1    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	507	None	replace
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  ==  val1)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val2  ==  val1)  {  return  0;  }	  if(val1    ==    val2)    {    return    0;    }    	compilable	  [FE]  AssertionFailedError  	89	1	replace
349	[BUG]  [BUGGY]  if(val2  ==  val1)  {  return  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  ==  val1)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  ==  val1)  {  return  0;  }	  if(val1    ==    val2)    {    return    0;    }    	compilable	  [FE]  AssertionFailedError  	89	1	replace
350	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  =  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  =  val2)  {  return  0;  }	  if(val1    ==    val2)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1!=  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1!=  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	390	1	replace
352	[BUG]  [BUGGY]  return(val1!=  val2)?  -1  :  -val2;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1!=  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1!=  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    return(val1    >=    val2)?    -1    :    -val1;    	compilable	  [FE]  AssertionFailedError  	390	1	replace
353	[BUG]  [BUGGY]  return(val1  <  =  val2)?  -1  :  -val2;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  =  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  =  val2)?  -1  :  -val2;	  return(val1    <    val2)?    -1    :    -val2;    	non-compiled	[CE]  illegal  start  of  expression	438	None	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val2  <  val1)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val2  <  val1)?  -1  :  -val1;	  return(val1    <    val2)?    -1    :    -val2;    	compilable	  [FE]  AssertionFailedError  	438	1	replace
355	[BUG]  [BUGGY]  return(val2  <  val1)?  -1  :  -val1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val2  <  val1)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val2  <  val1)?  -1  :  -val1;	  return(val1    <    val2)?    -1    :    -val2;    	compilable	  [FE]  AssertionFailedError  	438	1	replace
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  val2)?  0  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  <  val2)?  0  :  -val2;	  return(val1    <    val2)?    -1    :    -val2;    	compilable	  [FE]  AssertionFailedError  	438	1	replace
357	[BUG]  [BUGGY]  return(val1  <  val2)?  0  :  -val2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  val2)?  0  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  val2)?  0  :  -val2;	  return(val1    <    val2)?    -1    :    -val2;    	compilable	  [FE]  AssertionFailedError  	438	1	replace
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  val2)?  1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  <  val2)?  1  :  -1;	  return(val1    <    val2)?    -1    :    -val2;    	compilable	  [FE]  AssertionFailedError  	438	1	replace
359	[BUG]  [BUGGY]  return(val1  <  val2)?  1  :  -1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  val2)?  1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  val2)?  1  :  -1;	  return(val1    <    val2)?    -1    :    -val2;    	compilable	  [FE]  AssertionFailedError  	438	1	replace
360	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	198	None	replace
361	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	198	None	replace
362	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	198	None	replace
363	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	198	None	replace
364	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	198	None	replace
365	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val1  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	198	None	replace
366	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  ==  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	198	None	replace
367	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	256	None	replace
368	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	256	None	replace
369	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	256	None	replace
370	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	256	None	replace
371	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	256	None	replace
372	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	256	None	replace
373	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	256	None	replace
374	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	279	None	replace
375	[BUG]  [BUGGY]  for(int  val1  =  1;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	279	None	replace
376	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	279	None	replace
377	[BUG]  [BUGGY]  long  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	279	None	replace
378	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    ++val2)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	279	None	replace
379	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	319	1	add
380	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	319	1	add
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	319	1	add
382	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	319	1	add
383	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    if(val1  >>  val2)  {  return  -1;  }	  	non-compiled	[CE]  incompatible  types	319	None	add
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	319	1	add
385	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	319	1	add
386	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  [Delete]  val2)  {  return  -1;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  [Delete]  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    if(val1  [Delete]  val2)  {  return  -1;  }	  	non-compiled	[CE]  ')'  expected	319	None	add
387	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    if(val1  [BUGGY]  val2)  {  return  -1;  }	  	non-compiled	[CE]  ')'  expected	319	None	add
388	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  [PATCH]  val2)  {  return  -1;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  if(val1  [PATCH]  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1;    }    if(val1  [PATCH]  val2)  {  return  -1;  }	  	non-compiled	[CE]  ')'  expected	319	None	add
389	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	83	1	add
390	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	83	1	add
391	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  incompatible  types	83	None	add
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	83	1	add
393	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	83	1	add
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	83	1	add
395	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	83	1	add
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	83	1	add
397	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	83	1	add
398	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  ')'  expected	83	None	add
399	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	83	1	add
400	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val1);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	83	1	add
401	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  [BUGGY]  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  [BUGGY]  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  ')'  expected	83	None	add
402	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1).;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1).;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1).;  }	  	non-compiled	[CE]  <identifier>  expected	83	None	add
403	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    <    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	586	1	replace
404	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    <    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	586	1	replace
405	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  =  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  =  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    <    return    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	586	None	replace
406	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  else  if(val2  >  val1)  {  return  0L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -1;  }  else  if(val2  >  val1)  {  return  0L;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    <    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	586	1	replace
407	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  else  if(val2  >  val1)  {  return  0L;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  else  if(val2  >  val1)  {  return  0L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -1;  }  else  if(val2  >  val1)  {  return  0L;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    <    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	586	1	replace
408	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val2  <  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -1;  }  if(val2  <  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    <    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	586	1	replace
409	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val2  <  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  if(val2  <  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  }  if(val2  <  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    <    return    -1;    }    	compilable	  [FE]  AssertionFailedError  	586	1	replace
410	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
411	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
412	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }	  	non-compiled	[CE]  incompatible  types	263	None	add
413	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >>  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	non-compiled	[CE]  incompatible  types	263	None	add
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
415	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
416	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
417	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val2;  }  if(val1  >=  val1)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
419	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
420	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
421	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
422	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  ==  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
423	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  ==  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  <  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  <  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
425	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  <  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  <  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  <  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val2  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val2  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
427	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val2  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val2  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1    >=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val2  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	263	1	add
428	[BUG]  [BUGGY]  int  val2  =(val1  >>  val2)?  -1  :  -val2;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =(val1  >>  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =(val1  >>  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    int    val2    =(val1    >>    val2)?    -1    :    -val1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	394	None	replace
429	[BUG]  [BUGGY]  int  val2  =(val1  >=  val2)?  -1  :  -val2;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =(val1  >=  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =(val1  >=  val2)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    int    val2    =(val1    >>    val2)?    -1    :    -val1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	394	None	replace
430	[BUG]  [BUGGY]  int  val2  =(val1  >>  val2)?  -1  :  -val1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =(val1  >>  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =(val1  >>  val2)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    int    val2    =(val1    >>    val2)?    -1    :    -val1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	394	None	replace
431	[BUG]  [BUGGY]  int  val2  =(val1  >=  val2)?  -1  :  -val1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =(val1  >=  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =(val1  >=  val2)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    int    val2    =(val1    >>    val2)?    -1    :    -val1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	394	None	replace
432	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -val1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    int    val2    =(val1    >>    val2)?    -1    :    -val1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	394	None	replace
433	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -val2;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    int    val2    =(val1    >>    val2)?    -1    :    -val1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	394	None	replace
434	[BUG]  [BUGGY]  return(val1  >>  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -val1;  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >>  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >>  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    int    val2    =(val1    >>    val2)?    -1    :    -val1;    	non-compiled	[CE]  incompatible  types	394	None	replace
435	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1;  int  val2  =(val2  ==  val1)?  -1  :  -1;	  return(val1    >=    val2)?    -1    :    -val1;    int    val2    =(val1    >>    val2)?    -1    :    -val1;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	394	None	replace
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	100	1	add
437	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	100	1	add
438	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	100	None	add
439	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1.length);  }  [CE]  long  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1.length);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1.length);  }	  	non-compiled	[CE]  long  cannot  be  dereferenced	100	None	add
440	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2);  }  [CE]  cannot  find  symbol  CategoryUtils  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  cannot  find  symbol  CategoryUtils	100	None	add
441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  }  while(val1  <  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    <    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  }  while(val1  <  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	100	1	add
442	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  }  while(val1  <  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  }  while(val1  <  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  }  while(val1  <  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	100	1	add
443	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  1,  val2,  0,  val1);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  1,  val2,  0,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  1,  val2,  0,  val1);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	100	None	add
444	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2,  val1);  }  [CE]  cannot  find  symbol  CategoryUtils  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  CategoryUtils.safeMultiply(val1,  val2,  val1);  }	  	non-compiled	[CE]  cannot  find  symbol  CategoryUtils	100	None	add
445	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  }  if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    <    val2)    {    return    -1;    }    if(val1  <  val2)  {  return  -1;  System.arraycopy(val1,  0,  val2,  0,  val1);	  	non-compiled	[CE]  orphaned  case	100	None	add
446	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	313	None	replace
447	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	313	None	replace
448	[BUG]  [BUGGY]  int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	313	None	replace
449	[BUG]  [BUGGY]  long  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	313	None	replace
450	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0L;  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0L;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0L;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >    0)    {    return    0L;    }    	non-compiled	[CE]  >  expected	745	None	replace
451	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  0L;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  0L;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >    0)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	745	None	replace
452	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  0)  {  return  0L;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  0)  {  return  0L;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >    0)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	745	None	replace
453	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0L;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  0L;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >    0)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	745	None	replace
454	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  0)  {  return  0L;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  0)  {  return  0L;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  0)  {  return  0L;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >    0)    {    return    0L;    }    	non-compiled	[CE]  orphaned  case	745	None	replace
455	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  ==  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val2  ==  val1)  {  return  -1L;  }	  if(val1    ==    val2)    {    return    -1L;    }    	compilable	  [FE]  AssertionFailedError  	542	1	replace
456	[BUG]  [BUGGY]  if(val2  ==  val1)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  ==  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  ==  val1)  {  return  -1L;  }	  if(val1    ==    val2)    {    return    -1L;    }    	compilable	  [FE]  AssertionFailedError  	542	1	replace
457	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2  + "  * "  +  val1);  [CE]  no  suitable  constructor  found  for  ArithmeticException(String,String)  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2  + "  * "  +  val1);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2  + "  * "  +  val1);	  throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArithmeticException(String,String)	357	None	replace
458	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2  + "  * "  +  val2);  [CE]  no  suitable  constructor  found  for  ArithmeticException(String,String)  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2  + "  * "  +  val2);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2  + "  * "  +  val2);	  throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArithmeticException(String,String)	357	None	replace
459	[BUG]  [BUGGY]  Throwables.throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [CE]  <identifier>  expected  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  Throwables.throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	Throwables.throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);	  throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    	non-compiled	[CE]  <identifier>  expected	357	None	replace
460	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  [CE]  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;	  throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    	non-compiled	[CE]  	357	None	replace
461	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + ",  val2: "  +  val2);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + ",  val2: "  +  val2);	  throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    	compilable	  [FE]  ArithmeticException  	357	1	replace
462	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + ",  val2: "  +  val2);  [FE]  ArithmeticException  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + ",  val2: "  +  val2);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + ",  val2: "  +  val2);	  throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    	compilable	  [FE]  ArithmeticException  	357	1	replace
463	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	295	None	replace
464	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    return    -val1;    }    	non-compiled	[CE]  >  expected	295	None	replace
465	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	295	None	replace
466	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    return    -val1;    }    	non-compiled	[CE]  >  expected	295	None	replace
467	[BUG]  [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    0)    {    return    -val1;    }    	non-compiled	[CE]  >  expected	295	None	replace
468	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	451	None	replace
469	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	451	None	replace
470	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	451	None	replace
471	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	451	None	replace
472	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	451	None	replace
473	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  ';'  expected	451	None	replace
474	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  ';'  expected	451	None	replace
475	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2,  val1);  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    safeMultiply(val1,    val2,    val1);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	451	None	replace
476	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	251	None	replace
477	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	251	None	replace
478	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	251	None	replace
479	[BUG]  [BUGGY]  int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	251	None	replace
480	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    >=    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	317	None	replace
481	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  ++val1)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    >=    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	317	None	replace
482	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  >=  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    >=    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	317	None	replace
483	[BUG]  [BUGGY]  long  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	32	None	replace
484	[BUG]  [BUGGY]  long  val1  =  1L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1L;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	32	None	replace
485	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
486	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	32	None	replace
487	[BUG]  [BUGGY]  case  1:  return  0L;  [CE]  duplicate  case  label  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  case  1:  return  0L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	case  1:  return  0L;	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    case    1:    return    0L;    	non-compiled	[CE]  duplicate  case  label	647	None	replace
488	[BUG]  [BUGGY]  System.arraycopy(val1,  0,  val1,  0,  val2);  case  1:  return  0L;  [CE]  duplicate  case  label  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  System.arraycopy(val1,  0,  val1,  0,  val2);  case  1:  return  0L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	System.arraycopy(val1,  0,  val1,  0,  val2);  case  1:  return  0L;	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    case    1:    return    0L;    	non-compiled	[CE]  duplicate  case  label	647	None	replace
489	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
490	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
491	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
492	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
493	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
494	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
495	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
496	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
497	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
498	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
499	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
500	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
501	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
502	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
503	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
504	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
505	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
506	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	216	1	add
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
508	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
509	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val2;  }	  	non-compiled	[CE]  incompatible  types	266	None	add
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
511	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
512	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  >>  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	non-compiled	[CE]  incompatible  types	266	None	add
513	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
514	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
515	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >>  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  >>  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	non-compiled	[CE]  incompatible  types	266	None	add
516	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val2!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val2!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
517	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val2!=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val1;  }  if(val2!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  >=  val2)  {  return  -val1;  }  if(val2!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
518	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
519	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  >=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
520	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
521	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  ==  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
523	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val1;    }    if(val1!=  val2)  {  return  -val1;  }  if(val1  ==  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val1;        }        if(val1!=    val2)    {    return    -val1;    }    if(val1  ==  val2)  {  return  -val1;  }  if(val1!=  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	266	1	add
524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  ==  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    0;    }    if(val1  ==  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
525	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  ==  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  ==  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    0;    }    if(val1  ==  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
526	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  >=  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    0;    }    if(val1  >=  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
527	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  >=  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  >=  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    0;    }    if(val1  >=  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1!=  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    0;    }    if(val1!=  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
529	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1!=  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1!=  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    0;    }    if(val1!=  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
530	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  >>  val2)  {  return  0;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  >>  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    0;    }    if(val1  >>  val2)  {  return  0;  }	  	non-compiled	[CE]  incompatible  types	88	None	add
531	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  [Delete]  val2)  {  return  0;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  [Delete]  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    0;    }    if(val1  [Delete]  val2)  {  return  0;  }	  	non-compiled	[CE]  ')'  expected	88	None	add
532	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  {  val2)  {  return  0;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  {  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    0;    }    if(val1  {  val2)  {  return  0;  }	  	non-compiled	[CE]  ')'  expected	88	None	add
533	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  [BUGGY]  val2)  {  return  0;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val1  [BUGGY]  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    0;    }    if(val1  [BUGGY]  val2)  {  return  0;  }	  	non-compiled	[CE]  ')'  expected	88	None	add
534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val2  ==  val1)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    0;    }    if(val2  ==  val1)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
535	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val2  ==  val1)  {  return  0;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  if(val2  ==  val1)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    0;    }    if(val2  ==  val1)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	88	1	add
536	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  0;  }  If(val1  ==  val2)  {  return  0;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  0;  }  If(val1  ==  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    0;    }    If(val1  ==  val2)  {  return  0;  }	  	non-compiled	[CE]  ';'  expected	88	None	add
537	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
538	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
539	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
540	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
541	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  <  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  <  val2)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
542	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  <  val2)  {  return  -1;  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  <  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  <  val2)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
543	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	143	None	add
544	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
545	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
546	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  if(val1  <  val2)  {  return  -1;  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  if(val1  <  val2)  {  return  -1;  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	143	None	add
547	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
548	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
549	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
550	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	143	1	add
551	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  if(val1  <  val2)  {  return  -val2;  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  if(val1  <  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1);  }  if(val1  <  val2)  {  return  -val2;  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	143	None	add
552	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
553	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
554	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val2  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val2  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
555	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val2  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val2  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val2  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
557	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
558	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1.;  }  if(val1  >  val2)  {  return  -1;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1.;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -val1.;  }  if(val1  >  val2)  {  return  -1;  }	  	non-compiled	[CE]  <identifier>  expected	427	None	add
559	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val2;  }  if(val1  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -val2;  }  if(val1  >  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
560	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val2;  }  if(val1  >  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val2;  }  if(val1  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -val2;  }  if(val1  >  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val2  >  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
562	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val2  >  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val2  >  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
563	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1)  >  val2)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1)  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1)  >  val2)  {  return  -1;  }	  	non-compiled	[CE]  illegal  start  of  expression	427	None	add
564	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
565	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	427	1	add
566	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1);  }  if(val1  >  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -val1);  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -val1);  }  if(val1  >  val2)  {  return  -1;  }	  	non-compiled	[CE]  ';'  expected	427	None	add
567	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	629	None	replace
568	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	629	None	replace
569	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >    0)    {    return    -val1;    }    	non-compiled	[CE]  >  expected	629	None	replace
570	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  >  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    >    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	629	None	replace
571	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1L  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >  val2)?  -1L  :  -val1;	  return(val1    >=    val2)?    -1L    :    -val1;    	compilable	  [FE]  AssertionFailedError  	684	1	replace
572	[BUG]  [BUGGY]  return(val1  >  val2)?  -1L  :  -val1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1L  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >  val2)?  -1L  :  -val1;	  return(val1    >=    val2)?    -1L    :    -val1;    	compilable	  [FE]  AssertionFailedError  	684	1	replace
573	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  val2)?  -1L  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  <  val2)?  -1L  :  -1;	  return(val1    >=    val2)?    -1L    :    -val1;    	compilable	  [FE]  AssertionFailedError  	684	1	replace
574	[BUG]  [BUGGY]  return(val1  <  val2)?  -1L  :  -1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  val2)?  -1L  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  val2)?  -1L  :  -1;	  return(val1    >=    val2)?    -1L    :    -val1;    	compilable	  [FE]  AssertionFailedError  	684	1	replace
575	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val2  >=  val1)?  -1L  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val2  >=  val1)?  -1L  :  -val1;	  return(val1    >=    val2)?    -1L    :    -val1;    	compilable	  [FE]  AssertionFailedError  	684	1	replace
576	[BUG]  [BUGGY]  return(val2  >=  val1)?  -1L  :  -val1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val2  >=  val1)?  -1L  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val2  >=  val1)?  -1L  :  -val1;	  return(val1    >=    val2)?    -1L    :    -val1;    	compilable	  [FE]  AssertionFailedError  	684	1	replace
577	[BUG]  [BUGGY]  return(val1  +  val2)?  -1L  :  -val2;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  +  val2)?  -1L  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  +  val2)?  -1L  :  -val2;	  return(val1    >=    val2)?    -1L    :    -val1;    	non-compiled	[CE]  incompatible  types	684	None	replace
578	[BUG]  [BUGGY]  return(val1  >>  val2)?  -1L  :  -val2;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >>  val2)?  -1L  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >>  val2)?  -1L  :  -val2;	  return(val1    >=    val2)?    -1L    :    -val1;    	non-compiled	[CE]  incompatible  types	684	None	replace
579	[BUG]  [BUGGY]  return(val1  >>  val2)?  -1L  :  -1;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >>  val2)?  -1L  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >>  val2)?  -1L  :  -1;	  return(val1    >=    val2)?    -1L    :    -val1;    	non-compiled	[CE]  incompatible  types	684	None	replace
580	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  long  val1  >  val2)?  -1  :  -val2;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  long  val1  >  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val2;    long  val1  >  val2)?  -1  :  -val2;	  	non-compiled	[CE]  ';'  expected	619	None	add
581	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  if(val1  >  val2)?  -1  :  -val2;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  if(val1  >  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val2;    if(val1  >  val2)?  -1  :  -val2;	  	non-compiled	[CE]  illegal  start  of  expression	619	None	add
582	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  long  val1  =  val2)?  -1  :  -val2;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  long  val1  =  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val2;    long  val1  =  val2)?  -1  :  -val2;	  	non-compiled	[CE]  ';'  expected	619	None	add
583	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  (val1  >  val2)?  -1  :  -val2;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  (val1  >  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val2;    (val1  >  val2)?  -1  :  -val2;	  	non-compiled	[CE]  not  a  statement	619	None	add
584	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  return(val1  >  val2)?  -1  :  -val2;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  return(val1  >  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val2;    return(val1  >  val2)?  -1  :  -val2;	  	non-compiled	[CE]  unreachable  statement	619	None	add
585	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  int  val2  =(val1  >  val2)?  -1  :  -val2;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  int  val2  =(val1  >  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val2;    int  val2  =(val1  >  val2)?  -1  :  -val2;	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	619	None	add
586	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  Long  val1  =  val2)?  -1  :  -val2;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  Long  val1  =  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val2;    Long  val1  =  val2)?  -1  :  -val2;	  	non-compiled	[CE]  ';'  expected	619	None	add
587	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  ||(val1  >  val2)?  -1  :  -val2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  ||(val1  >  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val2;    ||(val1  >  val2)?  -1  :  -val2;	  	non-compiled	[CE]  illegal  start  of  expression	619	None	add
588	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  val1  >  val2)?  -1  :  -val2;  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  val1  >  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val2;    val1  >  val2)?  -1  :  -val2;	  	non-compiled	[CE]  not  a  statement	619	None	add
589	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  int  val2  =(val1  >  val2)?  -val2;  [CE]  :  expected  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val2;  int  val2  =(val1  >  val2)?  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val2;    int  val2  =(val1  >  val2)?  -val2;	  	non-compiled	[CE]  :  expected	619	None	add
590	[BUG]  [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  tryFallThrough(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	672	None	replace
591	[BUG]  [BUGGY]  tryMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  tryMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	tryMultiply(val1,  val2)  {  throw  new  ArithmeticException( " ");  }	  tryFallThrough(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	672	None	replace
592	[BUG]  [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1);  }	  tryFallThrough(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	672	None	replace
593	[BUG]  [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [CE]  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	tryFallThrough(val1,  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1.doubleValue());  }	  tryFallThrough(val1,    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	672	None	replace
594	[BUG]  [BUGGY]  safeMultiply(val1.doubleValue()  +  val2.doubleValue());  [CE]  long  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1.doubleValue()  +  val2.doubleValue());  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1.doubleValue()  +  val2.doubleValue());	  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2    >=    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	51	None	replace
595	[BUG]  [BUGGY]  safeMultiply(val1.doubleValue()  /  val2.doubleValue());  [CE]  long  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1.doubleValue()  /  val2.doubleValue());  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1.doubleValue()  /  val2.doubleValue());	  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2    >=    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	51	None	replace
596	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  val2)?  1L  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  <  val2)?  1L  :  -1;	  return(val1    <    =    val2)?    1L    :    -1;    	compilable	  [FE]  AssertionFailedError  	402	1	replace
597	[BUG]  [BUGGY]  return(val1  <  val2)?  1L  :  -1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  val2)?  1L  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  val2)?  1L  :  -1;	  return(val1    <    =    val2)?    1L    :    -1;    	compilable	  [FE]  AssertionFailedError  	402	1	replace
598	[BUG]  [BUGGY]  return(val1  <  =  val2)?  1L  :  0;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  =  val2)?  1L  :  0;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  =  val2)?  1L  :  0;	  return(val1    <    =    val2)?    1L    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	402	None	replace
599	[BUG]  [BUGGY]  return(val2  <  =  val1)?  1L  :  -1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val2  <  =  val1)?  1L  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val2  <  =  val1)?  1L  :  -1;	  return(val1    <    =    val2)?    1L    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	402	None	replace
600	[BUG]  [BUGGY]  return(val1,  val2)?  1L  :  -1;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1,  val2)?  1L  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1,  val2)?  1L  :  -1;	  return(val1    <    =    val2)?    1L    :    -1;    	non-compiled	[CE]  ')'  expected	402	None	replace
601	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  1L  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >  val2)?  1L  :  -1;	  return(val1    <    =    val2)?    1L    :    -1;    	compilable	  [FE]  AssertionFailedError  	402	1	replace
602	[BUG]  [BUGGY]  return(val1  >  val2)?  1L  :  -1;  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  1L  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >  val2)?  1L  :  -1;	  return(val1    <    =    val2)?    1L    :    -1;    	compilable	  [FE]  AssertionFailedError  	402	1	replace
603	[BUG]  [BUGGY]  return(val1)  <  val2)?  1L  :  -1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1)  <  val2)?  1L  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1)  <  val2)?  1L  :  -1;	  return(val1    <    =    val2)?    1L    :    -1;    	non-compiled	[CE]  ';'  expected	402	None	replace
604	[BUG]  [BUGGY]  return(val1  <  0,  val2)?  1L  :  -1;  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  0,  val2)?  1L  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  0,  val2)?  1L  :  -1;	  return(val1    <    =    val2)?    1L    :    -1;    	non-compiled	[CE]  ')'  expected	402	None	replace
605	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
606	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
607	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
608	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
609	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
610	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
611	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
612	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
613	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
614	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
615	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
616	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
617	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
618	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
619	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	207	None	add
620	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
621	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
622	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
623	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [FE]  StackOverflowError  [FE]                      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	207	1	add
624	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
625	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
626	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
627	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
628	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
629	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
630	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
631	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -val2;  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val1)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
632	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
633	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
634	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
635	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
636	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
637	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val2)  {  return  -1;  }  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
638	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
639	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
640	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
641	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
642	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
643	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -val2;  }  [FE]  StackOverflowError  [FE]                      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	667	1	add
644	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  >  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  >  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  >  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	611	None	replace
645	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	611	None	replace
646	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	611	None	replace
647	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	611	None	replace
648	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	611	None	replace
649	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1;  val2  +  1)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	611	None	replace
650	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  >  val2)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2  >  val2)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2  >  val2)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1;    val2    +    1)    {    if(val1    <    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	611	None	replace
651	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	253	None	replace
652	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	253	None	replace
653	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	253	None	replace
654	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	253	None	replace
655	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  <  val1.length;  ++val1)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val1)    {    if(val2    ==    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	253	None	replace
656	[BUG]  [BUGGY]  try  {  [CE]  orphaned  case  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  try  {  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	try  {	  try    {    [Delete]    catch(RuntimeException    e)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  orphaned  case	358	None	replace
657	[BUG]  [BUGGY]  catch(Throwable  e)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  catch(Throwable  e)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	catch(Throwable  e)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  try    {    [Delete]    catch(RuntimeException    e)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  	358	None	replace
658	[BUG]  [BUGGY]  catch(Throwable  e)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2  + "  * "  +  val1);  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  catch(Throwable  e)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2  + "  * "  +  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	catch(Throwable  e)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2  + "  * "  +  val1);  }	  try    {    [Delete]    catch(RuntimeException    e)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  	358	None	replace
659	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  [CE]  no  suitable  constructor  found  for  ArithmeticException(String,int)  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);	  try    {    [Delete]    catch(RuntimeException    e)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  ArithmeticException(String,int)	358	None	replace
660	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -1;  }	  for(int    val1    =    0;    val2    >=    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	578	None	replace
661	[BUG]  [BUGGY]  long  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	  for(int    val1    =    0;    val2    >=    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  not  a  statement	578	None	replace
662	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  0)  {  return  -1;  }	  for(int    val1    =    0;    val2    >=    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	578	None	replace
663	[BUG]  [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }	  for(int    val1    =    0;    val2    >=    val1.length;    val2++)    {    if(val2    >=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	578	None	replace
664	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	570	None	replace
665	[BUG]  [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	570	None	replace
666	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	570	None	replace
667	[BUG]  [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	boolean  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	570	None	replace
668	[BUG]  [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	570	None	replace
669	[BUG]  [BUGGY]  double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	570	None	replace
670	[BUG]  [BUGGY]  short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	570	None	replace
671	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    return    -1;    }    	non-compiled	[CE]  >  expected	184	None	replace
672	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	184	None	replace
673	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	184	None	replace
674	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2!=  0)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	184	None	replace
675	[BUG]  [BUGGY]  if(val1  >=  val2)  {  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  }  [CE]  ';'  expected  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  }	  vice(val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	416	None	replace
676	[BUG]  [BUGGY]  if(val1  ==  val2)  {  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  }  [CE]  ';'  expected  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  }	  vice(val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	416	None	replace
677	[BUG]  [BUGGY]  vice(val1)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  vice(val1)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	vice(val1)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }	  vice(val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	416	None	replace
678	[BUG]  [BUGGY]  if(val1  >=  val2)  {  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  vice(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  vice(val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	416	None	replace
679	[BUG]  [BUGGY]  long  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    1;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  >  expected	194	None	replace
680	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  0L;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  0L;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  0L;  }	  for(int    val1    =    1;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  orphaned  case	194	None	replace
681	[BUG]  [BUGGY]  long  val1  =  1L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    1;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  >  expected	194	None	replace
682	[BUG]  [BUGGY]  for(int  val1  =  2;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  2;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  2;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    1;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  orphaned  case	194	None	replace
683	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0,  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0,  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    1;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  ';'  expected	194	None	replace
684	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    1;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  ';'  expected	194	None	replace
685	[BUG]  [BUGGY]  long  val2  =  val1,  val2.longValue();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1,  val2.longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1,  val2.longValue();	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  ';'  expected	571	None	replace
686	[BUG]  [BUGGY]  int  val2  =  val1  *  val2.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  val1  *  val2.longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  val1  *  val2.longValue();	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	571	None	replace
687	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.doubleValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1  *  val2.doubleValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1  *  val2.doubleValue();	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	571	None	replace
688	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.getValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1  *  val2.getValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1  *  val2.getValue();	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	571	None	replace
689	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.getLongValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1  *  val2.getLongValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1  *  val2.getLongValue();	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	571	None	replace
690	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.longValue()  +  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1  *  val2.longValue()  +  1;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1  *  val2.longValue()  +  1;	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	571	None	replace
691	[BUG]  [BUGGY]  long  val2  =  val1  *  val2.longValue().longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1  *  val2.longValue().longValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1  *  val2.longValue().longValue();	  long    val2    =    val1    *    val2.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	571	None	replace
692	[BUG]  [BUGGY]  long  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	36	None	replace
693	[BUG]  [BUGGY]  for(int  val1  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
694	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val1.length;  val2++)  {  if(val2!=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
695	[BUG]  [BUGGY]  long  val1  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	36	None	replace
696	[BUG]  [BUGGY]  int  val1  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0L;  val1  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val1    <    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	36	None	replace
697	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	while(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  ArithmeticException  	754	1	replace
698	[BUG]  [BUGGY]  while(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2!=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  ArithmeticException  	754	1	replace
699	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  ==  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	while(val2  ==  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  AssertionFailedError  	754	1	replace
700	[BUG]  [BUGGY]  while(val2  ==  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  ==  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2  ==  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	compilable	  [FE]  AssertionFailedError  	754	1	replace
701	[BUG]  [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }  [CE]  no  suitable  constructor  found  for  ArithmeticException(String,int)  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1,  val2);  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  ArithmeticException(String,int)	754	None	replace
702	[BUG]  [BUGGY]  while(val2  >>  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  >>  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2  >>  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	  while(val2    >=    val1)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2);    }    	non-compiled	[CE]  incompatible  types	754	None	replace
703	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val2;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val2;  }	  for(int    val1    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	630	None	replace
704	[BUG]  [BUGGY]  for(int  val1  =  0L;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }	  for(int    val1    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	630	None	replace
705	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }	  for(int    val1    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	630	None	replace
706	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }	  for(int    val1    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	630	None	replace
707	[BUG]  [BUGGY]  for(int  val1  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }	  for(int    val1    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	630	None	replace
708	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  0;  val1  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  -val1;  }	  for(int    val1    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  >  expected	630	None	replace
709	[BUG]  [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1  <  val2.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }	  for(int    val1    =    0;    val1    <    val2.length;    val2++)    {    if(val1    >=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	630	None	replace
710	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	460	1	add
711	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	460	1	add
712	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	460	1	add
713	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	460	1	add
714	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	460	1	add
715	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	460	1	add
716	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }	  	non-compiled	[CE]  incompatible  types	460	None	add
717	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	460	1	add
718	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	460	1	add
719	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }	  	non-compiled	[CE]  incompatible  types	460	None	add
720	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	460	1	add
721	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	460	1	add
722	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }	  	non-compiled	[CE]  incompatible  types	460	None	add
723	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }	  	non-compiled	[CE]  incompatible  types	460	None	add
724	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    if(val1!=  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        if(val1!=    val2)    {    return    -1;    }    if(val1  >=  val2)  {  return  -1;  }  if(val1  >>  val2)  {  return  -1;  }  if(val1  >=  val2)  {  return  -1;  }  if(val1!=  val2)  {  return  -1;  }	  	non-compiled	[CE]  incompatible  types	460	None	add
725	[BUG]  [BUGGY]  long  val2  =  safeMultiply(val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  safeMultiply(val1);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  safeMultiply(val1);	  return    -1;    int    val2    =    safeMultiply(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	618	None	replace
726	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }	  return    -1;    int    val2    =    safeMultiply(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	618	None	replace
727	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }	  return    -1;    int    val2    =    safeMultiply(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	618	None	replace
728	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }	  return    -1;    int    val2    =    safeMultiply(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	618	None	replace
729	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  int  val2  =  safeMultiply(val1);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  int  val2  =  safeMultiply(val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  int  val2  =  safeMultiply(val1);  }	  return    -1;    int    val2    =    safeMultiply(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	618	None	replace
730	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  int  val2  =  safeMultiply(val1);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1;  int  val2  =  safeMultiply(val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1;  int  val2  =  safeMultiply(val1);  }	  return    -1;    int    val2    =    safeMultiply(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	618	None	replace
731	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  int  val2  =  safeMultiply(val1);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  int  val2  =  safeMultiply(val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  -1;  int  val2  =  safeMultiply(val1);  }	  return    -1;    int    val2    =    safeMultiply(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	618	None	replace
732	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  int  val2  =  safeMultiply(val2);  }  else  {  throw  new  ArithmeticException( " ");  }	  return    -1;    int    val2    =    safeMultiply(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	618	None	replace
733	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2,    val1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	262	None	replace
734	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2,    val1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	262	None	replace
735	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2,    val1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	262	None	replace
736	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2,    val1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	262	None	replace
737	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2,    val1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	262	None	replace
738	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val2,  val1)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2,    val1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	262	None	replace
739	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  <  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2,    val1)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	262	None	replace
740	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  >=  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    0;    val2    >=    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  orphaned  case	559	None	replace
741	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    0;    val2    >=    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  orphaned  case	559	None	replace
742	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    0;    val2    >=    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  ';'  expected	559	None	replace
743	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1,  val2++)  {  if(val1  >  val2)  {  return  -val2;  }	  for(int    val1    =    0;    val2    >=    val1;    val2++)    {    if(val1    >    val2)    {    return    -val2;    }    	non-compiled	[CE]  ';'  expected	559	None	replace
744	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  long  val1  >  val2)?  -1  :  -val1;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  long  val1  >  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val1;    long  val1  >  val2)?  -1  :  -val1;	  	non-compiled	[CE]  ';'  expected	431	None	add
745	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  if(val1  >  val2)?  -1  :  -val1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  if(val1  >  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val1;    if(val1  >  val2)?  -1  :  -val1;	  	non-compiled	[CE]  illegal  start  of  expression	431	None	add
746	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  (val1  >  val2)?  -1  :  -val1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  (val1  >  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val1;    (val1  >  val2)?  -1  :  -val1;	  	non-compiled	[CE]  not  a  statement	431	None	add
747	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  return(val1  >  val2)?  -1  :  -val1;  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  return(val1  >  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val1;    return(val1  >  val2)?  -1  :  -val1;	  	non-compiled	[CE]  unreachable  statement	431	None	add
748	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  Long  val1  =  val2)?  -1  :  -val1;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  Long  val1  =  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val1;    Long  val1  =  val2)?  -1  :  -val1;	  	non-compiled	[CE]  ';'  expected	431	None	add
749	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  int  val2  =(val1  >  val2)?  -1  :  -val1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  int  val2  =(val1  >  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val1;    int  val2  =(val1  >  val2)?  -1  :  -val1;	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	431	None	add
750	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  val1  >  val2)?  -1  :  -val1;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  val1  >  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val1;    val1  >  val2)?  -1  :  -val1;	  	non-compiled	[CE]  not  a  statement	431	None	add
751	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  int  val2  =(val1  >  val2)?  -val1;  [CE]  :  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  int  val2  =(val1  >  val2)?  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val1;    int  val2  =(val1  >  val2)?  -val1;	  	non-compiled	[CE]  :  expected	431	None	add
752	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  long  val1  >  val2)?  -1  :  -val2;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  long  val1  >  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val1;    long  val1  >  val2)?  -1  :  -val2;	  	non-compiled	[CE]  ';'  expected	431	None	add
753	[BUG]  [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  Integer  val1  =  getValue(val1);  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >  val2)?  -1  :  -val1;  Integer  val1  =  getValue(val1);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >    val2)?    -1    :    -val1;    Integer  val1  =  getValue(val1);	  	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	431	None	add
754	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
755	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
756	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
757	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
758	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
759	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
760	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
761	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
762	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	non-compiled	[CE]  incompatible  types	1	None	add
763	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
764	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val2  >  val1)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
765	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        if(val1    >    val2)    {    return    -1;    }    if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;  }  if(val1  >  val2)  {  return  -1;	  	non-compiled	[CE]  orphaned  case	1	None	add
766	[BUG]  [BUGGY]  parent  ==  val1?  val2  :  val1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  parent  ==  val1?  val2  :  val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	parent  ==  val1?  val2  :  val1;	  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    [Delete]    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  not  a  statement	372	None	replace
767	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	499	None	replace
768	[BUG]  [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	byte  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	499	None	replace
769	[BUG]  [BUGGY]  short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	short  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	499	None	replace
770	[BUG]  [BUGGY]  double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	double  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	499	None	replace
771	[BUG]  [BUGGY]  float  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  float  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	float  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val2    >=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	499	None	replace
772	[BUG]  [BUGGY]  place(val1,  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  place(val1,  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	place(val1,  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  place(val1,    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	750	None	replace
773	[BUG]  [BUGGY]  place(val1,  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  place(val1,  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	place(val1,  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }	  place(val1,    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	750	None	replace
774	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val1!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	709	None	replace
775	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  ++val1)  {  if(val1!=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val1!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	709	None	replace
776	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val2)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    ++val2)    {    if(val1!=    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	709	None	replace
777	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  <  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    <    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	566	None	replace
778	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    <    val2)    {    return    -1;    }    	non-compiled	[CE]  >  expected	566	None	replace
779	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  <  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    <    val2)    {    return    -1;    }    	non-compiled	[CE]  >  expected	566	None	replace
780	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  <  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2,  val1)  {  if(val1  <  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    <    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	566	None	replace
781	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  <  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    <    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	566	None	replace
782	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  <  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  <  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    <    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	566	None	replace
783	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  <  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    <    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	566	None	replace
784	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2)  {  if(val1  <  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2)  {  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2)  {  if(val1  <  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    <    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	566	None	replace
785	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
786	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
787	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
788	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
789	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
790	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
791	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
792	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
793	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
794	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
795	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val1)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
796	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val1)  {  return  -val2;  }  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val1)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
797	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	149	None	add
798	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
799	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
800	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
801	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	149	1	add
802	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	237	1	add
803	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	237	1	add
804	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	237	1	add
805	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	237	1	add
806	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	237	None	add
807	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	237	1	add
808	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	237	1	add
809	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [Delete]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	237	None	add
810	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	237	1	add
811	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	237	1	add
812	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	237	1	add
813	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	237	1	add
814	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [BUGGY]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [BUGGY]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [BUGGY]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	237	None	add
815	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  safeMultiply(val1,  val2,  val2);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val1,  val2,  val2);	  int    val2    =    safeMultiply(val1,    val2,    val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	305	None	replace
816	[BUG]  [BUGGY]  long  val2  =  safeMultiply(val1,  val2,  val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  safeMultiply(val1,  val2,  val1);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  safeMultiply(val1,  val2,  val1);	  int    val2    =    safeMultiply(val1,    val2,    val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	305	None	replace
817	[BUG]  [BUGGY]  int  val2  =  safeMultiply(val1,  val2,  val3);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  safeMultiply(val1,  val2,  val3);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  safeMultiply(val1,  val2,  val3);	  int    val2    =    safeMultiply(val1,    val2,    val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	305	None	replace
818	[BUG]  [BUGGY]  boolean  val2  =  safeMultiply(val1,  val2,  val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  boolean  val2  =  safeMultiply(val1,  val2,  val1);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	boolean  val2  =  safeMultiply(val1,  val2,  val1);	  int    val2    =    safeMultiply(val1,    val2,    val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	305	None	replace
819	[BUG]  [BUGGY]  float  val2  =  safeMultiply(val1,  val2,  val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  float  val2  =  safeMultiply(val1,  val2,  val1);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	float  val2  =  safeMultiply(val1,  val2,  val1);	  int    val2    =    safeMultiply(val1,    val2,    val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	305	None	replace
820	[BUG]  [BUGGY]  double  val2  =  safeMultiply(val1,  val2,  val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  double  val2  =  safeMultiply(val1,  val2,  val1);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	double  val2  =  safeMultiply(val1,  val2,  val1);	  int    val2    =    safeMultiply(val1,    val2,    val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	305	None	replace
821	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
822	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
823	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	502	None	add
824	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
825	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
826	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
827	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
828	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
829	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
830	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
831	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
832	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
833	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
834	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
835	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	502	1	add
836	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	502	None	add
837	[BUG]  [BUGGY]  safe(val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	521	None	replace
838	[BUG]  [BUGGY]  safe(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	521	None	replace
839	[BUG]  [BUGGY]  safe(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	521	None	replace
840	[BUG]  [BUGGY]  safe(val1,  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1,  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1,  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	521	None	replace
841	[BUG]  [BUGGY]  safe(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	521	None	replace
842	[BUG]  [BUGGY]  safe(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	521	None	replace
843	[BUG]  [BUGGY]  safe(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	521	None	replace
844	[BUG]  [BUGGY]  safe(val1  <  =  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  <  =  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  <  =  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  illegal  start  of  expression	521	None	replace
845	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	10	1	add
846	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	10	1	add
847	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
848	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  [CE]  incompatible  types  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }	  	non-compiled	[CE]  incompatible  types	10	None	add
849	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	10	1	add
850	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]          ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val2  >=  val1)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	10	1	add
851	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [CE]  incompatible  types  [FE]            ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	non-compiled	[CE]  incompatible  types	10	None	add
852	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]              ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  <  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
853	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [CE]  illegal  start  of  expression  [FE]                ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException(	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
854	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [CE]  incompatible  types  [FE]                  ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >>  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }	  	non-compiled	[CE]  incompatible  types	10	None	add
855	[BUG]  [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [CE]  unclosed  string  literal  [FE]                    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]          if(val1    >=    val2)    {    throw    new    ArithmeticException(     "     ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException(   "     ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	                if(val1        >=        val2)        {        throw        new        ArithmeticException(       "       ");        }        if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "   ");  }  if(val1  >=  val2)  {  throw  new  ArithmeticException( "	  	non-compiled	[CE]  unclosed  string  literal	10	None	add
856	[BUG]  [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    *    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	160	None	replace
857	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    *    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	160	None	replace
858	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    *    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	160	None	replace
859	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    *    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	160	None	replace
860	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    *    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	160	None	replace
861	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    *    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	160	None	replace
862	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  *  val1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2    +=    val2.length;)    {    if(val1    *    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	160	None	replace
863	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
864	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
865	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
866	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
867	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
868	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
869	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
870	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
871	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	74	None	add
872	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
873	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
874	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
875	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
876	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
877	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
878	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val1)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
879	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val1)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val1)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
880	[BUG]  [BUGGY]  int  val2  =  val1.longValue()  +  2;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  val1.longValue()  +  2;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  val1.longValue()  +  2;	  long    val2    =    val1.longValue()    +    2;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	294	None	replace
881	[BUG]  [BUGGY]  long  val2  =  val1.longValue().doubleValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.longValue().doubleValue();  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.longValue().doubleValue();	  long    val2    =    val1.longValue()    +    2;    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	294	None	replace
882	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException(   "   ");  }  while(val2!=  val1)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    while(val2!=  val1)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	673	1	add
883	[BUG]  [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException(   "   ");  }  while(val2!=  val1)  {  throw  new  ArithmeticException( "   ");  }  [FE]  ArithmeticException  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException(   "   ");  }  while(val2!=  val1)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    while(val2!=  val1)  {  throw  new  ArithmeticException( "   ");  }	  	compilable	  [FE]  ArithmeticException  	673	1	add
884	[BUG]  [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException(   "   ");  }  while(val2  >>  val1)  {  throw  new  ArithmeticException( "   ");  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException(   "   ");  }  while(val2  >>  val1)  {  throw  new  ArithmeticException( "   ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2    >=    val1)    {    throw    new    ArithmeticException(   "   ");    }    while(val2  >>  val1)  {  throw  new  ArithmeticException( "   ");  }	  	non-compiled	[CE]  incompatible  types	673	None	add
885	[BUG]  [BUGGY]  tries.put(val1,  val2);  [CE]  cannot  find  symbol  tries  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  tries.put(val1,  val2);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	tries.put(val1,  val2);	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  tries	14	None	replace
886	[BUG]  [BUGGY]  while(val1  <  val2)  {  [CE]  orphaned  case  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	14	None	replace
887	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  val2);  [CE]  no  suitable  method  found  for  safeMultiply(long,int,int)  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1,  val2,  val2);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2,  val2);	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1!=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long,int,int)	14	None	replace
888	[BUG]  [BUGGY]  safeMultiply(val1.longValue(),  val2.highValue());  [CE]  long  cannot  be  dereferenced  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1.longValue(),  val2.highValue());  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1.longValue(),  val2.highValue());	  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val2    <    val1)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	148	None	replace
889	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  return(val1  >=  val2)?  -1L  :  -1L;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  return(val1  >=  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1L    :    -1L;    return(val1  >=  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  unreachable  statement	731	None	add
890	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  long  val1  =  val2)?  -1L  :  -1L;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  long  val1  =  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1L    :    -1L;    long  val1  =  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  ';'  expected	731	None	add
891	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  return(val1  >>  val2)?  -1L  :  -1L;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  return(val1  >>  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1L    :    -1L;    return(val1  >>  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  incompatible  types	731	None	add
892	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  if(val1  >=  val2)?  -1L  :  -1L;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  if(val1  >=  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1L    :    -1L;    if(val1  >=  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  illegal  start  of  expression	731	None	add
893	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  int  val2  =(val1  >=  val2)?  -1L  :  -1L;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  int  val2  =(val1  >=  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1L    :    -1L;    int  val2  =(val1  >=  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	731	None	add
894	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  (val1  >=  val2)?  -1L  :  -1L;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  (val1  >=  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1L    :    -1L;    (val1  >=  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  not  a  statement	731	None	add
895	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  ||(val1  >=  val2)?  -1L  :  -1L;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  ||(val1  >=  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1L    :    -1L;    ||(val1  >=  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  illegal  start  of  expression	731	None	add
896	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  int  val2  =  val1  <  val2)?  -1L  :  -1L;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  int  val2  =  val1  <  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1L    :    -1L;    int  val2  =  val1  <  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  ';'  expected	731	None	add
897	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  int  val2  =  val1  >=  val2)?  -1L  :  -1L;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1L  :  -1L;  int  val2  =  val1  >=  val2)?  -1L  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1    >=    val2)?    -1L    :    -1L;    int  val2  =  val1  >=  val2)?  -1L  :  -1L;	  	non-compiled	[CE]  ';'  expected	731	None	add
898	[BUG]  [BUGGY]  ReplacementUtils.replace(val1,  val2);  [CE]  cannot  find  symbol  ReplacementUtils  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  ReplacementUtils.replace(val1,  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	ReplacementUtils.replace(val1,  val2);	  parent.replace(val1,    val2);    	non-compiled	[CE]  cannot  find  symbol  ReplacementUtils	664	None	replace
899	[BUG]  [BUGGY]  Preconditions.checkState(val1.equals(val2));  [CE]  long  cannot  be  dereferenced  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  Preconditions.checkState(val1.equals(val2));  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	Preconditions.checkState(val1.equals(val2));	  parent.replace(val1,    val2);    	non-compiled	[CE]  long  cannot  be  dereferenced	664	None	replace
900	[BUG]  [BUGGY]  tryReplace(val1,  val2);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  tryReplace(val1,  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	tryReplace(val1,  val2);	  parent.replace(val1,    val2);    	non-compiled	[CE]  cannot  find  symbol	664	None	replace
901	[BUG]  [BUGGY]  Replacement.replace(val1,  val2);  [CE]  cannot  find  symbol  Replacement  [FE]                    StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  Replacement.replace(val1,  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	Replacement.replace(val1,  val2);	  parent.replace(val1,    val2);    	non-compiled	[CE]  cannot  find  symbol  Replacement	664	None	replace
902	[BUG]  [BUGGY]  Preconditions.checkState(val2.replace(val1,  val2));  [CE]  int  cannot  be  dereferenced  [FE]                      StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  Preconditions.checkState(val2.replace(val1,  val2));  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	Preconditions.checkState(val2.replace(val1,  val2));	  parent.replace(val1,    val2);    	non-compiled	[CE]  int  cannot  be  dereferenced	664	None	replace
903	[BUG]  [BUGGY]  substitute(val1,  val2);  [CE]  cannot  find  symbol  [FE]                        StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  substitute(val1,  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	substitute(val1,  val2);	  parent.replace(val1,    val2);    	non-compiled	[CE]  cannot  find  symbol	664	None	replace
904	[BUG]  [BUGGY]  vice(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  vice(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	vice(val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "Multiplication    overflows    a    long:       "    +    val1    +       "    *       "    +    val2);    }    if(val1    >>    val2)    {    throw    new    ArithmeticException(       "Multiplication    overflows    a    long:       "    +    val1    +       "    *       "    +    val2);    }    	non-compiled	[CE]  	470	None	replace
905	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  illegal  start  of  expression  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "Multiplication    overflows    a    long:       "    +    val1    +       "    *       "    +    val2);    }    if(val1    >>    val2)    {    throw    new    ArithmeticException(       "Multiplication    overflows    a    long:       "    +    val1    +       "    *       "    +    val2);    }    	non-compiled	[CE]  illegal  start  of  expression	470	None	replace
906	[BUG]  [BUGGY]  int  val1  =(val1  >=  val2)?  -1  :  -val1;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =(val1  >=  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =(val1  >=  val2)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	534	None	replace
907	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -val1;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1;  int  val1  =(val1  >=  val2)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	534	None	replace
908	[BUG]  [BUGGY]  int  val1  =(val1  >>  val2)?  -1  :  -val1;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =(val1  >>  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =(val1  >>  val2)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	534	None	replace
909	[BUG]  [BUGGY]  int  val1  =(val2  >=  val1)?  -1  :  -val1;  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =(val2  >=  val1)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =(val2  >=  val1)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    int    val1    =(val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	534	None	replace
910	[BUG]  [BUGGY]  if(val1!=  val2)  {  if(val2  >  val1)  {  return  -1;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  if(val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val2,    0,    val1);    	non-compiled	[CE]  orphaned  case	9	None	replace
911	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  =  val2)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  =  val2)  {  if(val1  >  val2)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val2,    0,    val1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
912	[BUG]  [BUGGY]  System.arraycopy(val1,  0,  val2,  0,  val1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  System.arraycopy(val1,  0,  val2,  0,  val1);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	System.arraycopy(val1,  0,  val2,  0,  val1);	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val2,    0,    val1);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	9	None	replace
913	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  if(val2  >  val1)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  =  val2)  {  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  =  val2)  {  if(val2  >  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val2,    0,    val1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
914	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
915	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
916	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
917	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
918	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
919	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
920	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
921	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
922	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
923	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
924	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
925	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
926	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  incompatible  types  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  incompatible  types	698	None	add
927	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
928	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
929	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
930	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	698	1	add
931	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1).;  }  [CE]  <identifier>  expected  [FE]                      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1).;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1).;  }	  	non-compiled	[CE]  <identifier>  expected	698	None	add
932	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
933	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
934	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
935	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
936	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
937	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
938	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
939	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
940	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
941	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
942	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  if(val1  >  val2)  {  return  0;  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  if(val1  >  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  if(val1  >  val2)  {  return  0;  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	408	None	add
943	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
944	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  0L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
945	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
946	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -0;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >  val2)  {  return  -0;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  -0;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
947	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
948	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >  val2)  {  return  0;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >    val2)    {    return    0;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	408	1	add
949	[BUG]  [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }  [CE]  [FE]          ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }	  while(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2;    }    	non-compiled	[CE]  	575	None	replace
950	[BUG]  [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }  [CE]  [FE]            ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2  >=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }	  while(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2;    }    	non-compiled	[CE]  	575	None	replace
951	[BUG]  [BUGGY]  while(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }  [CE]  [FE]              ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }	  while(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2;    }    	non-compiled	[CE]  	575	None	replace
952	[BUG]  [BUGGY]  while(val1!=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }  [CE]  [FE]                ArithmeticException      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1!=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1!=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2;  }	  while(val1    >=    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *   "    +    val2;    }    	non-compiled	[CE]  	575	None	replace
953	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
954	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
955	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
956	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
957	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
958	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
959	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
960	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
961	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
962	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
963	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  if(val2  ==  val2)  {  return  -1;  }  [CE]  no  suitable  method  found  for  safeMultiply(long)  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  if(val2  ==  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1);  }  if(val2  ==  val2)  {  return  -1;  }	  	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long)	214	None	add
964	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
965	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
966	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
967	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
968	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val2  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
969	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val2  ==  val1)  {  return  -1;  }  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val2  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val2  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
970	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
971	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  [FE]  StackOverflowError  [FE]                      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  ==  val1)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val2    ==    val1)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  StackOverflowError  	214	1	add
972	[BUG]  [BUGGY]  if(val1  >=  val2)  {  if(val2  <  val1)  {  return  -1;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  if(val2  <  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  if(val2  <  val1)  {  return  -1;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	649	None	replace
973	[BUG]  [BUGGY]  if(val1  <  val2)  {  if(val2  >  val1)  {  return  0;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  if(val2  >  val1)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  if(val2  >  val1)  {  return  0;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    }    while(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	649	None	replace
974	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  <  val1)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val2  <  val1)  {  return  -val1;  }	  if(val1    <    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	106	1	replace
975	[BUG]  [BUGGY]  if(val2  <  val1)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  <  val1)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  <  val1)  {  return  -val1;  }	  if(val1    <    val2)    {    return    -val1;    }    	compilable	  [FE]  AssertionFailedError  	106	1	replace
976	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
977	[BUG]  [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
978	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
979	[BUG]  [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
980	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
981	[BUG]  [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
982	[BUG]  [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	132	None	add
983	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
984	[BUG]  [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
985	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
986	[BUG]  [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
987	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
988	[BUG]  [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
989	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
990	[BUG]  [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
991	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
992	[BUG]  [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
993	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
994	[BUG]  [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	132	1	add
995	[BUG]  [BUGGY]  if(val2  ==  val1)  {  if(val1  >  val2)  {  return  -val1;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  ==  val1)  {  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  ==  val1)  {  if(val1  >  val2)  {  return  -val1;  }	  if(val1    >    val2)    {    return    -val1;    }    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	428	None	replace
996	[BUG]  [BUGGY]  if(val2  >=  val1)  {  if(val1  >  val2)  {  return  -val1;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  >=  val1)  {  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  >=  val1)  {  if(val1  >  val2)  {  return  -val1;  }	  if(val1    >    val2)    {    return    -val1;    }    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	428	None	replace
997	[BUG]  [BUGGY]  if(val2  ==  val1)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  ==  val1)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  ==  val1)  {  if(val1  >  val2)  {  return  -1;  }	  if(val1    >    val2)    {    return    -val1;    }    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	428	None	replace
998	[BUG]  [BUGGY]  if(val2  >=  val1)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  >=  val1)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  >=  val1)  {  if(val1  >  val2)  {  return  -1;  }	  if(val1    >    val2)    {    return    -val1;    }    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	428	None	replace
999	[BUG]  [BUGGY]  long  val2  =  val1.longValue();  if(val2  <  val2)  {  return  -1L;  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  val1.longValue();  if(val2  <  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  val1.longValue();  if(val2  <  val2)  {  return  -1L;  }	  return    -1L;    if(val1    <    val2)    {    return    -1L;    }    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	228	None	replace
1000	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  <  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val2  <  val1)  {  return  -1L;  }	  return    -1L;    if(val1    <    val2)    {    return    -1L;    }    	compilable	  [FE]  AssertionFailedError  	228	1	replace
1001	[BUG]  [BUGGY]  if(val2  <  val1)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  <  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  <  val1)  {  return  -1L;  }	  return    -1L;    if(val1    <    val2)    {    return    -1L;    }    	compilable	  [FE]  AssertionFailedError  	228	1	replace
1002	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  -1L;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  =  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  =  val2)  {  return  -1L;  }	  return    -1L;    if(val1    <    val2)    {    return    -1L;    }    	non-compiled	[CE]  illegal  start  of  expression	228	None	replace
1003	[BUG]  [BUGGY]  while(val1  <  val2)  {  if(val2  >  val1)  {  return  0;  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  if(val2  >  val1)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  if(val2  >  val1)  {  return  0;  }	  while(val1    <    val2)    {    if(val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	318	None	replace
1004	[BUG]  [BUGGY]  while(val1  <  val2)  {  if(val2  >  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  if(val2  >  val1)  {  return  0L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  if(val2  >  val1)  {  return  0L;  }	  while(val1    <    val2)    {    if(val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	318	None	replace
1005	[BUG]  [BUGGY]  while(val1  <  val2)  {  if(val2  >=  val1)  {  return  -1;  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  if(val2  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  if(val2  >=  val1)  {  return  -1;  }	  while(val1    <    val2)    {    if(val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	318	None	replace
1006	[BUG]  [BUGGY]  while(val1  <  =  val2)  {  if(val2  >  val1)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  =  val2)  {  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  =  val2)  {  if(val2  >  val1)  {  return  -1;  }	  while(val1    <    val2)    {    if(val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	318	None	replace
1007	[BUG]  [BUGGY]  while(val1  <  val2)  {  if(val2  >=  val1)  {  return  0L;  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  if(val2  >=  val1)  {  return  0L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  if(val2  >=  val1)  {  return  0L;  }	  while(val1    <    val2)    {    if(val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	318	None	replace
1008	[BUG]  [BUGGY]  while(val1  >=  val2)  {  if(val2  >  val1)  {  return  -1;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  >=  val2)  {  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >=  val2)  {  if(val2  >  val1)  {  return  -1;  }	  while(val1    <    val2)    {    if(val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	318	None	replace
1009	[BUG]  [BUGGY]  while(val1  >  val2)  {  if(val2  >  val1)  {  return  -1;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  >  val2)  {  if(val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >  val2)  {  if(val2  >  val1)  {  return  -1;  }	  while(val1    <    val2)    {    if(val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	318	None	replace
1010	[BUG]  [BUGGY]  while(val2  <  val1)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  <  val1)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2  <  val1)  {  if(val1  >  val2)  {  return  -1;  }	  while(val1    <    val2)    {    if(val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	318	None	replace
1011	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -val2;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  not  a  statement	537	None	replace
1012	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -1;	  return(val1    >=    val2)?    -1    :    -val1;    val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  not  a  statement	537	None	replace
1013	[BUG]  [BUGGY]  return(val2  >=  val1)?  -1  :  -val1;  val1  >=  val2)?  -1  :  -val1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val2  >=  val1)?  -1  :  -val1;  val1  >=  val2)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val2  >=  val1)?  -1  :  -val1;  val1  >=  val2)?  -1  :  -val1;	  return(val1    >=    val2)?    -1    :    -val1;    val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  not  a  statement	537	None	replace
1014	[BUG]  [BUGGY]  return(val1  <  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -val2;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  not  a  statement	537	None	replace
1015	[BUG]  [BUGGY]  return(val1  >>  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -val2;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >>  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >>  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  not  a  statement	537	None	replace
1016	[BUG]  [BUGGY]  return(val1  <  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -1;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  <  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  <  val2)?  -1  :  -1;  val2  >=  val1)?  -1  :  -1;	  return(val1    >=    val2)?    -1    :    -val1;    val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  not  a  statement	537	None	replace
1017	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  val2  ==  val1)?  -1  :  -val2;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  >=  val2)?  -1  :  -1;  val2  ==  val1)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -1;  val2  ==  val1)?  -1  :  -val2;	  return(val1    >=    val2)?    -1    :    -val1;    val1    >=    val2)?    -1    :    -val1;    	non-compiled	[CE]  not  a  statement	537	None	replace
1018	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    ==    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	655	None	replace
1019	[BUG]  [BUGGY]  long  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    ==    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	655	None	replace
1020	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  ==  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    ==    val1.length;    ++val2)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	655	None	replace
1021	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  System.arraycopy(val1,  0,  val1,  0,  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	System.arraycopy(val1,  0,  val1,  0,  val2);	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    }    	compilable	  [FE]  ArrayStoreException  	643	1	replace
1022	[BUG]  [BUGGY]  System.arraycopy(val1,  0,  val1,  0,  val2);  [FE]  ArrayStoreException  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  System.arraycopy(val1,  0,  val1,  0,  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	System.arraycopy(val1,  0,  val1,  0,  val2);	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    }    	compilable	  [FE]  ArrayStoreException  	643	1	replace
1023	[BUG]  [BUGGY]  if(val1  >=  val2)  {  if(val2  >  val1)  {  return  0;  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  if(val2  >  val1)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  if(val2  >  val1)  {  return  0;  }	  if(val1    >    val2)    {    return    -1;    }    if(val1    >    val2)    {    return    -1;    System.arraycopy(val1,    0,    val1,    0,    val2);    }    	non-compiled	[CE]  orphaned  case	643	None	replace
1024	[BUG]  [BUGGY]  while(val1  <  val2)  {  val2  >  val1)  {  return  0;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  val2  >  val1)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  val2  >  val1)  {  return  0;  }	  while(val1    <    val2)    {    val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  not  a  statement	232	None	replace
1025	[BUG]  [BUGGY]  while(val1  <  val2)  {  val2  >  val1)  {  return  0L;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  val2  >  val1)  {  return  0L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  val2  >  val1)  {  return  0L;  }	  while(val1    <    val2)    {    val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  not  a  statement	232	None	replace
1026	[BUG]  [BUGGY]  while(val1  <  =  val2)  {  val2  >  val1)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  =  val2)  {  val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  =  val2)  {  val2  >  val1)  {  return  -1;  }	  while(val1    <    val2)    {    val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
1027	[BUG]  [BUGGY]  while(val1  <  val2)  {  val2  >=  val1)  {  return  -1;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  val2  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  val2  >=  val1)  {  return  -1;  }	  while(val1    <    val2)    {    val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  not  a  statement	232	None	replace
1028	[BUG]  [BUGGY]  while(val1  <  val2)  {  val2  >  val2)  {  return  0;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  val2  >  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  val2  >  val2)  {  return  0;  }	  while(val1    <    val2)    {    val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  not  a  statement	232	None	replace
1029	[BUG]  [BUGGY]  while(val1  >  val2)  {  val2  >  val1)  {  return  -1;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  >  val2)  {  val2  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >  val2)  {  val2  >  val1)  {  return  -1;  }	  while(val1    <    val2)    {    val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  not  a  statement	232	None	replace
1030	[BUG]  [BUGGY]  while(val1  <  val2)  {  val2  >  val1)  {  return  -1L;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  <  val2)  {  val2  >  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  <  val2)  {  val2  >  val1)  {  return  -1L;  }	  while(val1    <    val2)    {    val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  not  a  statement	232	None	replace
1031	[BUG]  [BUGGY]  while(val2  <  val1)  {  val1  >  val2)  {  return  -1;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val2  <  val1)  {  val1  >  val2)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val2  <  val1)  {  val1  >  val2)  {  return  -1;  }	  while(val1    <    val2)    {    val2    >    val1)    {    return    -1;    }    	non-compiled	[CE]  not  a  statement	232	None	replace
1032	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }	  for(int    val1    =    0;    val2    >=    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	634	None	replace
1033	[BUG]  [BUGGY]  long  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }	  for(int    val1    =    0;    val2    >=    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  not  a  statement	634	None	replace
1034	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  0;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  return  0;  }	  for(int    val1    =    0;    val2    >=    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	634	None	replace
1035	[BUG]  [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val1!=  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }	  for(int    val1    =    0;    val2    >=    val1.length;    val2++)    {    if(val2    >=    0)    {    return    0;    }    	non-compiled	[CE]  orphaned  case	634	None	replace
1036	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  <  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  <  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	114	None	replace
1037	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	114	None	replace
1038	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	114	None	replace
1039	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  >  expected	114	None	replace
1040	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  >  expected	114	None	replace
1041	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	114	None	replace
1042	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  orphaned  case	114	None	replace
1043	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  return  -1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    return    -1;    }    	non-compiled	[CE]  ';'  expected	114	None	replace
1044	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    return    -val1;    }    	non-compiled	[CE]  >  expected	297	None	replace
1045	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	297	None	replace
1046	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2!=  0)  {  return  -val1;  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2!=    0)    {    return    -val1;    }    	non-compiled	[CE]  orphaned  case	297	None	replace
1047	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
1048	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
1049	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  incompatible  types	86	None	add
1050	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
1051	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
1052	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
1053	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
1054	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
1055	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
1056	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2.;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2.;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2.;  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  <identifier>  expected	86	None	add
1057	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  [Delete]  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  [Delete]  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  [Delete]  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	non-compiled	[CE]  ')'  expected	86	None	add
1058	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
1059	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
1060	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	non-compiled	[CE]  incompatible  types	86	None	add
1061	[BUG]  [BUGGY]  safeMultiply(val1,  val2,  null);  [CE]  no  suitable  method  found  for  safeMultiply(long,int,<null>)  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1,  val2,  null);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2,  null);	  if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    >    val2)    {    return    -1;    }    else    {    safeMultiply(val1);    }    	non-compiled	[CE]  no  suitable  method  found  for  safeMultiply(long,int,<null>)	635	None	replace
1062	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1063	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1064	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1065	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1066	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1067	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1068	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1069	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1070	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1071	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1072	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1073	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1074	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1075	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1076	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1077	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val2;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1078	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1079	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -val1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1080	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1081	[BUG]  [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >    val2)    {    return    -val1;    }    if(val1  >  val1)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >        val2)        {        return        -val1;        }        if(val1    >    val1)    {    return    -val1;    }    if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val2)  {  return  -val1;  }  if(val1  >  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	423	1	add
1082	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1083	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1084	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1085	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1086	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	42	None	add
1087	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1088	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1089	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1090	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1091	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1092	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val1)  {  return  -1;  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1093	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1094	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
1095	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [Delete]  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	42	None	add
1096	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >>  val1)  {  return  -1;  }  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >>  val1)  {  return  -1;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -1;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >>  val1)  {  return  -1;  }	  	non-compiled	[CE]  incompatible  types	42	None	add
1097	[BUG]  [BUGGY]  safelyMultiply(val1,  val2,  val1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safelyMultiply(val1,  val2,  val1);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safelyMultiply(val1,  val2,  val1);	  safelyMultiply(val1,    val2);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
1098	[BUG]  [BUGGY]  safelyMultiply(val2,  val1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safelyMultiply(val2,  val1);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safelyMultiply(val2,  val1);	  safelyMultiply(val1,    val2);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
1099	[BUG]  [BUGGY]  safelyMultiply(val1,  val2,  val2);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safelyMultiply(val1,  val2,  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safelyMultiply(val1,  val2,  val2);	  safelyMultiply(val1,    val2);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
1100	[BUG]  [BUGGY]  long  val2  =  0L;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  0L;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  0L;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	161	None	replace
1101	[BUG]  [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	161	None	replace
1102	[BUG]  [BUGGY]  long  val2  =  1;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  1;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  1;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	161	None	replace
1103	[BUG]  [BUGGY]  long  val2  =  -1;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  -1;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  -1;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	161	None	replace
1104	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2  +=  val1.length;)  {  if(val2  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val2  +=  val1.length;)  {  if(val2  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  0;  val1  <  val2.length;  val2  +=  val1.length;)  {  if(val2  +  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	161	None	replace
1105	[BUG]  [BUGGY]  short  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  short  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	short  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	161	None	replace
1106	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  0;  val1  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val1)  {  throw  new  ArithmeticException( " ");  }	  long    val2    =    0;    val1    <    val1.length;    val2    +=    val2.length;)    {    if(val1    +    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	161	None	replace
1107	[BUG]  [BUGGY]  return  -1L  *  val1.doubleValue();  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return  -1L  *  val1.doubleValue();  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L  *  val1.doubleValue();	  return    -1L    *    val2.doubleValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	600	None	replace
1108	[BUG]  [BUGGY]  return  -1L  *  val1,  val2.doubleValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return  -1L  *  val1,  val2.doubleValue();  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L  *  val1,  val2.doubleValue();	  return    -1L    *    val2.doubleValue();    	non-compiled	[CE]  ';'  expected	600	None	replace
1109	[BUG]  [BUGGY]  return  -1L  *  val1  +  val2.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return  -1L  *  val1  +  val2.doubleValue();  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L  *  val1  +  val2.doubleValue();	  return    -1L    *    val2.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	600	None	replace
1110	[BUG]  [BUGGY]  return  -1L  *  val2,  val2.doubleValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return  -1L  *  val2,  val2.doubleValue();  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L  *  val2,  val2.doubleValue();	  return    -1L    *    val2.doubleValue();    	non-compiled	[CE]  ';'  expected	600	None	replace
1111	[BUG]  [BUGGY]  return  -1  *  val1.doubleValue();  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return  -1  *  val1.doubleValue();  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1  *  val1.doubleValue();	  return    -1L    *    val2.doubleValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	600	None	replace
1112	[BUG]  [BUGGY]  return  -1L  *  val1,  val2).doubleValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return  -1L  *  val1,  val2).doubleValue();  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L  *  val1,  val2).doubleValue();	  return    -1L    *    val2.doubleValue();    	non-compiled	[CE]  ';'  expected	600	None	replace
1113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1114	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1115	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >>  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >>  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	235	None	add
1116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1117	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1!=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1119	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1120	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [Delete]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [Delete]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	235	None	add
1121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1122	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1124	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1125	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [BUGGY]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val1  [BUGGY]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  [BUGGY]  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	235	None	add
1126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  >=  val1)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  >=  val1)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1127	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  >=  val1)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  if(val2  >=  val1)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    -1L;    }    else    {    safeMultiply(val1,    val2);    }    if(val2  >=  val1)  {  return  -1L;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	235	1	add
1128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  >=  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    0;    }    if(val1  >=  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
1129	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  >=  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  >=  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    0;    }    if(val1  >=  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
1130	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  >>  val2)  {  return  0;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  >>  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    0;    }    if(val1  >>  val2)  {  return  0;  }	  	non-compiled	[CE]  incompatible  types	90	None	add
1131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1!=  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    0;    }    if(val1!=  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
1132	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1!=  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1!=  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    0;    }    if(val1!=  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
1133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  ==  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    >=    val2)    {    return    0;    }    if(val1  ==  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
1134	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  ==  val2)  {  return  0;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  ==  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    0;    }    if(val1  ==  val2)  {  return  0;  }	  	compilable	  [FE]  AssertionFailedError  	90	1	add
1135	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  [Delete]  val2)  {  return  0;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  [Delete]  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    0;    }    if(val1  [Delete]  val2)  {  return  0;  }	  	non-compiled	[CE]  ')'  expected	90	None	add
1136	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  [BUGGY]  val2)  {  return  0;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  [BUGGY]  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    0;    }    if(val1  [BUGGY]  val2)  {  return  0;  }	  	non-compiled	[CE]  ')'  expected	90	None	add
1137	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  [PATCH]  val2)  {  return  0;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  [PATCH]  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    0;    }    if(val1  [PATCH]  val2)  {  return  0;  }	  	non-compiled	[CE]  ')'  expected	90	None	add
1138	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  [BUG]  val2)  {  return  0;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  0;  }  if(val1  [BUG]  val2)  {  return  0;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    >=    val2)    {    return    0;    }    if(val1  [BUG]  val2)  {  return  0;  }	  	non-compiled	[CE]  ')'  expected	90	None	add
1139	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1;  long  val2  =  val1.longValue();  }	  return    -1;    long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	59	None	replace
1140	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  -1;  long  val2  =  val1.longValue();  }	  return    -1;    long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	59	None	replace
1141	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  long  val2  =  val1.longValue();  }	  return    -1;    long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	59	None	replace
1142	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -1;  long  val2  =  val1.longValue();  }	  return    -1;    long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	59	None	replace
1143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  return    -1;    long    val2    =    val1.longValue();    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1144	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  return    -1;    long    val2    =    val1.longValue();    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  return    -1;    long    val2    =    val1.longValue();    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1146	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  return    -1;    long    val2    =    val1.longValue();    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1147	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  else  {  safeMultiply(val1,  val2);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  else  {  safeMultiply(val1,  val2);  }	  return    -1;    long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	59	None	replace
1148	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  else  {  safeMultiply(val1,  val2);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  -1;  long  val2  =  val1.longValue();  }  else  {  safeMultiply(val1,  val2);  }	  return    -1;    long    val2    =    val1.longValue();    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	59	None	replace
1149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  ==  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1L;    }    if(val1  ==  val2)  {  return  -1L;  }	  	compilable	  [FE]  AssertionFailedError  	541	1	add
1150	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  ==  val2)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  ==  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1L;    }    if(val1  ==  val2)  {  return  -1L;  }	  	compilable	  [FE]  AssertionFailedError  	541	1	add
1151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  >=  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1L;    }    if(val1  >=  val2)  {  return  -1L;  }	  	compilable	  [FE]  AssertionFailedError  	541	1	add
1152	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  >=  val2)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  >=  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1L;    }    if(val1  >=  val2)  {  return  -1L;  }	  	compilable	  [FE]  AssertionFailedError  	541	1	add
1153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1!=  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1L;    }    if(val1!=  val2)  {  return  -1L;  }	  	compilable	  [FE]  AssertionFailedError  	541	1	add
1154	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1!=  val2)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1!=  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1L;    }    if(val1!=  val2)  {  return  -1L;  }	  	compilable	  [FE]  AssertionFailedError  	541	1	add
1155	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  >>  val2)  {  return  -1L;  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  >>  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1L;    }    if(val1  >>  val2)  {  return  -1L;  }	  	non-compiled	[CE]  incompatible  types	541	None	add
1156	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  {  val2)  {  return  -1L;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  {  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1L;    }    if(val1  {  val2)  {  return  -1L;  }	  	non-compiled	[CE]  ')'  expected	541	None	add
1157	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  [Delete]  val2)  {  return  -1L;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  [Delete]  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1L;    }    if(val1  [Delete]  val2)  {  return  -1L;  }	  	non-compiled	[CE]  ')'  expected	541	None	add
1158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val2  ==  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1    ==    val2)    {    return    -1L;    }    if(val2  ==  val1)  {  return  -1L;  }	  	compilable	  [FE]  AssertionFailedError  	541	1	add
1159	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val2  ==  val1)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val2  ==  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1L;    }    if(val2  ==  val1)  {  return  -1L;  }	  	compilable	  [FE]  AssertionFailedError  	541	1	add
1160	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  [BUGGY]  val2)  {  return  -1L;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  if(val1  [BUGGY]  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1L;    }    if(val1  [BUGGY]  val2)  {  return  -1L;  }	  	non-compiled	[CE]  ')'  expected	541	None	add
1161	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  If(val1  ==  val2)  {  return  -1L;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  If(val1  ==  val2)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1    ==    val2)    {    return    -1L;    }    If(val1  ==  val2)  {  return  -1L;  }	  	non-compiled	[CE]  ';'  expected	541	None	add
1162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }	  return    -1L;    return    -1L;    	compilable	  [FE]  AssertionFailedError  	220	1	replace
1163	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }	  return    -1L;    return    -1L;    	compilable	  [FE]  AssertionFailedError  	220	1	replace
1164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }	  return    -1L;    return    -1L;    	compilable	  [FE]  AssertionFailedError  	220	1	replace
1165	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }	  return    -1L;    return    -1L;    	compilable	  [FE]  AssertionFailedError  	220	1	replace
1166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }	  return    -1L;    return    -1L;    	compilable	  [FE]  AssertionFailedError  	220	1	replace
1167	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  -1L;  }  else  if(val2  ==  val1)  {  return  -1L;  }	  return    -1L;    return    -1L;    	compilable	  [FE]  AssertionFailedError  	220	1	replace
1168	[BUG]  [BUGGY]  if(val1  <  =  val2)  {  return  -1L;  }  else  if(val2  >  val1)  {  return  -1L;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  <  =  val2)  {  return  -1L;  }  else  if(val2  >  val1)  {  return  -1L;  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  =  val2)  {  return  -1L;  }  else  if(val2  >  val1)  {  return  -1L;  }	  return    -1L;    return    -1L;    	non-compiled	[CE]  illegal  start  of  expression	220	None	replace
1169	[BUG]  [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val1++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	641	None	replace
1170	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val1++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	641	None	replace
1171	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val1++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	641	None	replace
1172	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val1++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	641	None	replace
1173	[BUG]  [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =  0;  val1  <  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val1++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	641	None	replace
1174	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val2.length;  val1++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val2.length;    val1++)    {    if(val1    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	641	None	replace
1175	[BUG]  [BUGGY]  safely(val1  -  val2);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safely(val1  -  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  -  val2);	  safely(val1    >>    val2);    	non-compiled	[CE]  cannot  find  symbol	573	None	replace
1176	[BUG]  [BUGGY]  safely(val1  *  val2);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safely(val1  *  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  *  val2);	  safely(val1    >>    val2);    	non-compiled	[CE]  cannot  find  symbol	573	None	replace
1177	[BUG]  [BUGGY]  safe(val1  -  val2);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  -  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  -  val2);	  safely(val1    >>    val2);    	non-compiled	[CE]  cannot  find  symbol	573	None	replace
1178	[BUG]  [BUGGY]  safely(val1  /  val2);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safely(val1  /  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  /  val2);	  safely(val1    >>    val2);    	non-compiled	[CE]  cannot  find  symbol	573	None	replace
1179	[BUG]  [BUGGY]  safe(val1  +  val2);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  +  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  +  val2);	  safely(val1    >>    val2);    	non-compiled	[CE]  cannot  find  symbol	573	None	replace
1180	[BUG]  [BUGGY]  safely(val1  <  val2);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safely(val1  <  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val1  <  val2);	  safely(val1    >>    val2);    	non-compiled	[CE]  cannot  find  symbol	573	None	replace
1181	[BUG]  [BUGGY]  safely(val2  >>  val1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safely(val2  >>  val1);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safely(val2  >>  val1);	  safely(val1    >>    val2);    	non-compiled	[CE]  cannot  find  symbol	573	None	replace
1182	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  ++val1)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	200	None	replace
1183	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0,  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	200	None	replace
1184	[BUG]  [BUGGY]  int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	200	None	replace
1185	[BUG]  [BUGGY]  long  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	200	None	replace
1186	[BUG]  [BUGGY]  long  val1  =  1L;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  1L;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  1L;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    1;    val2    <    val1.length;    ++val2)    {    if(val2    ==    val2)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	200	None	replace
1187	[BUG]  [BUGGY]  safeMultiply(val1.longValue(),  val2.longValue())  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1.longValue(),  val2.longValue())  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1.longValue(),  val2.longValue())  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	212	None	replace
1188	[BUG]  [BUGGY]  safeMultiply(val1.longValue(),  val2.longValue())  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1.longValue(),  val2.longValue())  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1.longValue(),  val2.longValue())  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    ==    val2)    {    return    -1;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	212	None	replace
1189	[BUG]  [BUGGY]  long  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  not  a  statement	703	None	replace
1190	[BUG]  [BUGGY]  for(int  val1  =  1;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2!=  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	703	None	replace
1191	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	703	None	replace
1192	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2!=    val1.length;    val2++)    {    if(val2    >=    0)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	703	None	replace
1193	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *       "    +    val2);    }    	non-compiled	[CE]  orphaned  case	168	None	replace
1194	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  <  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *       "    +    val2);    }    	non-compiled	[CE]  orphaned  case	168	None	replace
1195	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val1++)  {  if(val1  >  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *       "    +    val2);    }    	non-compiled	[CE]  orphaned  case	168	None	replace
1196	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  *   "  +  val2);  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +   "    *       "    +    val2);    }    	non-compiled	[CE]  	168	None	replace
1197	[BUG]  [BUGGY]  long  val2  =(long)Math.floor(val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val2  =(long)Math.floor(val1);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val2  =(long)Math.floor(val1);	  return    -1;    int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	60	None	replace
1198	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =(int)Math.floor(val1);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =(int)Math.floor(val1);	  return    -1;    int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	60	None	replace
1199	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  int  val2  =(int)Math.floor(val1);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  int  val2  =(int)Math.floor(val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  int  val2  =(int)Math.floor(val1);  }	  return    -1;    int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	60	None	replace
1200	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  int  val2  =(int)Math.floor(val1);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  ==  val2)  {  return  -1;  int  val2  =(int)Math.floor(val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1;  int  val2  =(int)Math.floor(val1);  }	  return    -1;    int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	60	None	replace
1201	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  int  val2  =(int)Math.floor(val1);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1!=  val2)  {  return  -1;  int  val2  =(int)Math.floor(val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  -1;  int  val2  =(int)Math.floor(val1);  }	  return    -1;    int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	60	None	replace
1202	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =(int)Math.floor(val1,  val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =(int)Math.floor(val1,  val2);	  return    -1;    int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	60	None	replace
1203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  return    -1;    int    val2    =(int)Math.floor(val1);    	compilable	  [FE]  AssertionFailedError  	60	1	replace
1204	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [FE]  AssertionFailedError  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  }  else  if(val2  ==  val1)  {  throw  new  ArithmeticException( " ");  }	  return    -1;    int    val2    =(int)Math.floor(val1);    	compilable	  [FE]  AssertionFailedError  	60	1	replace
1205	[BUG]  [BUGGY]  int  val2  =(int)Math.floor(val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  int  val2  =(int)Math.floor(val2);  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	int  val2  =(int)Math.floor(val2);	  return    -1;    int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	60	None	replace
1206	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  int  val2  =(int)Math.floor(val2);  }  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >=  val2)  {  return  -1;  int  val2  =(int)Math.floor(val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  int  val2  =(int)Math.floor(val2);  }	  return    -1;    int    val2    =(int)Math.floor(val1);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	60	None	replace
1207	[BUG]  [BUGGY]  Integer  val2  =  safeMultiply(val2,  val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  Integer  val2  =  safeMultiply(val2,  val1);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	Integer  val2  =  safeMultiply(val2,  val1);	  Integer    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	493	None	replace
1208	[BUG]  [BUGGY]  Integer  val2  =  safeMultiply(val1,  val2,  val1);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  Integer  val2  =  safeMultiply(val1,  val2,  val1);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	Integer  val2  =  safeMultiply(val1,  val2,  val1);	  Integer    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	493	None	replace
1209	[BUG]  [BUGGY]  Integer  val2  =  safeMultiply(val1,  val2)-  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  Integer  val2  =  safeMultiply(val1,  val2)-  1;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	Integer  val2  =  safeMultiply(val1,  val2)-  1;	  Integer    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	493	None	replace
1210	[BUG]  [BUGGY]  Integer  val2  =  safeMultiply(val1,  val2,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  Integer  val2  =  safeMultiply(val1,  val2,  val2);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	Integer  val2  =  safeMultiply(val1,  val2,  val2);	  Integer    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	493	None	replace
1211	[BUG]  [BUGGY]  Integer  val1  =  safeMultiply(val1,  val2);  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  Integer  val1  =  safeMultiply(val1,  val2);  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	Integer  val1  =  safeMultiply(val1,  val2);	  Integer    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	493	None	replace
1212	[BUG]  [BUGGY]  Integer  val2  =  safeMultiply(val1,  val2)+  1;  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  Integer  val2  =  safeMultiply(val1,  val2)+  1;  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	Integer  val2  =  safeMultiply(val1,  val2)+  1;	  Integer    val2    =    safeMultiply(val1,    val2);    	non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	493	None	replace
1213	[BUG]  [BUGGY]  return(val1  +  val2)?  -1  :  -1L;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  +  val2)?  -1  :  -1L;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  +  val2)?  -1  :  -1L;	  return(val1    +    val2)?    -1    :    -val2;    	non-compiled	[CE]  incompatible  types	439	None	replace
1214	[BUG]  [BUGGY]  return(val1  +  val2)?  -1  :  -1;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  +  val2)?  -1  :  -1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  +  val2)?  -1  :  -1;	  return(val1    +    val2)?    -1    :    -val2;    	non-compiled	[CE]  incompatible  types	439	None	replace
1215	[BUG]  [BUGGY]  return(val1,  val2)?  -1  :  -val2;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1,  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1,  val2)?  -1  :  -val2;	  return(val1    +    val2)?    -1    :    -val2;    	non-compiled	[CE]  ')'  expected	439	None	replace
1216	[BUG]  [BUGGY]  return(val1  *  val2)?  -1  :  -val2;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  *  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  *  val2)?  -1  :  -val2;	  return(val1    +    val2)?    -1    :    -val2;    	non-compiled	[CE]  incompatible  types	439	None	replace
1217	[BUG]  [BUGGY]  return(val2  +  val1)?  -1  :  -val1;  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val2  +  val1)?  -1  :  -val1;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val2  +  val1)?  -1  :  -val1;	  return(val1    +    val2)?    -1    :    -val2;    	non-compiled	[CE]  incompatible  types	439	None	replace
1218	[BUG]  [BUGGY]  return(val1  /  val2)?  -1  :  -val2;  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  /  val2)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  /  val2)?  -1  :  -val2;	  return(val1    +    val2)?    -1    :    -val2;    	non-compiled	[CE]  incompatible  types	439	None	replace
1219	[BUG]  [BUGGY]  return(val1  +  val1)?  -1  :  -val2;  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  return(val1  +  val1)?  -1  :  -val2;  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  +  val1)?  -1  :  -val2;	  return(val1    +    val2)?    -1    :    -val2;    	non-compiled	[CE]  incompatible  types	439	None	replace
1220	[BUG]  [BUGGY]  safe(val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]          StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	637	None	replace
1221	[BUG]  [BUGGY]  safe(val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]            StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	637	None	replace
1222	[BUG]  [BUGGY]  safe(val1)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]              StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1)  {  return  -val1;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	637	None	replace
1223	[BUG]  [BUGGY]  safe(val1)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [CE]  ';'  expected  [FE]                StackOverflowError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1)  {  return  -1L;  }  else  {  safeMultiply(val2,  val1);  }	  safely(val1)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  ';'  expected	637	None	replace
1224	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	124	None	replace
1225	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	124	None	replace
1226	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  ==  1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  ==  1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2.length;  val2++)  {  if(val1  ==  1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	124	None	replace
1227	[BUG]  [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	124	None	replace
1228	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2!=  1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	124	None	replace
1229	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  >=  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  orphaned  case	124	None	replace
1230	[BUG]  [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0,  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  	124	None	replace
1231	[BUG]  [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [CE]  >  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	long  val1  =  0L;  val2  <  val1.length;  val2++)  {  if(val2  ==  1)  {  throw  new  ArithmeticException( " ");  }	  for(int    val1    =    0;    val2    <    val1.length;    val2++)    {    if(val2    ==    1)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  >  expected	124	None	replace
1232	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1233	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1234	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1235	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1236	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1237	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1238	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1239	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1240	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1241	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1242	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val3,  val1);  }  [CE]  cannot  find  symbol  val3  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val3,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val3,  val1);  }	  	non-compiled	[CE]  cannot  find  symbol  val3	335	None	add
1243	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1244	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1245	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1246	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                  StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1247	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1248	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]                    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val2  ==  val1)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	335	1	add
1249	[BUG]  [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]                      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  if(val1  ==  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        ==        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    ==    val2)    {    return    -val2;    }    else    {    safeMultiply(val2,    val1);    }    if(val1  ==  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	335	None	add
1250	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  >  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val2  >  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1.    val2);    }    	compilable	  [FE]  StackOverflowError  	723	1	replace
1251	[BUG]  [BUGGY]  if(val2  >  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val2  >  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val2  >  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1.    val2);    }    	compilable	  [FE]  StackOverflowError  	723	1	replace
1252	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1.  val2);  }  [CE]  long  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1.  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1.  val2);  }	  if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1    >    val2)    {    return    -val2;    }    else    {    safeMultiply(val1.    val2);    }    	non-compiled	[CE]  long  cannot  be  dereferenced	723	None	replace
1253	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  safeMultiply(val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val1.length;  ++val1)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2!=    val1.length;    ++val2)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	491	None	replace
1254	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  ==  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2!=    val1.length;    ++val2)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	491	None	replace
1255	[BUG]  [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  ++val1)  {  safeMultiply(val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2!=  val2.length;  ++val1)  {  safeMultiply(val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2!=  val2.length;  ++val1)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2!=    val1.length;    ++val2)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	491	None	replace
1256	[BUG]  [BUGGY]  for(int  val1  =  1;  val2!=  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2!=  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2!=  val1.length;  ++val2)  {  safeMultiply(val2,  val1);  }	  for(int    val1    =    0;    val2!=    val1.length;    ++val2)    {    safeMultiply(val2,    val1);    }    	non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	491	None	replace
1257	[BUG]  [BUGGY]  safe(val1))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2))    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	524	None	replace
1258	[BUG]  [BUGGY]  safe(val1  >  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  >  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  >  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2))    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	524	None	replace
1259	[BUG]  [BUGGY]  safe(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  >  val2))  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2))    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	524	None	replace
1260	[BUG]  [BUGGY]  safeMultiply(val1,  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safeMultiply(val1,  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safeMultiply(val1,  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2))    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	524	None	replace
1261	[BUG]  [BUGGY]  safe(val1,  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1,  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1,  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2))    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	524	None	replace
1262	[BUG]  [BUGGY]  safe(val1  <  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  <  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  <  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2))    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  ';'  expected	524	None	replace
1263	[BUG]  [BUGGY]  safe(val1  <  =  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  safe(val1  <  =  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	safe(val1  <  =  val2))  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  safely(val1    >    val2))    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    	non-compiled	[CE]  illegal  start  of  expression	524	None	replace
1264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1265	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1266	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  >>  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  incompatible  types	487	None	add
1267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1268	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1!=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1270	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1272	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1274	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1276	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1277	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  [Delete]  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  [Delete]  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  [Delete]  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  ')'  expected	487	None	add
1278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1279	[BUG]  [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        >=        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    >=    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  AssertionFailedError  	487	1	add
1280	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1,  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +    	non-compiled	[CE]  	613	None	replace
1281	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +    	non-compiled	[CE]  illegal  start  of  expression	613	None	replace
1282	[BUG]  [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  1;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +    	non-compiled	[CE]  illegal  start  of  expression	613	None	replace
1283	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +    	non-compiled	[CE]  illegal  start  of  expression	613	None	replace
1284	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +    	non-compiled	[CE]  illegal  start  of  expression	613	None	replace
1285	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val2;  val1++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  }	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +    	non-compiled	[CE]  illegal  start  of  expression	613	None	replace
1286	[BUG]  [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +    	non-compiled	[CE]  illegal  start  of  expression	613	None	replace
1287	[BUG]  [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	for(int  val1  =  0L;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  +	  for(int    val1    =    0;    val2    <    val1;    val2++)    {    if(val1    >    val2)    {    throw    new    ArithmeticException(   "Multiplication    overflows    a    long:   "    +    val1    +    	non-compiled	[CE]  illegal  start  of  expression	613	None	replace
1288	[BUG]  [BUGGY]  while(val1  >  val2)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]    ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  >  val2)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >  val2)  {  if(val2  >=  val1)  {  throw  new  ArithmeticException( " ");  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	11	None	replace
1289	[BUG]  [BUGGY]  while(val1  >  val2)  {  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]      ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  >  val2)  {  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >  val2)  {  if(val2  <  val1)  {  throw  new  ArithmeticException( " ");  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	11	None	replace
1290	[BUG]  [BUGGY]  while(val1  >  val2)  {  if(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]        ArithmeticException    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  while(val1  >  val2)  {  if(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	while(val1  >  val2)  {  if(val2!=  val1)  {  throw  new  ArithmeticException( " ");  }	          if(val1    >=    val2)    {    throw    new    ArithmeticException(       "       ");    }    if(val1    >=    val2)    {    throw    new    ArithmeticException(   "       ");    }    	non-compiled	[CE]  orphaned  case	11	None	replace
1291	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
1292	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
1293	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
1294	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  <  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
1295	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
1296	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
1297	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
1298	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val2,  val1);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
1299	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [CE]  <identifier>  expected  [FE]            StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  <  val2)  {  return  -val2.;  }  else  {  safeMultiply(val1,  val2);  }	  	non-compiled	[CE]  <identifier>  expected	473	None	add
1300	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
1301	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val2  <  val1)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
1302	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
1303	[BUG]  [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                StackOverflowError    [CONTEXT]      public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:      [BUGGY]  if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val2);    }    if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val1);  }  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]      case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException(     "Multiplication  overflows  a  long:       "  +  val1  +       "  *       "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1        <        val2)        {        return        -val2;        }        else        {        safeMultiply(val1,        val2);        }        if(val1    <    val2)    {    return    -val2;    }    else    {    safeMultiply(val1,    val1);    }    if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	  	compilable	  [FE]  StackOverflowError  	473	1	add
