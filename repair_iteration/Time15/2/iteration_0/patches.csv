bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  val2)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  orphaned  case	4	None	add
2	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  val2)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  orphaned  case	4	None	add
3	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  orphaned  case	4	None	add
4	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2!=  val2)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  orphaned  case	4	None	add
5	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  orphaned  case	4	None	add
6	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]              AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  orphaned  case	4	None	add
7	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  orphaned  case	4	None	add
8	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]                  AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  ==  0)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  orphaned  case	4	None	add
9	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }  [CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)  [FE]                    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  ++val2)  {  safeMultiply(val1,  val2);  }		non-compiled	[CE]  variable  val1  is  already  defined  in  method  safeMultiply(long,int)	4	None	add
10	[BUG]  [BUGGY]    long  val2  =  val1.longValue();  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]                      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    long  val2  =  val1.longValue();  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    long  val2  =  val1.longValue();		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	4	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  return  -1;  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return  -1;	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
12	[BUG]  [BUGGY]  return  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  return  -1;  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1;	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  return  -1L;  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return  -1L;	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
14	[BUG]  [BUGGY]  return  -1L;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  return  -1L;  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return  -1L;	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
16	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
17	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  StackOverflowError  	3	1	replace
18	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  StackOverflowError  	3	1	replace
19	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  StackOverflowError  	3	1	replace
20	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]            AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  StackOverflowError  	3	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
22	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
24	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
25	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                  AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  StackOverflowError  	3	1	replace
26	[BUG]  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  StackOverflowError  [FE]                  AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  <  val2)  {  return  -val2;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  StackOverflowError  	3	1	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
28	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
30	[BUG]  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1!=  val2)  {  return  -1;  }  else  {  safeMultiply(val1,  val2);  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
31	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  orphaned  case	4	None	add
32	[BUG]  [BUGGY]    int  val2  =  safeMultiply(val1,  val2);  [CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    int  val2  =  safeMultiply(val1,  val2);  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    int  val2  =  safeMultiply(val1,  val2);		non-compiled	[CE]  variable  val2  is  already  defined  in  method  safeMultiply(long,int)	4	None	add
33	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -1;  }		non-compiled	[CE]  orphaned  case	4	None	add
34	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -1;  }		non-compiled	[CE]  orphaned  case	4	None	add
35	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  return  -val2;  }		non-compiled	[CE]  orphaned  case	4	None	add
36	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [CE]  orphaned  case  [FE]              AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >=  val2)  {  return  -1;  }		non-compiled	[CE]  orphaned  case	4	None	add
37	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [CE]  orphaned  case  [FE]                AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  0;  }		non-compiled	[CE]  orphaned  case	4	None	add
38	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }		non-compiled	[CE]  orphaned  case	4	None	add
39	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }		compilable	  [FE]  ArithmeticException  	4	1	add
40	[BUG]  [BUGGY]    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [FE]  ArithmeticException  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    if(val1  >=  val2)  {  throw  new  ArithmeticException( " ");  }		compilable	  [FE]  ArithmeticException  	4	1	add
41	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1;  val2++)  {  if(val1  >  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }		non-compiled	[CE]  orphaned  case	4	None	add
42	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }		compilable	  [FE]  ArithmeticException  	4	1	add
43	[BUG]  [BUGGY]    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [FE]  ArithmeticException  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    if(val1  >=  val2)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long: "  +  val1  + "  * "  +  val2);  }		compilable	  [FE]  ArithmeticException  	4	1	add
44	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  val2++)  {  if(val2  >=  0)  {  return  -val1;  }		non-compiled	[CE]  orphaned  case	4	None	add
45	[BUG]  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [CE]  [FE]              AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]    for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]  return  -val1;  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	    for(int  val1  =  0;  val2  <  val1.length;  val2  +=  val2.length;)  {  if(val1  +  val2)  {  throw  new  ArithmeticException( " ");  }		non-compiled	[CE]  	4	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >  val2)  {  return  -val1;  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
47	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >  val2)  {  return  -val1;  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  -val1;  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -val1;  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
49	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >=  val2)  {  return  -val1;  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -val1;  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >=  val2)  {  return  -1;  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
51	[BUG]  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >=  val2)  {  return  -1;  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >=  val2)  {  return  -1;  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  ==  val2)  {  return  -1;  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
53	[BUG]  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  ==  val2)  {  return  -1;  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  ==  val2)  {  return  -1;  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	if(val1  >  val2)  {  return  -1;  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
55	[BUG]  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  if(val1  >  val2)  {  return  -1;  }  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	if(val1  >  val2)  {  return  -1;  }	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	add	return(val1  >=  val2)?  -1  :  -val1;	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
57	[BUG]  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  public  static  long  safeMultiply(long  val1,  int  val2)  {  switch  (val2)  {  case  -1:  [BUGGY]  return(val1  >=  val2)?  -1  :  -val1;  [BUGGY]  case  0:  return  0L;  case  1:  return  val1;  }  long  total  =  val1  *  val2;  if  (total  /  val2  !=  val1)  {  throw  new  ArithmeticException( "Multiplication  overflows  a  long:   "  +  val1  +   "  *   "  +  val2);  }  return  total;  [CLASS]  FieldUtils  [METHOD]  safeMultiply  [RETURN_TYPE]  long  long  val1  int  val2  [VARIABLES]  boolean  long  total  val1  int  val2  	projects/Time15/src/main/java/org/joda/time/field/FieldUtils.java	1.0	138	138	1	replace	return(val1  >=  val2)?  -1  :  -val1;	return  -val1;  	compilable	  [FE]  AssertionFailedError  	3	1	replace
