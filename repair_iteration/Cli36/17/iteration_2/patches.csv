bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getValue(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getValue(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getValue(),  opt);	  Option    requiredOpts    =(Option)opt.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
2	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getKey();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getKey();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getKey();	  Option    requiredOpts    =(Option)opt.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
3	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getValue()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getValue()  +  1;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getValue()  +  1;	  Option    requiredOpts    =(Option)opt.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
4	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  opt,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  opt,  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getOption(),  opt,  longOpts);	  Option    requiredOpts    =(Option)opt.getOption(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
5	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  longOpts,  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getOption(),  longOpts,  shortOpts);	  Option    requiredOpts    =(Option)opt.getOption(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
6	[BUG]  [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt)  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt)  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	shortOpts.put(opt.getLongOpt(),  opt)	  shortOpts.put(opt.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
7	[BUG]  [BUGGY]  shortOpts.put(opt.getUpperOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  shortOpts.put(opt.getUpperOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	shortOpts.put(opt.getUpperOpt(),  opt);	  shortOpts.put(opt.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
8	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)&&  shortOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)&&  shortOpts.contains(key))  {	  if(requiredOpts.contains(key)&&    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
9	[BUG]  [BUGGY]  if(shortOpts.contains(key)&&  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(shortOpts.contains(key)&&  requiredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(shortOpts.contains(key)&&  requiredOpts.contains(key))  {	  if(requiredOpts.contains(key)&&    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
10	[BUG]  [BUGGY]  ShortOpts  requiredOpts  =  longOpts.get(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts  requiredOpts  =  longOpts.get(opt.getLongOpt());  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts  requiredOpts  =  longOpts.get(opt.getLongOpt());	  if(opt.isRequired())    {    longOpts.put(opt.getLongOpt(),    opt);    }    else    {    shortOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
11	[BUG]  [BUGGY]  ShortOpts  requiredOpts  =  longOpts.get(opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts  requiredOpts  =  longOpts.get(opt.getLongOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts  requiredOpts  =  longOpts.get(opt.getLongOpt(),  opt);	  if(opt.isRequired())    {    longOpts.put(opt.getLongOpt(),    opt);    }    else    {    shortOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
12	[BUG]  [BUGGY]  Option  requiredOpts  =  optionGroups.get(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  optionGroups.get(opt.getLongOpt());  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  optionGroups.get(opt.getLongOpt());	  if(opt.isRequired())    {    longOpts.put(opt.getLongOpt(),    opt);    }    else    {    shortOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
13	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  opt,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  opt,  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getOption(),  opt,  shortOpts);	  Option    requiredOpts    =(Option)opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
14	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  shortOpts,  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getOption(),  shortOpts,  longOpts);	  Option    requiredOpts    =(Option)opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
15	[BUG]  [BUGGY]  longOpts.add(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  longOpts.add(opt.getLongOpt());  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	longOpts.add(opt.getLongOpt());	  if(opt.isRequired())    {    longOpts.add(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
16	[BUG]  [BUGGY]  angleOpts.add(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  angleOpts.add(opt.getLongOpt());  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	angleOpts.add(opt.getLongOpt());	  if(opt.isRequired())    {    longOpts.add(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
17	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Thread.currentThread().setContextClassLoader(this);	  if(opt.isRequired())    {    longOpts.add(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
18	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().removeChild(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Thread.currentThread().getContextClassLoader().removeChild(opt.getLongOpt());  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Thread.currentThread().getContextClassLoader().removeChild(opt.getLongOpt());	  if(opt.isRequired())    {    longOpts.add(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
19	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  opt,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  opt,  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.clone(),  opt,  shortOpts);	  Option    requiredOpts    =(Option)opt.clone(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
20	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  opt,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  opt,  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.clone(),  opt,  longOpts);	  Option    requiredOpts    =(Option)opt.clone(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
21	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRequired(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRequired(),  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRequired(),  shortOpts);	  Option    requiredOpts    =(Option)opt.getRequired();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
22	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRequired(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRequired(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRequired(),  longOpts);	  Option    requiredOpts    =(Option)opt.getRequired();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
23	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRequired(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRequired(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRequired(),  opt);	  Option    requiredOpts    =(Option)opt.getRequired();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
24	[BUG]  [BUGGY]  if(preferredOpts.contains(key)&&  preferredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(preferredOpts.contains(key)&&  preferredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(preferredOpts.contains(key)&&  preferredOpts.contains(key))  {	  if(preferredOpts.contains(key)||    preferredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
25	[BUG]  [BUGGY]  if(preferredOpts.containsKey(key)||  preferredOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(preferredOpts.containsKey(key)||  preferredOpts.containsKey(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(preferredOpts.containsKey(key)||  preferredOpts.containsKey(key))  {	  if(preferredOpts.contains(key)||    preferredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
26	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getOption(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getOption(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getOption(),  longOpts);	  Option    requiredOpts    =    opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
27	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getOption(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getOption(),  shortOpts,  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getOption(),  shortOpts,  longOpts);	  Option    requiredOpts    =    opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
28	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getOption(),  opt,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getOption(),  opt,  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getOption(),  opt,  shortOpts);	  Option    requiredOpts    =    opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
29	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getOption(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getOption(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getOption(),  opt);	  Option    requiredOpts    =    opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
30	[BUG]  [BUGGY]  String  key  =  opt.getValue(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getValue(),  shortOpts);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getValue(),  shortOpts);	  String    key    =    opt.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
31	[BUG]  [BUGGY]  String  key  =  opt.getValue()  + "n ";  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getValue()  + "n ";  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getValue()  + "n ";	  String    key    =    opt.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
32	[BUG]  [BUGGY]  Map  <  String,  Option>  shortOpts  =  opt.getShortOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Map  <  String,  Option>  shortOpts  =  opt.getShortOpt(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Map  <  String,  Option>  shortOpts  =  opt.getShortOpt(),  longOpts);	  Map    <    String,    Option>    shortOpts    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
33	[BUG]  [BUGGY]  Map  <  String,  Option>  shortOpts  =  longOpts.getShortOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Map  <  String,  Option>  shortOpts  =  longOpts.getShortOpt();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Map  <  String,  Option>  shortOpts  =  longOpts.getShortOpt();	  Map    <    String,    Option>    shortOpts    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
34	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOption(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOption(),  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOption(),  shortOpts);	  Option    requiredOpts    =    opt.getRequiredOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
35	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOption(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOption(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOption(),  longOpts);	  Option    requiredOpts    =    opt.getRequiredOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
36	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOption(),  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOption(),  shortOpts;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOption(),  shortOpts;	  Option    requiredOpts    =    opt.getRequiredOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
37	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  longOpts,  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.clone(),  longOpts,  shortOpts);	  Option    requiredOpts    =(Option)opt.clone(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
38	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)&&  opt.isRequired())  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)&&  opt.isRequired())  {	  if(requiredOpts.contains(key)&&    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
39	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)optionGroups.clone(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)optionGroups.clone(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)optionGroups.clone(),  opt);	  Option    requiredOpts    =(Option)optionGroups.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
40	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)longOpts.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)longOpts.clone();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)longOpts.clone();	  Option    requiredOpts    =(Option)optionGroups.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
41	[BUG]  [BUGGY]  Option  shortOpts  =  longOpts.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  longOpts.getLongOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  longOpts.getLongOpt(),  opt);	  Option    shortOpts    =    longOpts.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
42	[BUG]  [BUGGY]  Option  shortOpts  =  longOpts.get(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  longOpts.get(opt.getLongOpt());  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  longOpts.get(opt.getLongOpt());	  Option    shortOpts    =    longOpts.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
43	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpt(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts  shortOpts  =  opt.getShortOpt(),  longOpts);	  ShortOpts    shortOpts    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
44	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  longOpts.getShortOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts  shortOpts  =  longOpts.getShortOpt();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts  shortOpts  =  longOpts.getShortOpt();	  ShortOpts    shortOpts    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
45	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpt(),  longOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpt(),  longOpts;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts  shortOpts  =  opt.getShortOpt(),  longOpts;	  ShortOpts    shortOpts    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
46	[BUG]  [BUGGY]  if(longOpts.contains(key)&&  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(longOpts.contains(key)&&  requiredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(longOpts.contains(key)&&  requiredOpts.contains(key))  {	  if(requiredOpts.contains(key)&&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
47	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)&&  longOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)&&  longOpts.contains(key))  {	  if(requiredOpts.contains(key)&&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
48	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getBaseOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getBaseOpt(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getBaseOpt(),  longOpts);	  Option    shortOpts    =    opt.getBaseOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
49	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpt(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOpt(),  longOpts);	  Option    requiredOpts    =    opt.getRequiredOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
50	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpt(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpt(),  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOpt(),  shortOpts);	  Option    requiredOpts    =    opt.getRequiredOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
51	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpt(),  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpt(),  shortOpts;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOpt(),  shortOpts;	  Option    requiredOpts    =    opt.getRequiredOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
52	[BUG]  [BUGGY]  longOpts.remove(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  longOpts.remove(opt.getLongOpt());  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	longOpts.remove(opt.getLongOpt());	  if(opt.isRequired())    {    longOpts.remove(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
53	[BUG]  [BUGGY]  angleOpts.remove(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  angleOpts.remove(opt.getLongOpt());  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	angleOpts.remove(opt.getLongOpt());	  if(opt.isRequired())    {    longOpts.remove(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
54	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(thenOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Thread.currentThread().setContextClassLoader(thenOpts);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Thread.currentThread().setContextClassLoader(thenOpts);	  if(opt.isRequired())    {    longOpts.remove(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
55	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  preferredOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(optionGroups.containsKey(key)||  preferredOpts.containsKey(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(optionGroups.containsKey(key)||  preferredOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key)||    preferredOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
56	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  preferredOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)&&  preferredOpts.containsKey(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)&&  preferredOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key)||    preferredOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
57	[BUG]  [BUGGY]  String  key  =  opt.getKey(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey(),  shortOpts,  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey(),  shortOpts,  longOpts);	  String    key    =    opt.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
58	[BUG]  [BUGGY]  String  key  =  opt.getKey(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey(),  opt);	  String    key    =    opt.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
59	[BUG]  [BUGGY]  String  key  =  opt.getKey(),  optionGroups);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey(),  optionGroups);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey(),  optionGroups);	  String    key    =    opt.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
60	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOptionGroup(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOptionGroup(),  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOptionGroup(),  shortOpts);	  Option    requiredOpts    =    opt.getRequiredOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
61	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOptionGroup(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOptionGroup(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOptionGroup(),  longOpts);	  Option    requiredOpts    =    opt.getRequiredOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
62	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOptionGroup(),  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOptionGroup(),  shortOpts;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOptionGroup(),  shortOpts;	  Option    requiredOpts    =    opt.getRequiredOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
63	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key)||    requiredOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
64	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequired();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequired();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequired();	  if(opt.isRequired())    {    longOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
65	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(true);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  optionGroups  =  opt.getOptionGroups(true);	  Option    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
66	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  shortOpts);	  Option    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
67	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(option);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  optionGroups  =  opt.getOptionGroups(option);	  Option    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
68	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getLongOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getLongOpt(),  opt);	  Option    shortOpts    =    opt.getLongOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
69	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getLongOpt(),  opt,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getLongOpt(),  opt,  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getLongOpt(),  opt,  longOpts);	  Option    shortOpts    =    opt.getLongOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
70	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOption(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOption(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRequiredOption(),  longOpts);	  Option    requiredOpts    =(Option)opt.getRequiredOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
71	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOption(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOption(),  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRequiredOption(),  shortOpts);	  Option    requiredOpts    =(Option)opt.getRequiredOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
72	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOption(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOption(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRequiredOption(),  opt);	  Option    requiredOpts    =(Option)opt.getRequiredOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
73	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpts(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpts(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts  shortOpts  =  opt.getShortOpts(),  longOpts);	  ShortOpts    shortOpts    =    opt.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
74	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  longOpts.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts  shortOpts  =  longOpts.getShortOpts();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts  shortOpts  =  longOpts.getShortOpts();	  ShortOpts    shortOpts    =    opt.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
75	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpts()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpts()  +  1;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts  shortOpts  =  opt.getShortOpts()  +  1;	  ShortOpts    shortOpts    =    opt.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
76	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpts(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpts(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOpts(),  longOpts);	  Option    requiredOpts    =    opt.getRequiredOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
77	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpts(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpts(),  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOpts(),  shortOpts);	  Option    requiredOpts    =    opt.getRequiredOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
78	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpts(true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpts(true);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOpts(true);	  Option    requiredOpts    =    opt.getRequiredOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
79	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)||  requiredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)||  requiredOpts.contains(key))  {	  if(requiredOpts.containsKey(key)||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
80	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  opt).return  this;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  opt).return  this;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	longOpts.put(opt.getLongOpt(),  opt).return  this;	  longOpts.put(opt.getLongOpt(),    opt)    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
81	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  preferredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)&&  preferredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)&&  preferredOpts.contains(key))  {	  if(requiredOpts.contains(key)&&    preferredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
82	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  preferredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(optionGroups.containsKey(key)&&  preferredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(optionGroups.containsKey(key)&&  preferredOpts.contains(key))  {	  if(requiredOpts.contains(key)&&    preferredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
83	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRequiredOpt(),  opt);	  Option    requiredOpts    =(Option)opt.getRequiredOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
84	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOpt(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRequiredOpt(),  longOpts);	  Option    requiredOpts    =(Option)opt.getRequiredOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
85	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  shortOpts,  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.clone(),  shortOpts,  longOpts);	  Option    requiredOpts    =(Option)opt.clone(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
86	[BUG]  [BUGGY]  String  key  =  opt.getKey()  : "  <   ";  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey()  : "  <   ";  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey()  : "  <   ";	  String    key    =    opt.getKey()    :   "   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
87	[BUG]  [BUGGY]  String  key  =  opt.getKey()  : ", ";  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey()  : ", ";  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey()  : ", ";	  String    key    =    opt.getKey()    :   "   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
88	[BUG]  [BUGGY]  String  key  =  opt.getKey()  : " ",  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey()  : " ",  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey()  : " ",  shortOpts);	  String    key    =    opt.getKey()    :   "   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
89	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  shortOpts.contains(opt))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)||  shortOpts.contains(opt))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)||  shortOpts.contains(opt))  {	  if(requiredOpts.contains(key)||    shortOpts.contains(opt))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
90	[BUG]  [BUGGY]  if(requiredOpts.contains(key)&&  shortOpts.contains(opt))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.contains(key)&&  shortOpts.contains(opt))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)&&  shortOpts.contains(opt))  {	  if(requiredOpts.contains(key)||    shortOpts.contains(opt))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
91	[BUG]  [BUGGY]  if(longOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(longOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(longOpts.containsKey(key)||  requiredOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key)||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
92	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key)||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
93	[BUG]  [BUGGY]  if(longOpts.contains(key)||  requiredOpts.contains(opt))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(longOpts.contains(key)||  requiredOpts.contains(opt))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(longOpts.contains(key)||  requiredOpts.contains(opt))  {	  if(requiredOpts.contains(key)||    longOpts.contains(opt))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
94	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  longOpts.contains(opt))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)||  longOpts.contains(opt))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)||  longOpts.contains(opt))  {	  if(requiredOpts.contains(key)||    longOpts.contains(opt))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
95	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)&&  shortOpts.containsKey(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)&&  shortOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key)||    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
96	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOptionGroup(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOptionGroup(),  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRequiredOptionGroup(),  shortOpts);	  Option    requiredOpts    =(Option)opt.getRequiredOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
97	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOptionGroup(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOptionGroup(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRequiredOptionGroup(),  longOpts);	  Option    requiredOpts    =(Option)opt.getRequiredOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
98	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOptionGroup(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRequiredOptionGroup(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRequiredOptionGroup(),  opt);	  Option    requiredOpts    =(Option)opt.getRequiredOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
99	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  this.longOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  this.longOpts;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt(),  this.longOpts;	  Option    shortOpts    =    opt.getShortOpt(),    longOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
100	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  optionGroups;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  optionGroups;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt(),  optionGroups;	  Option    shortOpts    =    opt.getShortOpt(),    longOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
101	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  opt.longOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  opt.longOpts;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt(),  opt.longOpts;	  Option    shortOpts    =    opt.getShortOpt(),    longOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
102	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts,  optionGroups;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts,  optionGroups;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt(),  longOpts,  optionGroups;	  Option    shortOpts    =    opt.getShortOpt(),    longOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
103	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  opt.hasRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)&&  opt.hasRequired())  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)&&  opt.hasRequired())  {	  if(requiredOpts.contains(key)&&    opt.hasRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
104	[BUG]  [BUGGY]  if(requiredOpts.contains(key)&&  shortOpts.hasRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.contains(key)&&  shortOpts.hasRequired())  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)&&  shortOpts.hasRequired())  {	  if(requiredOpts.contains(key)&&    opt.hasRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
105	[BUG]  [BUGGY]  Map  <  String,  Option>  shortOpts  =  opt.getShortOpts(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Map  <  String,  Option>  shortOpts  =  opt.getShortOpts(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Map  <  String,  Option>  shortOpts  =  opt.getShortOpts(),  longOpts);	  Map    <    String,    Option>    shortOpts    =    opt.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
106	[BUG]  [BUGGY]  Map  <  String,  Option>  shortOpts  =  longOpts.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Map  <  String,  Option>  shortOpts  =  longOpts.getShortOpts();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Map  <  String,  Option>  shortOpts  =  longOpts.getShortOpts();	  Map    <    String,    Option>    shortOpts    =    opt.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
107	[BUG]  [BUGGY]  if(opt.hasRequired()  ||  requiredOpts.containsKey(key)||  opt.hasRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(opt.hasRequired()  ||  requiredOpts.containsKey(key)||  opt.hasRequired())  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(opt.hasRequired()  ||  requiredOpts.containsKey(key)||  opt.hasRequired())  {	  if(requiredOpts.containsKey(key)||    opt.hasRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
108	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.clone()?  null  :  opt.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.clone()?  null  :  opt.clone();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.clone()?  null  :  opt.clone();	  Option    requiredOpts    =(Option)opt.clone()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
109	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  null;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.clone(),  null;	  Option    requiredOpts    =(Option)opt.clone()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
110	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  shortOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key)||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
111	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key)||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
112	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(longOpt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(longOpt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt().remove(longOpt);	  Option    shortOpts    =    opt.getShortOpt().remove(shortOpt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
113	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt().remove(longOpts);	  Option    shortOpts    =    opt.getShortOpt().remove(shortOpt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
114	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt().get(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt().get(opt.getLongOpt());  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt().get(opt.getLongOpt());	  Option    shortOpts    =    opt.getShortOpt().remove(shortOpt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
115	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)&&  requiredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)&&  requiredOpts.contains(key))  {	  if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
116	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getRequiredOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getRequiredOpt(),  longOpts);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getRequiredOpt(),  longOpts);	  Option    shortOpts    =    opt.getRequiredOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
117	[BUG]  [BUGGY]  Map  <  String,  Option>  shortOpts  =  longOpts.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Map  <  String,  Option>  shortOpts  =  longOpts.getLongOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Map  <  String,  Option>  shortOpts  =  longOpts.getLongOpt(),  opt);	  Map    <    String,    Option>    shortOpts    =    longOpts.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
118	[BUG]  [BUGGY]  Map  <  String,  Option>  shortOpts  =  longOpts.get(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Map  <  String,  Option>  shortOpts  =  longOpts.get(opt.getLongOpt());  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Map  <  String,  Option>  shortOpts  =  longOpts.get(opt.getLongOpt());	  Map    <    String,    Option>    shortOpts    =    longOpts.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
119	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  longOpts.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts  shortOpts  =  longOpts.getLongOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts  shortOpts  =  longOpts.getLongOpt(),  opt);	  ShortOpts    shortOpts    =    longOpts.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
120	[BUG]  [BUGGY]  String  key  =  opt.getKey()  + ";n ";  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey()  + ";n ";  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey()  + ";n ";	  String    key    =    opt.getKey()    +   ";   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
121	[BUG]  [BUGGY]  String  key  =  opt.getKey()  + ",; ";  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey()  + ",; ";  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey()  + ",; ";	  String    key    =    opt.getKey()    +   ";   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
122	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(),  shortOpts);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  optionGroups  =  opt.getOptionGroup(),  shortOpts);	  Option    optionGroups    =    opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
123	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(),  longOpts);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  optionGroups  =  opt.getOptionGroup(),  longOpts);	  Option    optionGroups    =    opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
124	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(),  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(),  shortOpts;  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  optionGroups  =  opt.getOptionGroup(),  shortOpts;	  Option    optionGroups    =    opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
125	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getRawOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getRawOpt();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getRawOpt();	  Option    requiredOpts    =(Option)opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
126	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt(),  opt);	  Option    shortOpts    =    opt.getShortOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
127	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts,  optionGroups);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts,  optionGroups);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt(),  longOpts,  optionGroups);	  Option    shortOpts    =    opt.getShortOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
128	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts,  requiredOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt(),  longOpts,  requiredOpts);	  Option    shortOpts    =    opt.getShortOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
129	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  opt,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  opt,  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt(),  opt,  longOpts);	  Option    shortOpts    =    opt.getShortOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
130	[BUG]  [BUGGY]  Map  <  String,  Option>  shortOpts  =  opt.getLongOpt(),  longOpts,  optionGroups);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Map  <  String,  Option>  shortOpts  =  opt.getLongOpt(),  longOpts,  optionGroups);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Map  <  String,  Option>  shortOpts  =  opt.getLongOpt(),  longOpts,  optionGroups);	  Map    <    String,    Option>    shortOpts    =    opt.getLongOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
131	[BUG]  [BUGGY]  Map  <  String,  Option>  shortOpts  =  opt.getLongOpt(),  longOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Map  <  String,  Option>  shortOpts  =  opt.getLongOpt(),  longOpts,  requiredOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Map  <  String,  Option>  shortOpts  =  opt.getLongOpt(),  longOpts,  requiredOpts);	  Map    <    String,    Option>    shortOpts    =    opt.getLongOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
132	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  opt.isRequired()  &&  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.contains(key)||  opt.isRequired()  &&  shortOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)||  opt.isRequired()  &&  shortOpts.contains(key))  {	  if(requiredOpts.contains(key)||    opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
133	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  opt.isRequired()  ||  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(shortOpts.contains(key)||  opt.isRequired()  ||  requiredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(shortOpts.contains(key)||  opt.isRequired()  ||  requiredOpts.contains(key))  {	  if(requiredOpts.contains(key)||    opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
134	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {	  if(requiredOpts.contains(key)||    opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
135	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  opt.getLongOpt(),  longOpts,  optionGroups);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts  shortOpts  =  opt.getLongOpt(),  longOpts,  optionGroups);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts  shortOpts  =  opt.getLongOpt(),  longOpts,  optionGroups);	  ShortOpts    shortOpts    =    opt.getLongOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
136	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  preferredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(optionGroups.containsKey(key)||  preferredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(optionGroups.containsKey(key)||  preferredOpts.contains(key))  {	  if(requiredOpts.containsKey(key)||    preferredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
137	[BUG]  [BUGGY]  if(preferredOpts.containsKey(key)||  preferredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(preferredOpts.containsKey(key)||  preferredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(preferredOpts.containsKey(key)||  preferredOpts.contains(key))  {	  if(requiredOpts.containsKey(key)||    preferredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
138	[BUG]  [BUGGY]  String  key  =  opt.getKey(),  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey(),  longOpts,  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey(),  longOpts,  shortOpts);	  String    key    =    opt.getKey(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
139	[BUG]  [BUGGY]  String  key  =  opt.getKey(),  stringOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey(),  stringOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey(),  stringOpts);	  String    key    =    opt.getKey(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
140	[BUG]  [BUGGY]  Option  neededOpts  =(Option)opt.clone(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  neededOpts  =(Option)opt.clone(),  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  neededOpts  =(Option)opt.clone(),  shortOpts);	  Option    neededOpts    =(Option)opt.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
141	[BUG]  [BUGGY]  Option  neededOpts  =(Option)opt.clone(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  neededOpts  =(Option)opt.clone(),  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  neededOpts  =(Option)opt.clone(),  longOpts);	  Option    neededOpts    =(Option)opt.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
142	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(shortOpts.contains(key)||  shortOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(shortOpts.contains(key)||  shortOpts.contains(key))  {	  if(shortOpts.contains(key)||    requiredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
143	[BUG]  [BUGGY]  longOpts.put(opt.getLowerOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  longOpts.put(opt.getLowerOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	longOpts.put(opt.getLowerOpt(),  opt);	  longOpts.put(opt.getUpperOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
144	[BUG]  [BUGGY]  longOpts.put(opt.getUpperOpt(),  opt)  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  longOpts.put(opt.getUpperOpt(),  opt)  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	longOpts.put(opt.getUpperOpt(),  opt)	  longOpts.put(opt.getUpperOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
145	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(opt);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  optionGroups  =  opt.getOptionGroup(opt);	  Option    optionGroups    =    opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
146	[BUG]  [BUGGY]  if(shortOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(shortOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(shortOpts.containsKey(key)||  requiredOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key)||    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
147	[BUG]  [BUGGY]  if(requiredOpts.contains(key)&&  longOpts.hasRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.contains(key)&&  longOpts.hasRequired())  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)&&  longOpts.hasRequired())  {	  if(requiredOpts.contains(key)&&    opt.hasRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
148	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getUpperOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getUpperOpt();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getUpperOpt();	  Option    requiredOpts    =(Option)opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
149	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getImplicitRequiredOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getImplicitRequiredOpt();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getImplicitRequiredOpt();	  Option    requiredOpts    =(Option)opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
150	[BUG]  [BUGGY]  String  key  =  opt.getValue()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getValue()  +  1;  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getValue()  +  1;	  String    key    =    opt.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
151	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  LongOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.contains(key)||  LongOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)||  LongOpts.contains(key))  {	  if(longOpts.contains(key)||    requiredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
152	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getOptionType());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getOptionType());  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Thread.currentThread().setContextClassLoader(getOptionType());	  if(opt.isRequired())    {    longOpts.add(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
153	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(new  OptionLoader());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Thread.currentThread().setContextClassLoader(new  OptionLoader());  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Thread.currentThread().setContextClassLoader(new  OptionLoader());	  if(opt.isRequired())    {    longOpts.add(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
154	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getObject();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getObject();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getObject();	  Option    requiredOpts    =(Option)opt.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
155	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  longOpts,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  longOpts,  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getOption(),  longOpts,  opt);	  Option    requiredOpts    =(Option)opt.getOption(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
156	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  opt.getLongOpt(),  longOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts  shortOpts  =  opt.getLongOpt(),  longOpts,  requiredOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts  shortOpts  =  opt.getLongOpt(),  longOpts,  requiredOpts);	  ShortOpts    shortOpts    =    opt.getLongOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
157	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getLongOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getLongOpt();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getLongOpt();	  Option    requiredOpts    =    opt.getRequiredOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
158	[BUG]  [BUGGY]  if(opt.hasOpt()  &&  requiredOpts.contains(key)&&  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(opt.hasOpt()  &&  requiredOpts.contains(key)&&  opt.isRequired())  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(opt.hasOpt()  &&  requiredOpts.contains(key)&&  opt.isRequired())  {	  if(requiredOpts.contains(key)&&    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
159	[BUG]  [BUGGY]  if(requiredOpts.contains(key)&&  longOpts.contains(opt))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.contains(key)&&  longOpts.contains(opt))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)&&  longOpts.contains(opt))  {	  if(requiredOpts.contains(key)||    longOpts.contains(opt))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
160	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  optionGroups  =  opt.getOptionGroups(this);	  Option    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
161	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getOption();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getOption();	  Option    requiredOpts    =    opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
162	[BUG]  [BUGGY]  forceRequired(longOpts,  opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  forceRequired(longOpts,  opt.getLongOpt());  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	forceRequired(longOpts,  opt.getLongOpt());	  if(opt.isRequired())    {    longOpts.remove(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
163	[BUG]  [BUGGY]  Option  shortOpts  =  longOpts.getShortOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  longOpts.getShortOpt();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  longOpts.getShortOpt();	  Option    shortOpts    =    longOpts.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
164	[BUG]  [BUGGY]  Option  shortOpts  =  options.getLongOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  options.getLongOpt();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  options.getLongOpt();	  Option    shortOpts    =    longOpts.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
165	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts,  null);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt(),  longOpts,  null);	  Option    shortOpts    =    opt.getShortOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
166	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpts(required);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpts(required);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOpts(required);	  Option    requiredOpts    =    opt.getRequiredOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
167	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpts(optionGroups);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getRequiredOpts(optionGroups);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getRequiredOpts(optionGroups);	  Option    requiredOpts    =    opt.getRequiredOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
168	[BUG]  [BUGGY]  Map  <  String,  Option>  shortOpts  =  opt.getShortOpt(),  longOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Map  <  String,  Option>  shortOpts  =  opt.getShortOpt(),  longOpts;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Map  <  String,  Option>  shortOpts  =  opt.getShortOpt(),  longOpts;	  Map    <    String,    Option>    shortOpts    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
169	[BUG]  [BUGGY]  Option  shortOpts  =(Option)opt.clone(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =(Option)opt.clone(),  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =(Option)opt.clone(),  shortOpts);	  Option    requiredOpts    =(Option)opt.clone(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
170	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getLeadingOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getLeadingOpt();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getLeadingOpt();	  Option    requiredOpts    =(Option)opt.getRequiredOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
171	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(opt.getShortOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(opt.getShortOpt());  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt().remove(opt.getShortOpt());	  Option    shortOpts    =    opt.getShortOpt().remove(shortOpt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
172	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  longOpts,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  longOpts,  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.clone(),  longOpts,  opt);	  Option    requiredOpts    =(Option)opt.clone(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
173	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getLongOpt(),  longOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getLongOpt(),  longOpts,  requiredOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getLongOpt(),  longOpts,  requiredOpts);	  Option    shortOpts    =    opt.getLongOpt(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
174	[BUG]  [BUGGY]  String  key  =  opt.getKey()  : "n ";  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey()  : "n ";  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey()  : "n ";	  String    key    =    opt.getKey()    :   "   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
175	[BUG]  [BUGGY]  shortOpts.put(opt.getRequiredOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  shortOpts.put(opt.getRequiredOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	shortOpts.put(opt.getRequiredOpt(),  opt);	  shortOpts.put(opt.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
176	[BUG]  [BUGGY]  ShortOpts.put(opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  ShortOpts.put(opt.getLongOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	ShortOpts.put(opt.getLongOpt(),  opt);	  shortOpts.put(opt.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
177	[BUG]  [BUGGY]  Option  opt  =  opt.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  opt  =  opt.getOption();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  opt  =  opt.getOption();	  if(opt.isRequired())    {    longOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
178	[BUG]  [BUGGY]  Option  shortOpts  =(Option)opt.getOption(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =(Option)opt.getOption(),  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =(Option)opt.getOption(),  shortOpts);	  Option    requiredOpts    =(Option)opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
179	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)requiredOpts.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)requiredOpts.clone();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)requiredOpts.clone();	  Option    requiredOpts    =(Option)optionGroups.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
180	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)optionGroups.get(opt.getRequiredOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)optionGroups.get(opt.getRequiredOpt());  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)optionGroups.get(opt.getRequiredOpt());	  Option    requiredOpts    =(Option)optionGroups.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
181	[BUG]  [BUGGY]  if(opt.isRequired()  ||  shortOpts.contains(key)||  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(opt.isRequired()  ||  shortOpts.contains(key)||  requiredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(opt.isRequired()  ||  shortOpts.contains(key)||  requiredOpts.contains(key))  {	  if(shortOpts.contains(key)||    requiredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
182	[BUG]  [BUGGY]  if(opt.isRequired())  {  longOpts.put(opt.getUpperOpt(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(opt.isRequired())  {  longOpts.put(opt.getUpperOpt(),  opt);  }  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(opt.isRequired())  {  longOpts.put(opt.getUpperOpt(),  opt);  }	  longOpts.put(opt.getUpperOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
183	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  opt,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  opt,  lengthOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getOption(),  opt,  lengthOpts);	  Option    requiredOpts    =(Option)opt.getOption(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
184	[BUG]  [BUGGY]  String  key  =  opt.getKey()  : "  {   ";  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey()  : "  {   ";  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey()  : "  {   ";	  String    key    =    opt.getKey()    :   "   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
185	[BUG]  [BUGGY]  Option  shortOpts  =(Option)opt.clone(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =(Option)opt.clone(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =(Option)opt.clone(),  opt);	  Option    requiredOpts    =(Option)opt.clone(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
186	[BUG]  [BUGGY]  [Delete]  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  [Delete]  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	[Delete]	  if(opt.isRequired())    {    longOpts.remove(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
187	[BUG]  [BUGGY]  aleger(opt.getLongOpt(),  opt))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  aleger(opt.getLongOpt(),  opt))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	aleger(opt.getLongOpt(),  opt))  {	  if(opt.isRequired())    {    longOpts.remove(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
188	[BUG]  [BUGGY]  aleger(opt.getLongOpt(),  opt)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  aleger(opt.getLongOpt(),  opt)  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	aleger(opt.getLongOpt(),  opt)  {	  if(opt.isRequired())    {    longOpts.remove(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
189	[BUG]  [BUGGY]  aleger(opt.getOpt(),  opt)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  aleger(opt.getOpt(),  opt)  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	aleger(opt.getOpt(),  opt)  {	  if(opt.isRequired())    {    longOpts.remove(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
190	[BUG]  [BUGGY]  if(shortOpts.containsKey(key)||  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(shortOpts.containsKey(key)||  requiredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(shortOpts.containsKey(key)||  requiredOpts.contains(key))  {	  if(requiredOpts.containsKey(key)||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
191	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(optionGroups.containsKey(key)&&  requiredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(optionGroups.containsKey(key)&&  requiredOpts.contains(key))  {	  if(requiredOpts.contains(key)&&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
192	[BUG]  [BUGGY]  if(preferredOpts.contains(key)||  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(preferredOpts.contains(key)||  requiredOpts.contains(key))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(preferredOpts.contains(key)||  requiredOpts.contains(key))  {	  if(preferredOpts.contains(key)||    preferredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
193	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().required();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Thread.currentThread().getContextClassLoader().required();  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Thread.currentThread().getContextClassLoader().required();	  if(opt.isRequired())    {    longOpts.add(opt.getLongOpt());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
194	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getLeadingOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getLeadingOpts();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getLeadingOpts();	  Option    requiredOpts    =    opt.getRequiredOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
195	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  opt,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.clone(),  opt,  lengthOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.clone(),  opt,  lengthOpts);	  Option    requiredOpts    =(Option)opt.clone(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
196	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  requiredOpts.contains(opt))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(shortOpts.contains(key)||  requiredOpts.contains(opt))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(shortOpts.contains(key)||  requiredOpts.contains(opt))  {	  if(requiredOpts.contains(key)||    shortOpts.contains(opt))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
197	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  preferredOpts.contains(opt))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.contains(key)||  preferredOpts.contains(opt))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)||  preferredOpts.contains(opt))  {	  if(requiredOpts.contains(key)||    shortOpts.contains(opt))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
198	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getAssignedValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getAssignedValue();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getAssignedValue();	  Option    requiredOpts    =(Option)opt.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
199	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)this.optionGroups.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)this.optionGroups.clone();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)this.optionGroups.clone();	  Option    requiredOpts    =(Option)optionGroups.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
200	[BUG]  [BUGGY]  String  key  =  opt.getKey(),  opt,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey(),  opt,  shortOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey(),  opt,  shortOpts);	  String    key    =    opt.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
201	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  opt.isRequired()  ||  shortOpts.contains(opt.getLongOpt()))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.contains(key)||  opt.isRequired()  ||  shortOpts.contains(opt.getLongOpt()))  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)||  opt.isRequired()  ||  shortOpts.contains(opt.getLongOpt()))  {	  if(requiredOpts.contains(key)||    opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
202	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(shortOpt.indexOf(short));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(shortOpt.indexOf(short));  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt().remove(shortOpt.indexOf(short));	  Option    shortOpts    =    opt.getShortOpt().remove(shortOpt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
203	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(shortOpt.toString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(shortOpt.toString());  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt().remove(shortOpt.toString());	  Option    shortOpts    =    opt.getShortOpt().remove(shortOpt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
204	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(shortOpt.substring(1));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt().remove(shortOpt.substring(1));  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt().remove(shortOpt.substring(1));	  Option    shortOpts    =    opt.getShortOpt().remove(shortOpt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
205	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpts();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpts();	  Option    shortOpts    =    opt.getBaseOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
206	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(shortOpts.contains(key)||  opt.isRequired())  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(shortOpts.contains(key)||  opt.isRequired())  {	  if(requiredOpts.contains(key)&&    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
207	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  opt,  langOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getOption(),  opt,  langOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getOption(),  opt,  langOpts);	  Option    requiredOpts    =(Option)opt.getOption(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
208	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getLongOpt());  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  optionGroups.get(opt.getLongOpt());	  if(opt.isRequired())    {    longOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
209	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getLongOpt(),  opt);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  optionGroups.get(opt.getLongOpt(),  opt);	  if(opt.isRequired())    {    longOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
210	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getLargerOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getLargerOpt();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getLargerOpt();	  Option    requiredOpts    =(Option)opt.getRequiredOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
211	[BUG]  [BUGGY]  Option  expectedOpts  =(Option)opt.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  expectedOpts  =(Option)opt.clone();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  expectedOpts  =(Option)opt.clone();	  Option    requiredOpts    =(Option)opt.clone()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
212	[BUG]  [BUGGY]  String  key  =  opt.getKey()  + ".; ";  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.getKey()  + ".; ";  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.getKey()  + ".; ";	  String    key    =    opt.getKey()    +   ";   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
213	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(true);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  optionGroups  =  opt.getOptionGroup(true);	  Option    optionGroups    =    opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
214	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroup(option);  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  optionGroups  =  opt.getOptionGroup(option);	  Option    optionGroups    =    opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
215	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  opt);  }  else  {  shortOpts.put(opt.getLongOpt(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  opt);  }  else  {  shortOpts.put(opt.getLongOpt(),  opt);  }  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	longOpts.put(opt.getLongOpt(),  opt);  }  else  {  shortOpts.put(opt.getLongOpt(),  opt);  }	  if(opt.isRequired())    {    longOpts.put(opt.getLongOpt(),    opt);    }    else    {    shortOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
216	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  opt);  }  else  {  requiredOpts.put(opt.getLongOpt(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  opt);  }  else  {  requiredOpts.put(opt.getLongOpt(),  opt);  }  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	longOpts.put(opt.getLongOpt(),  opt);  }  else  {  requiredOpts.put(opt.getLongOpt(),  opt);  }	  if(opt.isRequired())    {    longOpts.put(opt.getLongOpt(),    opt);    }    else    {    shortOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
217	[BUG]  [BUGGY]  if(opt.isRequired())  {  longOpts.put(opt.getLongOpt(),  opt)  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(opt.isRequired())  {  longOpts.put(opt.getLongOpt(),  opt)  }  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(opt.isRequired())  {  longOpts.put(opt.getLongOpt(),  opt)  }	  longOpts.put(opt.getLongOpt(),    opt)    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
218	[BUG]  [BUGGY]  Option  requiredOpts  =  opt.getOption(),  opt,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =  opt.getOption(),  opt,  longOpts);  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =  opt.getOption(),  opt,  longOpts);	  Option    requiredOpts    =    opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
219	[BUG]  [BUGGY]  Option  requiredOpts  =(Option)opt.getAssignedOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  requiredOpts  =(Option)opt.getAssignedOpt();  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  requiredOpts  =(Option)opt.getAssignedOpt();	  Option    requiredOpts    =(Option)opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
220	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  if(requiredOpts.containsKey(key)||  opt.hasLongOpt())  {  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key)||  opt.hasLongOpt())  {	  if(requiredOpts.containsKey(key)||    opt.hasRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
221	[BUG]  [BUGGY]  String  key  =  optionGroups.getValue(opt.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  optionGroups.getValue(opt.getKey());  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  optionGroups.getValue(opt.getKey());	  String    key    =    opt.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
222	[BUG]  [BUGGY]  String  key  =  opt.toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  String  key  =  opt.toString();  [BUGGY]      {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	String  key  =  opt.toString();	  String    key    =    opt.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
223	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts,  requiredOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts,  requiredOpts;  [BUGGY]      if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	Option  shortOpts  =  opt.getShortOpt(),  longOpts,  requiredOpts;	  Option    shortOpts    =    opt.getShortOpt(),    longOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
