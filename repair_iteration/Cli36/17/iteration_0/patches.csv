bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  [BUGGY]  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {	if  (requiredOpts.contains(key))  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
2	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]  if(requiredOpts.containsKey(key))  {  [BUGGY]  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.containsKey(key))  {	if  (requiredOpts.contains(key))  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
3	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  [BUGGY]  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)||  shortOpts.contains(key))  {	if  (requiredOpts.contains(key))  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
4	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  [BUGGY]  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)||  longOpts.contains(key))  {	if  (requiredOpts.contains(key))  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
5	[BUG]  [BUGGY]    [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    [BUGGY]  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	  	if  (requiredOpts.contains(key))  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
6	[BUG]  [BUGGY]    longOpts.put(opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    longOpts.put(opt.getLongOpt(),  opt);  [BUGGY]  if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	    longOpts.put(opt.getLongOpt(),  opt);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	add
7	[BUG]  [BUGGY]    Option  requiredOpts  =(Option)opt.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    Option  requiredOpts  =(Option)opt.getOption();  [BUGGY]  if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	    Option  requiredOpts  =(Option)opt.getOption();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	add
8	[BUG]  [BUGGY]    Option  requiredOpts  =  opt.getOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    Option  requiredOpts  =  opt.getOptionGroup();  [BUGGY]  if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	    Option  requiredOpts  =  opt.getOptionGroup();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	add
9	[BUG]  [BUGGY]    Option  requiredOpts  =(Option)opt.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    Option  requiredOpts  =(Option)opt.clone();  [BUGGY]  if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	    Option  requiredOpts  =(Option)opt.clone();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	add
10	[BUG]  [BUGGY]    Option  requiredOpts  =  opt.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    Option  requiredOpts  =  opt.getOption();  [BUGGY]  if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	    Option  requiredOpts  =  opt.getOption();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	add
11	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]  if(requiredOpts.contains(key)||  opt.isRequired())  {  [BUGGY]  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)||  opt.isRequired())  {	if  (requiredOpts.contains(key))  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
12	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  opt.hasRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]  if(requiredOpts.contains(key)||  opt.hasRequired())  {  [BUGGY]  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)||  opt.hasRequired())  {	if  (requiredOpts.contains(key))  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
13	[BUG]  [BUGGY]    ShortOpts  shortOpts  =  opt.getLongOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    ShortOpts  shortOpts  =  opt.getLongOpt();  [BUGGY]  if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	    ShortOpts  shortOpts  =  opt.getLongOpt();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	add
14	[BUG]  [BUGGY]    String  key  =  opt.getKey();  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    String  key  =  opt.getKey();  [BUGGY]  if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	    String  key  =  opt.getKey();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	add
15	[BUG]  [BUGGY]    Option  requiredOpts  =(Option)opt.getOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    Option  requiredOpts  =(Option)opt.getOptionGroup();  [BUGGY]  if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	    Option  requiredOpts  =(Option)opt.getOptionGroup();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	add
16	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  preferredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]  if(requiredOpts.contains(key)||  preferredOpts.contains(key))  {  [BUGGY]  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	if(requiredOpts.contains(key)||  preferredOpts.contains(key))  {	if  (requiredOpts.contains(key))  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
17	[BUG]  [BUGGY]    Map  <  String,  Option>  shortOpts  =  opt.getLongOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    Map  <  String,  Option>  shortOpts  =  opt.getLongOpt();  [BUGGY]  if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	    Map  <  String,  Option>  shortOpts  =  opt.getLongOpt();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	add
18	[BUG]  [BUGGY]    Option  shortOpts  =  opt.getLongOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    Option  shortOpts  =  opt.getLongOpt();  [BUGGY]  if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	    Option  shortOpts  =  opt.getLongOpt();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	add
19	[BUG]  [BUGGY]    Option  shortOpts  =  opt.getShortOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]    if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  [BUGGY]    Option  shortOpts  =  opt.getShortOpt();  [BUGGY]  if  (requiredOpts.contains(key))    {  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	165	166	1	replace	    Option  shortOpts  =  opt.getShortOpt();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	add
