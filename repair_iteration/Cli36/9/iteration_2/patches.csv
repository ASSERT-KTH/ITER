bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Option  option  :  shortOpts)  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts)  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts)  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    longOpts)    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
2	[BUG]  [BUGGY]  For(Option  option  :  shortOpts)  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  For(Option  option  :  shortOpts)  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	For(Option  option  :  shortOpts)  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    longOpts)    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
3	[BUG]  [BUGGY]  for(Option  option  :  shortOpts)  {  if(lengthOpts!=  null)  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts)  {  if(lengthOpts!=  null)  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts)  {  if(lengthOpts!=  null)  {  requiredOpts.add(option);  }	  if(lengthOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
4	[BUG]  [BUGGY]  if(lengthOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(lengthOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(lengthOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }	  if(lengthOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
5	[BUG]  [BUGGY]  if(lengthOpts  ==  null)  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(lengthOpts  ==  null)  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(lengthOpts  ==  null)  {  requiredOpts.add(option);  }	  if(lengthOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
6	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    group.values())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
7	[BUG]  [BUGGY]  for(Option  option  :  this.longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  this.longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  this.longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    group.values())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
8	[BUG]  [BUGGY]  if(shortOpts.size()  >  0)  {  addOption(option,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts.size()  >  0)  {  addOption(option,  requiredOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts.size()  >  0)  {  addOption(option,  requiredOpts);  }	  if(requiredOpts.size()    >    0)    {    addOption(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
9	[BUG]  [BUGGY]  if(requiredOpts  ==  null)  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts  ==  null)  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts  ==  null)  {  requiredOpts.add(option);  }	  if(requiredOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
10	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }	  if(requiredOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
11	[BUG]  [BUGGY]  addOption(longOpts,  option,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(longOpts,  option,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(longOpts,  option,  group);	  addOption(longOpts,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
12	[BUG]  [BUGGY]  Option  optionGroup  =  option.getOptionGroup(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  optionGroup  =  option.getOptionGroup(),  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  optionGroup  =  option.getOptionGroup(),  group);	  Option    optionGroup    =    option.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
13	[BUG]  [BUGGY]  Option  optionGroup  =  option.getOptionGroup(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  optionGroup  =  option.getOptionGroup(group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  optionGroup  =  option.getOptionGroup(group);	  Option    optionGroup    =    option.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
14	[BUG]  [BUGGY]  Option  optionGroup  =  option.getOptionGroup(),  group;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  optionGroup  =  option.getOptionGroup(),  group;  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  optionGroup  =  option.getOptionGroup(),  group;	  Option    optionGroup    =    option.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
15	[BUG]  [BUGGY]  if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  requiredOpts.add(option);  }	  if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
16	[BUG]  [BUGGY]  if(requiredOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }	  if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
17	[BUG]  [BUGGY]  if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }	  if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
18	[BUG]  [BUGGY]  longOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  longOpts.put(option.getKey(),  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	longOpts.put(option.getKey(),  shortOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    longOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
19	[BUG]  [BUGGY]  LongOpts  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  LongOpts  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	LongOpts  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    longOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
20	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    longOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
21	[BUG]  [BUGGY]  addOptionGroup(option,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOptionGroup(option,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOptionGroup(option,  group);	  addOption(group,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
22	[BUG]  [BUGGY]  addOption(opt,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(opt,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(opt,  group);	  addOption(group,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
23	[BUG]  [BUGGY]  addOption(option,  shortOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option,  shortOpts,  requiredOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  shortOpts,  requiredOpts);	  addOption(option,    group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
24	[BUG]  [BUGGY]  addOption(option,  requiredOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option,  requiredOpts,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  requiredOpts,  group);	  addOption(option,    group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
25	[BUG]  [BUGGY]  for(Option  group  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    option    :    shortOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
26	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }	  if(longOpts!=    null)    {    requiredOpts.add(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
27	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.add(option,  longOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.add(option,  longOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  requiredOpts.add(option,  longOpts);  }	  if(longOpts!=    null)    {    requiredOpts.add(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
28	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }	  if(longOpts!=    null)    {    requiredOpts.put(option.getKey(),    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
29	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }	  if(longOpts!=    null)    {    requiredOpts.put(option.getKey(),    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
30	[BUG]  [BUGGY]  addOption(option.getValue(),  group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getValue(),  group,  requiredOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getValue(),  group,  requiredOpts);	  addOption(option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
31	[BUG]  [BUGGY]  addOption(option.getValue(),  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getValue(),  group,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getValue(),  group,  shortOpts);	  addOption(option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
32	[BUG]  [BUGGY]  addOption(option.getValue(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getValue(),  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getValue(),  shortOpts);	  addOption(option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
33	[BUG]  [BUGGY]  addOption(group.getValue(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(group.getValue(),  option);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(group.getValue(),  option);	  addOption(option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
34	[BUG]  [BUGGY]  For(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  For(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	For(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
35	[BUG]  [BUGGY]  while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
36	[BUG]  [BUGGY]  while(shortOpts!=  null  &&  shortOpts.size()  >  0)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  while(shortOpts!=  null  &&  shortOpts.size()  >  0)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	while(shortOpts!=  null  &&  shortOpts.size()  >  0)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
37	[BUG]  [BUGGY]  For(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  For(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	For(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }	  for(Option    option    :    langOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
38	[BUG]  [BUGGY]  if(option!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }	  if(option!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
39	[BUG]  [BUGGY]  fields.put(option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  fields.put(option.getKey(),  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	fields.put(option.getKey(),  group);	  if(option!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
40	[BUG]  [BUGGY]  for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    option    :    group.values())    {    requiredOpts.put(option.getKey(),    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
41	[BUG]  [BUGGY]  for(Option  shortOpts  :  option.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  shortOpts  :  option.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  shortOpts  :  option.values())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    option    :    group.values())    {    requiredOpts.put(option.getKey(),    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
42	[BUG]  [BUGGY]  addOption(option,  group,  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option,  group,  shortOpts,  longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  group,  shortOpts,  longOpts);	  addOption(option,    group,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
43	[BUG]  [BUGGY]  addOption(longOpts,  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(longOpts,  group,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(longOpts,  group,  shortOpts);	  addOption(option,    group,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
44	[BUG]  [BUGGY]  requiredOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  requiredOpts.put(option.getKey(),  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	requiredOpts.put(option.getKey(),  shortOpts);	  requiredOpts.put(option.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
45	[BUG]  [BUGGY]  if(option.getShortOpts()!=  null)  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option.getShortOpts()!=  null)  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option.getShortOpts()!=  null)  {  requiredOpts.put(option.getKey(),  option);  }	  requiredOpts.put(option.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
46	[BUG]  [BUGGY]  if(shortOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }	  if(longOpts!=    null    &&    shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
47	[BUG]  [BUGGY]  if(requiredOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }	  if(longOpts!=    null    &&    shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
48	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(longOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(longOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.values())  {  if(longOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }	  if(longOpts!=    null    &&    shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
49	[BUG]  [BUGGY]  addOption(group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(group,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(group,  shortOpts);	  addOption(option,    shortOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
50	[BUG]  [BUGGY]  addOption(option,  shortOpts,  group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option,  shortOpts,  group,  longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  shortOpts,  group,  longOpts);	  addOption(option,    shortOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
51	[BUG]  [BUGGY]  if(requiredOpts.contains(option)&&  shortOpts.contains(option))  {  addOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option)&&  shortOpts.contains(option))  {  addOption(option);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)&&  shortOpts.contains(option))  {  addOption(option);  }	  if(requiredOpts.contains(option)||    shortOpts.contains(option))    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
52	[BUG]  [BUGGY]  if(requiredOpts.contains(option)||  longOpts.contains(option))  {  addOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option)||  longOpts.contains(option))  {  addOption(option);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)||  longOpts.contains(option))  {  addOption(option);  }	  if(requiredOpts.contains(option)||    shortOpts.contains(option))    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
53	[BUG]  [BUGGY]  if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option,  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option,  group);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option,  group);  }	  if(requiredOpts.contains(option)||    shortOpts.contains(option))    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
54	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  group  =  option.getGroup(),  shortOpts);	  OptionGroup    group    =    option.getGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
55	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroups();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  group  =  option.getGroups();  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  group  =  option.getGroups();	  OptionGroup    group    =    option.getGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
56	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  group  =  option.getGroup(requiredOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  group  =  option.getGroup(requiredOpts);	  OptionGroup    group    =    option.getGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
57	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  option.getOption(group,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(group,  shortOpts);	  Option    option    =    option.getOption(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
58	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  option.getOption(group,  false);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(group,  false);	  Option    option    =    option.getOption(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
59	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  option.getOption(group,  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(group,  group);	  Option    option    =    option.getOption(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
60	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  group,  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
61	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
62	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  group,  requiredOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
63	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  lengthOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  group,  lengthOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
64	[BUG]  [BUGGY]  option.setRequired(falseOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(falseOpts,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(falseOpts,  shortOpts);	  option.setRequired(falseOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
65	[BUG]  [BUGGY]  option.setRequired(falseOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(falseOpts,  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(falseOpts,  requiredOpts);	  option.setRequired(falseOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
66	[BUG]  [BUGGY]  For(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  For(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	For(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }	  for(Option    option    :    longOpts.keySet())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
67	[BUG]  [BUGGY]  for(Option  option  :  longOpts.keySet())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  longOpts.keySet())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  longOpts.keySet())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }	  for(Option    option    :    shortOpts.keySet())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
68	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }	  for(Option    option    :    shortOpts.keySet())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
69	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(!requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(!requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.keySet())  {  if(!requiredOpts.contains(option))  {  requiredOpts.add(option);  }	  for(Option    option    :    shortOpts.keySet())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
70	[BUG]  [BUGGY]  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  group);  }	  for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option,    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
71	[BUG]  [BUGGY]  for(Option  group  :  shortOpts.values())  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  shortOpts.values())  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  shortOpts.values())  {  requiredOpts.add(option,  shortOpts);  }	  for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option,    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
72	[BUG]  [BUGGY]  for(Option  option  :  group.values())  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  group.values())  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.values())  {  requiredOpts.add(option,  shortOpts);  }	  for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option,    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
73	[BUG]  [BUGGY]  Option  option  =  option.getOption(longOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  option.getOption(longOpts,  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(longOpts,  group);	  Option    option    =    option.getOption(requiredOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
74	[BUG]  [BUGGY]  Option  option  =  option.getOption(requiredOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  option.getOption(requiredOpts,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(requiredOpts,  shortOpts);	  Option    option    =    option.getOption(requiredOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
75	[BUG]  [BUGGY]  option  =  option.getOption(group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option  =  option.getOption(group,  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option  =  option.getOption(group,  requiredOpts);	  Option    option    =    option.getOption(requiredOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
76	[BUG]  [BUGGY]  for(Option  group  :  option.getGroups())  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  option.getGroups())  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  option.getGroups())  {  requiredOpts.put(option.getKey(),  shortOpts);  }	  for(Option    option    :    group)    {    requiredOpts.put(option.getKey(),    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
77	[BUG]  [BUGGY]  for(Option  group  :  requiredOpts)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  requiredOpts)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  requiredOpts)  {  requiredOpts.put(option.getKey(),  shortOpts);  }	  for(Option    option    :    group)    {    requiredOpts.put(option.getKey(),    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
78	[BUG]  [BUGGY]  addOption(option.getKey(),  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  shortOpts,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  shortOpts,  group);	  addOption(option.getKey(),    group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
79	[BUG]  [BUGGY]  addOption(option.getKey(),  shortOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  shortOpts,  requiredOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  shortOpts,  requiredOpts);	  addOption(option.getKey(),    group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
80	[BUG]  [BUGGY]  addOption(option.getKey(),  requiredOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  requiredOpts,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  requiredOpts,  group);	  addOption(option.getKey(),    group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
81	[BUG]  [BUGGY]  addOption(option.getKey(),  group,  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  group,  shortOpts,  longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  group,  shortOpts,  longOpts);	  addOption(option.getKey(),    group,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
82	[BUG]  [BUGGY]  addOption(option.getKey(),  group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  group,  longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  group,  longOpts);	  addOption(option.getKey(),    group,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
83	[BUG]  [BUGGY]  for(Option  group  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    option    :    longOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
84	[BUG]  [BUGGY]  for(Option  group  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    longOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
85	[BUG]  [BUGGY]  if(longOpts!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(longOpts!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
86	[BUG]  [BUGGY]  if(longOpts  ==  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(longOpts  ==  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts  ==  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
87	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
88	[BUG]  [BUGGY]  group!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  group!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	group!=  null)  {  requiredOpts.put(option.getKey(),  group);  }	  if(group!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
89	[BUG]  [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(group!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }	  if(group!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
90	[BUG]  [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  requiredOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(group!=  null)  {  requiredOpts.put(option.getKey(),  requiredOpts);  }	  if(requiredOpts!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
91	[BUG]  [BUGGY]  group!=  null  &&  requiredOpts.put(option.getKey(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  group!=  null  &&  requiredOpts.put(option.getKey(),  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	group!=  null  &&  requiredOpts.put(option.getKey(),  longOpts);	  if(group!=    null)    {    requiredOpts.put(option.getKey(),    longOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
92	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  option.getOption(group,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(group,  longOpts);	  Option    option    =    option.getOption(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
93	[BUG]  [BUGGY]  if(shortOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }	  if(longOpts.contains(option)||    shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
94	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(longOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(longOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.keySet())  {  if(longOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }	  if(longOpts.contains(option)||    shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
95	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(group);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
96	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(group,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(group,  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
97	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(longOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(longOpts,  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(longOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
98	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(requiredOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
99	[BUG]  [BUGGY]  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }	  if(longOpts!=    null)    {    for(Option    option    :    longOpts.values())    {    requiredOpts.add(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
100	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option,  longOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option,  longOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option,  longOpts);  }	  if(longOpts!=    null)    {    for(Option    option    :    longOpts.values())    {    requiredOpts.add(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
101	[BUG]  [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option,  longOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option,  longOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option,  longOpts);  }	  if(longOpts!=    null)    {    for(Option    option    :    longOpts.values())    {    requiredOpts.add(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
102	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  options.getLongOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  options.getLongOpts();  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  options.getLongOpts();	  OptionGroup    shortOpts    =    options.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
103	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  options.getShortOpts(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  options.getShortOpts(),  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  options.getShortOpts(),  longOpts);	  OptionGroup    shortOpts    =    options.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
104	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
105	[BUG]  [BUGGY]  while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
106	[BUG]  [BUGGY]  while(shortOpts!=  null  &&  shortOpts.values().size()  >  0)  {  requiredOpts.put(option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  while(shortOpts!=  null  &&  shortOpts.values().size()  >  0)  {  requiredOpts.put(option.getKey(),  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	while(shortOpts!=  null  &&  shortOpts.values().size()  >  0)  {  requiredOpts.put(option.getKey(),  group);	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
107	[BUG]  [BUGGY]  Option  option  =  addOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  addOption(option);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  addOption(option);	  if(option!=    null)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
108	[BUG]  [BUGGY]  if(shortOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }	  if(longOpts.contains(option)&&    shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
109	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option,  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option,  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option,  group);  }	  for(Option    option    :    shortOpts.keySet())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
110	[BUG]  [BUGGY]  addOption(longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(longOpts,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(longOpts,  shortOpts);	  addOption(option,    shortOpts,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
111	[BUG]  [BUGGY]  addOption(group,  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(group,  shortOpts,  longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(group,  shortOpts,  longOpts);	  addOption(option,    shortOpts,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
112	[BUG]  [BUGGY]  addOption(option,  shortOpts,  longOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option,  shortOpts,  longOpts,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  shortOpts,  longOpts,  group);	  addOption(option,    shortOpts,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
113	[BUG]  [BUGGY]  optionGroups.put(option.getValue(),  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  optionGroups.put(option.getValue(),  group,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getValue(),  group,  shortOpts);	  optionGroups.put(option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
114	[BUG]  [BUGGY]  addOption(option.getKey(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  shortOpts,  longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  shortOpts,  longOpts);	  addOption(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
115	[BUG]  [BUGGY]  addOption(option.getKey(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  longOpts);	  addOption(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
116	[BUG]  [BUGGY]  option.addOption(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.addOption(group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.addOption(group);	  option.addOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
117	[BUG]  [BUGGY]  option.addOption(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.addOption(requiredOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.addOption(requiredOpts);	  option.addOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
118	[BUG]  [BUGGY]  option.addOption(option,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.addOption(option,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.addOption(option,  shortOpts);	  option.addOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
119	[BUG]  [BUGGY]  option.addOption(option,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.addOption(option,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.addOption(option,  group);	  option.addOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
120	[BUG]  [BUGGY]  Option  option  =  shortOpts.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  shortOpts.get(option);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  shortOpts.get(option);	  Option    option    =    requiredOpts.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
121	[BUG]  [BUGGY]  Option  option  =  requiredOpts.get(option.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  requiredOpts.get(option.getKey());  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  requiredOpts.get(option.getKey());	  Option    option    =    requiredOpts.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
122	[BUG]  [BUGGY]  Option  option  =  requiredOpts.get(option,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  requiredOpts.get(option,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  requiredOpts.get(option,  shortOpts);	  Option    option    =    requiredOpts.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
123	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue(),  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue(),  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(longOpts.getKey(),    shortOpts.getValue());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
124	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(longOpts.getKey(),  shortOpts.getValue());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(longOpts.getKey(),  shortOpts.getValue());  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(longOpts.getKey(),  shortOpts.getValue());	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(longOpts.getKey(),    shortOpts.getValue());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
125	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(lengthOpts.getKey(),  shortOpts.getValue());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(lengthOpts.getKey(),  shortOpts.getValue());  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(lengthOpts.getKey(),  shortOpts.getValue());	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(longOpts.getKey(),    shortOpts.getValue());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
126	[BUG]  [BUGGY]  addOption(option.getKey(),  group,  this,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  group,  this,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  group,  this,  shortOpts);	  addOption(option.getKey(),    group,    this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
127	[BUG]  [BUGGY]  For(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  For(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	For(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    longOpts.values())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
128	[BUG]  [BUGGY]  option.setShortOpts(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setShortOpts(longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setShortOpts(longOpts);	  option.setShortOpts(shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
129	[BUG]  [BUGGY]  option.setShortOpts(longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setShortOpts(longOpts,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setShortOpts(longOpts,  shortOpts);	  option.setShortOpts(shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
130	[BUG]  [BUGGY]  option.setShortOpts(lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setShortOpts(lengthOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setShortOpts(lengthOpts);	  option.setShortOpts(shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
131	[BUG]  [BUGGY]  optionGroups.put(option.getKey(),  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  optionGroups.put(option.getKey(),  shortOpts,  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getKey(),  shortOpts,  group);	  optionGroups.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
132	[BUG]  [BUGGY]  optionGroups.put(option.getKey(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  optionGroups.put(option.getKey(),  shortOpts,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getKey(),  shortOpts,  longOpts);	  optionGroups.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
133	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    group.getOptions())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
134	[BUG]  [BUGGY]  for(Option  group  :  option.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  option.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  option.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    group.getOptions())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
135	[BUG]  [BUGGY]  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.getOptionGroups())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    group.getOptions())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
136	[BUG]  [BUGGY]  optionGroups.put(option.getKey(),  group,  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  optionGroups.put(option.getKey(),  group,  shortOpts,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getKey(),  group,  shortOpts,  longOpts);	  optionGroups.put(option.getKey(),    group,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
137	[BUG]  [BUGGY]  optionGroups.put(option.getKey(),  group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  optionGroups.put(option.getKey(),  group,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getKey(),  group,  longOpts);	  optionGroups.put(option.getKey(),    group,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
138	[BUG]  [BUGGY]  optionGroups.put(option.getKey(),  group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  optionGroups.put(option.getKey(),  group,  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getKey(),  group,  requiredOpts);	  optionGroups.put(option.getKey(),    group,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
139	[BUG]  [BUGGY]  addOption(option.getKey(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  option);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  option);	  addOption(group.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
140	[BUG]  [BUGGY]  addOptionGroup(option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOptionGroup(option.getKey(),  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOptionGroup(option.getKey(),  group);	  addOption(group.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
141	[BUG]  [BUGGY]  addOption(longOpts,  option,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(longOpts,  option,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(longOpts,  option,  shortOpts);	  addOption(option,    longOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
142	[BUG]  [BUGGY]  addOption(group,  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(group,  longOpts,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(group,  longOpts,  shortOpts);	  addOption(option,    longOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
143	[BUG]  [BUGGY]  addOption(option,  longOpts,  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option,  longOpts,  shortOpts,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  longOpts,  shortOpts,  group);	  addOption(option,    longOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
144	[BUG]  [BUGGY]  for(Option  option  :  longOpts.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  longOpts.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  longOpts.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }	  for(Option    option    :    shortOpts.keySet())    {    if(shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
145	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(longOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(longOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.keySet())  {  if(longOpts.contains(option))  {  requiredOpts.add(option);  }	  for(Option    option    :    shortOpts.keySet())    {    if(shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
146	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.values())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }	  for(Option    option    :    shortOpts.keySet())    {    if(shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
147	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  addOption(option,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  addOption(option,  requiredOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  addOption(option,  requiredOpts);  }	  if(requiredOpts!=    null)    {    addOption(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
148	[BUG]  [BUGGY]  if(requiredOpts.contains(option)&&  requiredOpts.contains(option))  {  addOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option)&&  requiredOpts.contains(option))  {  addOption(option);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)&&  requiredOpts.contains(option))  {  addOption(option);  }	  if(requiredOpts.contains(option)||    requiredOpts.contains(option))    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
149	[BUG]  [BUGGY]  if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  addOption(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  addOption(option,  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  addOption(option,  shortOpts);  }	  if(requiredOpts.contains(option)||    requiredOpts.contains(option))    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
150	[BUG]  [BUGGY]  option.setRequired(true,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(true,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(true,  shortOpts);	  option.setRequired(false,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
151	[BUG]  [BUGGY]  option.setRequired(false,  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(false,  shortOpts,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(false,  shortOpts,  longOpts);	  option.setRequired(false,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
152	[BUG]  [BUGGY]  option.setRequired(false,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(false,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(false,  longOpts);	  option.setRequired(false,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
153	[BUG]  [BUGGY]  option.setRequired(false,  shortOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(false,  shortOpts,  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(false,  shortOpts,  requiredOpts);	  option.setRequired(false,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
154	[BUG]  [BUGGY]  for(Option  group  :  longOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  longOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  longOpts)  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    group    :    shortOpts)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
155	[BUG]  [BUGGY]  for(Option  group  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    group    :    shortOpts)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
156	[BUG]  [BUGGY]  if(option.isRequired())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option.isRequired())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option.isRequired())  {  requiredOpts.put(option.getKey(),  group);  }	  if(option.isRequired())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
157	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(),  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getLongOpts(),  group);	  OptionGroup    shortOpts    =    option.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
158	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(longOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(longOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.values())  {  if(longOpts.contains(option))  {  requiredOpts.add(option);  }	  if(longOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
159	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
160	[BUG]  [BUGGY]  while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
161	[BUG]  [BUGGY]  while(shortOpts!=  null  &&  shortOpts.size()  >  0)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  while(shortOpts!=  null  &&  shortOpts.size()  >  0)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	while(shortOpts!=  null  &&  shortOpts.size()  >  0)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
162	[BUG]  [BUGGY]  requiredOpts.add(option,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  requiredOpts.add(option,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	requiredOpts.add(option,  shortOpts);	  requiredOpts.add(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
163	[BUG]  [BUGGY]  for(Option  option  :  shortOpts)  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts)  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts)  {  requiredOpts.add(option);  }	  requiredOpts.add(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
164	[BUG]  [BUGGY]  addOption(group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(group,  longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(group,  longOpts);	  addOption(option,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
165	[BUG]  [BUGGY]  for(Option  group  :  longOpts)  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  longOpts)  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  longOpts)  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    longOpts)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
166	[BUG]  [BUGGY]  For(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  For(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	For(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    option    :    longOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
167	[BUG]  [BUGGY]  for(Option  group  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    longOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
168	[BUG]  [BUGGY]  requiredOpts.put(option.getKey(),  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  requiredOpts.put(option.getKey(),  group,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	requiredOpts.put(option.getKey(),  group,  shortOpts);	  requiredOpts.put(option.getKey(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
169	[BUG]  [BUGGY]  Option  optionGroup  =  option.getOptionGroup(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  optionGroup  =  option.getOptionGroup(requiredOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  optionGroup  =  option.getOptionGroup(requiredOpts);	  Option    optionGroup    =    option.getOptionGroup(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
170	[BUG]  [BUGGY]  Option  optionGroup  =  option.getOptionGroup(group,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  optionGroup  =  option.getOptionGroup(group,  option);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  optionGroup  =  option.getOptionGroup(group,  option);	  Option    optionGroup    =    option.getOptionGroup(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
171	[BUG]  [BUGGY]  optionGroup  =  option.getOptionGroup(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  optionGroup  =  option.getOptionGroup(group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroup  =  option.getOptionGroup(group);	  Option    optionGroup    =    option.getOptionGroup(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
172	[BUG]  [BUGGY]  for(Option  group  :  option.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  option.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  option.values())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    group    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
173	[BUG]  [BUGGY]  addOption(longOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(longOpts,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(longOpts,  group);	  addOption(option,    group,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
174	[BUG]  [BUGGY]  addOption(group,  option,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(group,  option,  longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(group,  option,  longOpts);	  addOption(option,    group,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
175	[BUG]  [BUGGY]  if(extendedOpts!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(extendedOpts!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(extendedOpts!=  null)  {  requiredOpts.put(option.getKey(),  group);  }	  if(group!=    null)    {    requiredOpts.put(option.getKey(),    extendedOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
176	[BUG]  [BUGGY]  if(option.getShortOpts()!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option.getShortOpts()!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option.getShortOpts()!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);  }	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(longOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
177	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(longOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
178	[BUG]  [BUGGY]  boolean  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  boolean  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	boolean  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(longOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
179	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  requiredOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  option.getOption(group,  requiredOpts,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(group,  requiredOpts,  shortOpts);	  Option    option    =    option.getOption(group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
180	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  option.getOption(group,  lengthOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(group,  lengthOpts);	  Option    option    =    option.getOption(group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
181	[BUG]  [BUGGY]  option.setRequired(true,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(true,  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(true,  group);	  option.setRequired(false,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
182	[BUG]  [BUGGY]  option.setRequired(false,  group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(false,  group,  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(false,  group,  requiredOpts);	  option.setRequired(false,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
183	[BUG]  [BUGGY]  option.setRequired(false,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(false,  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(false,  requiredOpts);	  option.setRequired(false,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
184	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
185	[BUG]  [BUGGY]  while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	while(shortOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
186	[BUG]  [BUGGY]  while(shortOpts!=  null  &&  shortOpts.values().size()  >  0)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  while(shortOpts!=  null  &&  shortOpts.values().size()  >  0)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	while(shortOpts!=  null  &&  shortOpts.values().size()  >  0)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
187	[BUG]  [BUGGY]  if(option!=  null)  {  requiredOpts.put(option.getKey(),  extendedOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option!=  null)  {  requiredOpts.put(option.getKey(),  extendedOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  requiredOpts.put(option.getKey(),  extendedOpts);  }	  if(group!=    null)    {    requiredOpts.put(option.getKey(),    extendedOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
188	[BUG]  [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(group!=  null)  {  requiredOpts.put(option.getKey(),  option);  }	  if(group!=    null)    {    requiredOpts.put(option.getKey(),    extendedOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
189	[BUG]  [BUGGY]  if(option.getShortOpts()!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option.getShortOpts()!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue());  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option.getShortOpts()!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue());  }	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(longOpts.getKey(),    shortOpts.getValue());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
190	[BUG]  [BUGGY]  if(longOpts!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(longOpts!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue());  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue());  }	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(longOpts.getKey(),    shortOpts.getValue());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
191	[BUG]  [BUGGY]  requiredOpts.put(option.getValue(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  requiredOpts.put(option.getValue(),  option);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	requiredOpts.put(option.getValue(),  option);	  requiredOpts.put(option.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
192	[BUG]  [BUGGY]  for(Option  option  :  group.keySet())  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  group.keySet())  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.keySet())  {  requiredOpts.put(option.getKey(),  shortOpts);  }	  for(Option    option    :    shortOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
193	[BUG]  [BUGGY]  option.setRequired(falseOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(falseOpts,  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(falseOpts,  group);	  option.setRequired(falseOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
194	[BUG]  [BUGGY]  addOption(option.getValue(),  group,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getValue(),  group,  false);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getValue(),  group,  false);	  addOption(option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
195	[BUG]  [BUGGY]  if(longOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(longOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option);  }	  if(requiredOpts.contains(option)||    shortOpts.contains(option))    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
196	[BUG]  [BUGGY]  if(shortOpts.contains(option)||  longOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts.contains(option)||  longOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts.contains(option)||  longOpts.contains(option))  {  requiredOpts.add(option);  }	  if(longOpts.contains(option)||    shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
197	[BUG]  [BUGGY]  for(Option  group  :  option.getShortOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  option.getShortOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  option.getShortOpts)  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    group    :    shortOpts)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
198	[BUG]  [BUGGY]  for(Option  group  :  option.shortOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  option.shortOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  option.shortOpts)  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    group    :    shortOpts)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
199	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
200	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  options.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  options.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  options.values())  {  requiredOpts.put(option.getKey(),  group);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
201	[BUG]  [BUGGY]  addOption(opt,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(opt,  longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(opt,  longOpts);	  addOption(longOpts,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
202	[BUG]  [BUGGY]  addOption(option,  extendedOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option,  extendedOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  extendedOpts);	  addOption(longOpts,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
203	[BUG]  [BUGGY]  if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option,  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option,  shortOpts);  }	  if(requiredOpts.contains(option))    {    addOption(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
204	[BUG]  [BUGGY]  if(requiredOpts.contains(option))  {  addOption(option,  longOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option))  {  addOption(option,  longOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option))  {  addOption(option,  longOpts);  }	  if(requiredOpts.contains(option))    {    addOption(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
205	[BUG]  [BUGGY]  if(requiredOpts.contains(option)&&  shortOpts.contains(option))  {  addOption(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option)&&  shortOpts.contains(option))  {  addOption(option,  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)&&  shortOpts.contains(option))  {  addOption(option,  shortOpts);  }	  if(requiredOpts.contains(option))    {    addOption(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
206	[BUG]  [BUGGY]  for(Option  option  :  option.values())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  option.values())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  option.values())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    group.values())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
207	[BUG]  [BUGGY]  for(Option  option  :  options.values())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  options.values())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  options.values())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    group.values())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
208	[BUG]  [BUGGY]  Option  optionGroup  =  option.getOptionGroups();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  optionGroup  =  option.getOptionGroups();  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  optionGroup  =  option.getOptionGroups();	  Option    optionGroup    =    option.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
209	[BUG]  [BUGGY]  Option  optionGroup  =  option.getOptionGroup(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  optionGroup  =  option.getOptionGroup(false);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  optionGroup  =  option.getOptionGroup(false);	  Option    optionGroup    =    option.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
210	[BUG]  [BUGGY]  option!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option!=  null)  {  requiredOpts.put(option.getKey(),  group);  }	  if(option!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
211	[BUG]  [BUGGY]  if(option!=  null)  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option!=  null)  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  requiredOpts.put(option.getKey(),  option);  }	  if(option!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
212	[BUG]  [BUGGY]  for(Option  group  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  group  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    group    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
213	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  option.values())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  option.values())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  option.values())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
214	[BUG]  [BUGGY]  optionGroups.put(option.getKey(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  optionGroups.put(option.getKey(),  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getKey(),  longOpts);	  optionGroups.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
215	[BUG]  [BUGGY]  for(Option  option  :  options.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  options.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  options.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    group.getOptions())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
216	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(optionGroups.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(optionGroups.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.keySet())  {  if(optionGroups.contains(option))  {  requiredOpts.add(option);  }	  for(Option    option    :    shortOpts.keySet())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
217	[BUG]  [BUGGY]  addOption(option.getKey(),  group,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  group,  false);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  group,  false);	  addOption(option.getKey(),    group,    this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
218	[BUG]  [BUGGY]  for(Option  option  :  group.getOptions())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  group.getOptions())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.getOptions())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    option    :    group)    {    requiredOpts.put(option.getKey(),    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
219	[BUG]  [BUGGY]  addOption(opt,  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(opt,  longOpts,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(opt,  longOpts,  shortOpts);	  addOption(option,    longOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
220	[BUG]  [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    longOpts.values())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
221	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.put(option.getKey(),  longOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.put(option.getKey(),  longOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  requiredOpts.put(option.getKey(),  longOpts);  }	  if(longOpts!=    null)    {    requiredOpts.put(option.getKey(),    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
222	[BUG]  [BUGGY]  option.setRequired(false,  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(false,  group,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(false,  group,  shortOpts);	  option.setRequired(false,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
223	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getLongOpts(longOpts);	  OptionGroup    shortOpts    =    option.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
224	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(false);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getLongOpts(false);	  OptionGroup    shortOpts    =    option.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
225	[BUG]  [BUGGY]  Option  option  =  options.get(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  options.get(requiredOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  options.get(requiredOpts);	  Option    option    =    requiredOpts.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
226	[BUG]  [BUGGY]  Option  option  =  option.get(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  option.get(requiredOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.get(requiredOpts);	  Option    option    =    requiredOpts.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
227	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  options.keySet())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  options.keySet())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  options.keySet())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
228	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  option.keySet())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  option.keySet())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  option.keySet())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
229	[BUG]  [BUGGY]  Option  optionGroup  =  option.getOptionGroup(option.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  optionGroup  =  option.getOptionGroup(option.getKey());  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  optionGroup  =  option.getOptionGroup(option.getKey());	  Option    optionGroup    =    option.getOptionGroup(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
230	[BUG]  [BUGGY]  option!=  null)  {  addOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option!=  null)  {  addOption(option);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option!=  null)  {  addOption(option);  }	  if(option!=    null)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
231	[BUG]  [BUGGY]  if(option!=  null)  {  addOption(option,  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option!=  null)  {  addOption(option,  group);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  addOption(option,  group);  }	  if(option!=    null)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
232	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  options.getShortOpts(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  options.getShortOpts(longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  options.getShortOpts(longOpts);	  OptionGroup    shortOpts    =    options.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
233	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts,  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
234	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  langOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  langOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  group,  langOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
235	[BUG]  [BUGGY]  addOption(option.getKey(),  group,  requiredOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  group,  requiredOpts,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  group,  requiredOpts,  shortOpts);	  addOption(option.getKey(),    group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
236	[BUG]  [BUGGY]  option.setLongOpts(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setLongOpts(longOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setLongOpts(longOpts);	  option.setShortOpts(shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
237	[BUG]  [BUGGY]  group!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  group!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	group!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }	  if(group!=    null)    {    requiredOpts.put(option.getKey(),    longOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
238	[BUG]  [BUGGY]  if(shortOpts.contains(option)&&  longOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts.contains(option)&&  longOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts.contains(option)&&  longOpts.contains(option))  {  requiredOpts.add(option);  }	  if(longOpts.contains(option)&&    shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
239	[BUG]  [BUGGY]  if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);  }	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(longOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
240	[BUG]  [BUGGY]  addOption(option,  group,  requiredOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option,  group,  requiredOpts,  shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  group,  requiredOpts,  shortOpts);	  addOption(option,    group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
241	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
242	[BUG]  [BUGGY]  if(option.getShortOpts()!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option.getShortOpts()!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option.getShortOpts()!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
243	[BUG]  [BUGGY]  if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  }	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
244	[BUG]  [BUGGY]  addOption(option,  longOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option,  longOpts,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  longOpts,  group);	  addOption(option,    group,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
245	[BUG]  [BUGGY]  for(Option  option  :  group.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  group.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }	  for(Option    option    :    shortOpts.keySet())    {    if(shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
246	[BUG]  [BUGGY]  for(Option  option  :  options.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  options.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  options.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }	  for(Option    option    :    shortOpts.keySet())    {    if(shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
247	[BUG]  [BUGGY]  Option  option  =  option.getOption(shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  option.getOption(shortOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(shortOpts);	  if(requiredOpts!=    null)    {    addOption(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
248	[BUG]  [BUGGY]  if(requiredOpts.size()  ==  0)  {  addOption(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.size()  ==  0)  {  addOption(option,  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.size()  ==  0)  {  addOption(option,  shortOpts);  }	  if(requiredOpts.size()    ==    0)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
249	[BUG]  [BUGGY]  optionGroups.put(option.getValue(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  optionGroups.put(option.getValue(),  option);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getValue(),  option);	  optionGroups.put(option.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
250	[BUG]  [BUGGY]  longOpts.put(option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  longOpts.put(option.getKey(),  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	longOpts.put(option.getKey(),  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    longOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
251	[BUG]  [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  group);  }	  if(longOpts!=    null)    {    for(Option    option    :    longOpts.values())    {    requiredOpts.add(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
252	[BUG]  [BUGGY]  For(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  For(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	For(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }	  if(longOpts!=    null)    {    for(Option    option    :    longOpts.values())    {    requiredOpts.add(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
253	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
254	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  options.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  options.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  options.keySet())  {  requiredOpts.put(option.getKey(),  group);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
255	[BUG]  [BUGGY]  requiredOpts.add(option,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  requiredOpts.add(option,  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	requiredOpts.add(option,  group);	  requiredOpts.add(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
256	[BUG]  [BUGGY]  requiredOpts.add(optionGroup);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  requiredOpts.add(optionGroup);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	requiredOpts.add(optionGroup);	  requiredOpts.add(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
257	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey());  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  group  =  option.getGroup(option.getKey());	  OptionGroup    group    =    option.getGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
258	[BUG]  [BUGGY]  option!=  null)  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option!=  null)  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option!=  null)  {  requiredOpts.add(option);  }	  if(option!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
259	[BUG]  [BUGGY]  if(option!=  null)  {  requiredOpts.add(option,  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option!=  null)  {  requiredOpts.add(option,  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  requiredOpts.add(option,  group);  }	  if(option!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
260	[BUG]  [BUGGY]  if(option.getKey()  ==  group)  {  addOption(option.getKey(),  option);  }  else  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option.getKey()  ==  group)  {  addOption(option.getKey(),  option);  }  else  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option.getKey()  ==  group)  {  addOption(option.getKey(),  option);  }  else  {  requiredOpts.put(option.getKey(),  option);  }	  addOption(group.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
261	[BUG]  [BUGGY]  if(option.getKey()  ==  group)  {  addOption(group.getKey(),  option);  }  else  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option.getKey()  ==  group)  {  addOption(group.getKey(),  option);  }  else  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option.getKey()  ==  group)  {  addOption(group.getKey(),  option);  }  else  {  requiredOpts.put(option.getKey(),  option);  }	  addOption(group.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
262	[BUG]  [BUGGY]  if(longOpts!=  null  &&  shortOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(longOpts!=  null  &&  shortOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null  &&  shortOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }	  if(longOpts!=    null    &&    shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
263	[BUG]  [BUGGY]  Option  option  =  option.getOption(requiredOpts,  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  option.getOption(requiredOpts,  group,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(requiredOpts,  group,  shortOpts);	  Option    option    =    option.getOption(requiredOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
264	[BUG]  [BUGGY]  if(shortOpts.size()  >  0)  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts.size()  >  0)  {  requiredOpts.add(option);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts.size()  >  0)  {  requiredOpts.add(option);  }	  if(requiredOpts.size()    >    0)    {    addOption(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
265	[BUG]  [BUGGY]  for(Option  option  :  option.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  option.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  option.values())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    option    :    group.values())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
266	[BUG]  [BUGGY]  for(Option  option  :  group.keySet())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  group.keySet())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.keySet())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    group.values())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
267	[BUG]  [BUGGY]  if(option!=  null)  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option!=  null)  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  requiredOpts.add(option,  shortOpts);  }	  if(option!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
268	[BUG]  [BUGGY]  option.put(option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.put(option.getKey(),  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.put(option.getKey(),  group);	  optionGroups.put(option.getKey(),    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
269	[BUG]  [BUGGY]  option.addOption(group,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.addOption(group,  option);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.addOption(group,  option);	  option.addOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
270	[BUG]  [BUGGY]  addOption(longOpts,  group,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(longOpts,  group,  option);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(longOpts,  group,  option);	  addOption(option,    group,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
271	[BUG]  [BUGGY]  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.getOptionGroups())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    option    :    group)    {    requiredOpts.put(option.getKey(),    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
272	[BUG]  [BUGGY]  if(longOpts!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(longOpts!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);  }	  OptionGroup    shortOpts    =    option.getShortOpts();    longOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
273	[BUG]  [BUGGY]  For(Option  option  :  shortOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  For(Option  option  :  shortOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	For(Option  option  :  shortOpts)  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    option    :    longOpts)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
274	[BUG]  [BUGGY]  option!=  null  &&  option.getKey()  ==  null)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option!=  null  &&  option.getKey()  ==  null)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option!=  null  &&  option.getKey()  ==  null)  {  requiredOpts.put(option.getKey(),  group);  }	  if(option!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
275	[BUG]  [BUGGY]  if(option!=  null)  {  requiredOpts.put(option.getKey(),  new  OptionGroup(group));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option!=  null)  {  requiredOpts.put(option.getKey(),  new  OptionGroup(group));  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  requiredOpts.put(option.getKey(),  new  OptionGroup(group));  }	  if(option!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
276	[BUG]  [BUGGY]  addOption(option,  group.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option,  group.getKey());  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  group.getKey());	  addOption(group.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
277	[BUG]  [BUGGY]  option.addOption(group.getKey(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.addOption(group.getKey(),  option);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.addOption(group.getKey(),  option);	  addOption(group.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
278	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  requiredOpts.put(option.getKey(),  group);  }	  if(longOpts!=    null)    {    requiredOpts.put(option.getKey(),    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
279	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  options.getShortOpts(option.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  options.getShortOpts(option.getKey());  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  options.getShortOpts(option.getKey());	  OptionGroup    shortOpts    =    options.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
280	[BUG]  [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  blockOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  blockOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(group!=  null)  {  requiredOpts.put(option.getKey(),  blockOpts);  }	  if(group!=    null)    {    requiredOpts.put(option.getKey(),    longOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
281	[BUG]  [BUGGY]  option.setRequired(true,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(true,  false);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(true,  false);	  option.setRequired(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
282	[BUG]  [BUGGY]  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  else  {  longOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  else  {  longOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  else  {  longOpts.put(option.getKey(),  group);  }	  requiredOpts.add(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
283	[BUG]  [BUGGY]  if(requiredOpts.contains(option)&&  shortOpts.contains(option.getKey()))  {  addOption(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option)&&  shortOpts.contains(option.getKey()))  {  addOption(option,  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)&&  shortOpts.contains(option.getKey()))  {  addOption(option,  shortOpts);  }	  if(requiredOpts.contains(option))    {    addOption(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
284	[BUG]  [BUGGY]  if(requiredOpts.contains(option))  {  addOption(option,  shortOpts,  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(requiredOpts.contains(option))  {  addOption(option,  shortOpts,  group);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option))  {  addOption(option,  shortOpts,  group);  }	  if(requiredOpts.contains(option))    {    addOption(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
285	[BUG]  [BUGGY]  OptionGroup  longOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  longOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  longOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(longOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
286	[BUG]  [BUGGY]  option.setRequired(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option.setRequired(requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(requiredOpts);	  option.setRequired(falseOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
287	[BUG]  [BUGGY]  if(option!=  null)  {  addOption(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option!=  null)  {  addOption(option,  shortOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  addOption(option,  shortOpts);  }	  if(option!=    null)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
288	[BUG]  [BUGGY]  if(option!=  null)  {  addOption(option,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(option!=  null)  {  addOption(option,  requiredOpts);  }  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  addOption(option,  requiredOpts);  }	  if(option!=    null)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
289	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }	  if(longOpts!=    null)    {    for(Option    option    :    longOpts.values())    {    requiredOpts.add(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
290	[BUG]  [BUGGY]  addOption(option.getKey(),  group,  shortOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  group,  shortOpts,  requiredOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  group,  shortOpts,  requiredOpts);	  addOption(option.getKey(),    group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
291	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts,  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
292	[BUG]  [BUGGY]  for(Option  option  :  option.getOptions())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  option.getOptions())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  option.getOptions())  {  requiredOpts.put(option.getKey(),  group);  }	  for(Option    option    :    group.getOptions())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
293	[BUG]  [BUGGY]  for(Option  option  :  option.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  option.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  option.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }	  for(Option    option    :    group.getOptions())    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
294	[BUG]  [BUGGY]  if(shortOpts  ==  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts  ==  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts  ==  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
295	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  longOpts.keySet())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  longOpts.keySet())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  longOpts.keySet())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
296	[BUG]  [BUGGY]  if(lengthOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(lengthOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(lengthOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }	  if(lengthOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
297	[BUG]  [BUGGY]  Option  option  =  group.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  option  =  group.get(option);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  group.get(option);	  Option    option    =    requiredOpts.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
298	[BUG]  [BUGGY]  for(Option  option  :  options.values())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  options.values())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  options.values())  {  requiredOpts.add(option);  }	  for(Option    option    :    langOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
299	[BUG]  [BUGGY]  Option  optionGroup  =  option.getOptionGroup(option,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  Option  optionGroup  =  option.getOptionGroup(option,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  optionGroup  =  option.getOptionGroup(option,  group);	  Option    optionGroup    =    option.getOptionGroup(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
300	[BUG]  [BUGGY]  addOption(option.getKey(),  group,  this,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  group,  this,  requiredOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  group,  this,  requiredOpts);	  addOption(option.getKey(),    group,    this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
301	[BUG]  [BUGGY]  addOption(option.getKey(),  this,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  this,  group);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  this,  group);	  addOption(option.getKey(),    group,    this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
302	[BUG]  [BUGGY]  optionalOpts.put(option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  optionalOpts.put(option.getKey(),  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionalOpts.put(option.getKey(),  group);	  requiredOpts.put(option.getKey(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
303	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(longOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(longOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.values())  {  if(longOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }	  if(longOpts.contains(option)&&    shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
304	[BUG]  [BUGGY]  for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  this);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  this);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  this);  }	  for(Option    option    :    group.values())    {    requiredOpts.put(option.getKey(),    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
305	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
306	[BUG]  [BUGGY]  if(shortOpts  ==  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts  ==  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts  ==  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
307	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  for(Option  option  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  for(Option  option  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }	  if(longOpts!=    null)    {    for(Option    option    :    shortOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
308	[BUG]  [BUGGY]  addOption(option.getKey(),  group,  shortOpts,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getKey(),  group,  shortOpts,  lengthOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  group,  shortOpts,  lengthOpts);	  addOption(option.getKey(),    group,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
309	[BUG]  [BUGGY]  addOption(option,  group,  shortOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option,  group,  shortOpts,  requiredOpts);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  group,  shortOpts,  requiredOpts);	  addOption(option,    group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
310	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getLongOpts(group);	  OptionGroup    shortOpts    =    option.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
311	[BUG]  [BUGGY]  option  =  option.getOption(group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  option  =  option.getOption(group,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option  =  option.getOption(group,  shortOpts);	  Option    option    =    option.getOption(group,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
312	[BUG]  [BUGGY]  addOption(option.getValue(),  group,  this);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  addOption(option.getValue(),  group,  this);  [BUGGY]        optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getValue(),  group,  this);	  addOption(option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
313	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.add(option,  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);      [BUGGY]  if(shortOpts!=  null)  {  requiredOpts.add(option,  group);  }  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(shortOpts!=  null)  {  requiredOpts.add(option,  group);  }	  if(longOpts!=    null)    {    requiredOpts.add(option,    shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
