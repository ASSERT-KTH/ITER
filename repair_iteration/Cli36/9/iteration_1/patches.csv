bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  longOpts.values())  {  requiredOpts.add(option);  }	      for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
2	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option,  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option,  group);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option,  group);  }	      for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
3	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }	      for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
4	[BUG]  [BUGGY]  for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }	      for(Option    option    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
5	[BUG]  [BUGGY]  for(Option  group  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  group  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }	      for(Option    option    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
6	[BUG]  [BUGGY]  for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  shortOpts);  }	      for(Option    option    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
7	[BUG]  [BUGGY]  option.setRequired(true);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  option.setRequired(true);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(true);	      option.setRequired(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
8	[BUG]  [BUGGY]  option.setRequired(false,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  option.setRequired(false,  shortOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(false,  shortOpts);	      option.setRequired(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
9	[BUG]  [BUGGY]  optionGroups.put(option.getKey(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  optionGroups.put(option.getKey(),  option);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getKey(),  option);	  if(option.isRequired())    {    addOption(option);    }    else    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
10	[BUG]  [BUGGY]  if(option.isRequired())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(option.isRequired())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option.isRequired())  {  requiredOpts.put(option.getKey(),  option);  }	  if(option.isRequired())    {    addOption(option);    }    else    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
11	[BUG]  [BUGGY]  addOption(option.getKey(),  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option.getKey(),  group,  shortOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  group,  shortOpts);	  addOption(option.getKey(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
12	[BUG]  [BUGGY]  addOption(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option.getKey(),  shortOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  shortOpts);	  addOption(option.getKey(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
13	[BUG]  [BUGGY]  addOption(option.getKey(),  group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option.getKey(),  group,  requiredOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  group,  requiredOpts);	  addOption(option.getKey(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
14	[BUG]  [BUGGY]  addOption(group.getKey(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(group.getKey(),  option);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(group.getKey(),  option);	  addOption(option.getKey(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
15	[BUG]  [BUGGY]  if(longOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(longOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts.contains(option))  {  requiredOpts.add(option);  }	      if(shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
16	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.keySet())  {  if(shortOpts.contains(option))  {  requiredOpts.add(option);  }	      if(shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
17	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.keySet())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }	      if(shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
18	[BUG]  [BUGGY]  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }	      if(shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
19	[BUG]  [BUGGY]  addOption(group,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(group,  option);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(group,  option);	  addOption(option,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
20	[BUG]  [BUGGY]  addOption(option,  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option,  group,  shortOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  group,  shortOpts);	  addOption(option,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
21	[BUG]  [BUGGY]  addOption(option,  group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option,  group,  requiredOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  group,  requiredOpts);	  addOption(option,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
22	[BUG]  [BUGGY]  Option  option  =  requiredOpts.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  Option  option  =  requiredOpts.get(option);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  requiredOpts.get(option);	  if(requiredOpts.contains(option))    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
23	[BUG]  [BUGGY]  optionGroups.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  optionGroups.put(option.getKey(),  shortOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getKey(),  shortOpts);	      optionGroups.put(option.getKey(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
24	[BUG]  [BUGGY]  optionGroups.put(option.getKey(),  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  optionGroups.put(option.getKey(),  group,  shortOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getKey(),  group,  shortOpts);	      optionGroups.put(option.getKey(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
25	[BUG]  [BUGGY]  addOption(option,  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option,  shortOpts,  longOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  shortOpts,  longOpts);	  addOption(option,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
26	[BUG]  [BUGGY]  addOption(option,  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option,  longOpts,  shortOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  longOpts,  shortOpts);	  addOption(option,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
27	[BUG]  [BUGGY]  addOption(longOpts,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(longOpts,  option);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(longOpts,  option);	  addOption(option,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
28	[BUG]  [BUGGY]  addOption(option,  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option,  shortOpts,  group);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  shortOpts,  group);	  addOption(option,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
29	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  group);	      OptionGroup    shortOpts    =    option.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
30	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(longOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(longOpts);	      OptionGroup    shortOpts    =    option.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
31	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts();  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getLongOpts();	      OptionGroup    shortOpts    =    option.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
32	[BUG]  [BUGGY]  for(Option  option  :  longOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  longOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  longOpts)  {  requiredOpts.put(option.getKey(),  group);  }	      for(Option    option    :    shortOpts)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
33	[BUG]  [BUGGY]  for(Option  group  :  shortOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  group  :  shortOpts)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  group  :  shortOpts)  {  requiredOpts.put(option.getKey(),  group);  }	      for(Option    option    :    shortOpts)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
34	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  addOption(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(requiredOpts!=  null)  {  addOption(option,  shortOpts);  }  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts!=  null)  {  addOption(option,  shortOpts);  }	  if(requiredOpts!=    null)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
35	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  OptionGroup  group  =  option.getGroup();  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  group  =  option.getGroup();	  if(option.getKey()!=    null)    {    addOption(option);    }    else    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
36	[BUG]  [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.put(option.getKey(),  group);  }	      if(longOpts!=    null)    {    for(Option    option    :    longOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
37	[BUG]  [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(group!=  null)  {  requiredOpts.put(option.getKey(),  group);  }	      if(longOpts!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
38	[BUG]  [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  longOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  longOpts);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(group!=  null)  {  requiredOpts.put(option.getKey(),  longOpts);  }	      if(longOpts!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
39	[BUG]  [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  extendedOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(group!=  null)  {  requiredOpts.put(option.getKey(),  extendedOpts);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(group!=  null)  {  requiredOpts.put(option.getKey(),  extendedOpts);  }	      if(longOpts!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
40	[BUG]  [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  for(Option  option  :  shortOpts.values())  {  requiredOpts.add(option);  }	      if(longOpts!=    null)    {    for(Option    option    :    longOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
41	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts!=  null)  {  requiredOpts.add(option);  }	      if(longOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
42	[BUG]  [BUGGY]  if(option!=  null)  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(option!=  null)  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  requiredOpts.add(option);  }	      if(longOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
43	[BUG]  [BUGGY]  if(longOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(longOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  requiredOpts.add(option,  shortOpts);  }	      if(longOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
44	[BUG]  [BUGGY]  optionGroups.put(option.getKey(),  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  optionGroups.put(option.getKey(),  requiredOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getKey(),  requiredOpts);	  if(requiredOpts.size()    >    0)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
45	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue());  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts.getKey(),  shortOpts.getValue());	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
46	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(longOpts,  shortOpts);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
47	[BUG]  [BUGGY]  Option  option  =  option.getOption(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  Option  option  =  option.getOption(group);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(group);	      Option    option    =    option.getOption(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
48	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  Option  option  =  option.getOption(group,  requiredOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(group,  requiredOpts);	      Option    option    =    option.getOption(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
49	[BUG]  [BUGGY]  Option  option  =  option.getOption(requiredOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  Option  option  =  option.getOption(requiredOpts,  group);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(requiredOpts,  group);	      Option    option    =    option.getOption(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
50	[BUG]  [BUGGY]  Option  option  =  option.getOption(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  Option  option  =  option.getOption(longOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  option  =  option.getOption(longOpts);	      Option    option    =    option.getOption(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
51	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }	      if(longOpts!=    null)    {    for(Option    option    :    longOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
52	[BUG]  [BUGGY]  for(Option  option  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  longOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }	      if(longOpts!=    null)    {    for(Option    option    :    longOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
53	[BUG]  [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.put(option.getKey(),  group);  }	      if(longOpts!=    null)    {    for(Option    option    :    longOpts.keySet())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
54	[BUG]  [BUGGY]  for(Option  option  :  longOpts.keySet())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  longOpts.keySet())  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  longOpts.keySet())  {  requiredOpts.add(option);  }	      if(longOpts!=    null)    {    for(Option    option    :    longOpts.keySet())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
55	[BUG]  [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  for(Option  option  :  shortOpts.keySet())  {  requiredOpts.add(option);  }	      if(longOpts!=    null)    {    for(Option    option    :    longOpts.keySet())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
56	[BUG]  [BUGGY]  addOption(option,  group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option,  group,  longOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  group,  longOpts);	  addOption(option,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
57	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  options.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  OptionGroup  shortOpts  =  options.getShortOpts();  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  options.getShortOpts();	      OptionGroup    shortOpts    =    option.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
58	[BUG]  [BUGGY]  requiredOpts.add(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  requiredOpts.add(option);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	requiredOpts.add(option);	      if(longOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
59	[BUG]  [BUGGY]  addOption(option.getValue(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option.getValue(),  group);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getValue(),  group);	  addOption(option.getKey(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
60	[BUG]  [BUGGY]  for(Option  option  :  langOpts.values())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  langOpts.values())  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  langOpts.values())  {  requiredOpts.add(option);  }	      for(Option    option    :    shortOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
61	[BUG]  [BUGGY]  requiredOpts.put(option.getKey(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  requiredOpts.put(option.getKey(),  option);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	requiredOpts.put(option.getKey(),  option);	  if(option.isRequired())    {    addOption(option);    }    else    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
62	[BUG]  [BUGGY]  option.setRequired(falseOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  option.setRequired(falseOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(falseOpts);	      option.setRequired(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
63	[BUG]  [BUGGY]  if(requiredOpts.size()  ==  0)  {  addOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(requiredOpts.size()  ==  0)  {  addOption(option);  }  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.size()  ==  0)  {  addOption(option);  }	  if(requiredOpts.size()    >    0)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
64	[BUG]  [BUGGY]  if(requiredOpts.size()  >  0)  {  addOption(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(requiredOpts.size()  >  0)  {  addOption(option,  shortOpts);  }  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.size()  >  0)  {  addOption(option,  shortOpts);  }	  if(requiredOpts.size()    >    0)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
65	[BUG]  [BUGGY]  if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option);  }  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)||  shortOpts.contains(option))  {  addOption(option);  }	  if(requiredOpts.contains(option))    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
66	[BUG]  [BUGGY]  if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  addOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  addOption(option);  }  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  addOption(option);  }	  if(requiredOpts.contains(option))    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
67	[BUG]  [BUGGY]  for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.values())  {  requiredOpts.put(option.getKey(),  option);  }	      for(Option    option    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
68	[BUG]  [BUGGY]  for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  longOpts.values())  {  requiredOpts.put(option.getKey(),  option);  }	      for(Option    option    :    shortOpts.values())    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
69	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
70	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
71	[BUG]  [BUGGY]  optionGroups.put(option.getValue(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  optionGroups.put(option.getValue(),  group);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	optionGroups.put(option.getValue(),  group);	      optionGroups.put(option.getKey(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
72	[BUG]  [BUGGY]  if(option!=  null)  {  addOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(option!=  null)  {  addOption(option);  }  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  addOption(option);  }	  if(requiredOpts!=    null)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
73	[BUG]  [BUGGY]  if(longOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(longOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts.contains(option)||  shortOpts.contains(option))  {  requiredOpts.add(option);  }	      if(shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
74	[BUG]  [BUGGY]  if(longOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(longOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts.contains(option)&&  shortOpts.contains(option))  {  requiredOpts.add(option);  }	      if(shortOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
75	[BUG]  [BUGGY]  addOption(option,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option,  longOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option,  longOpts);	  addOption(option,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
76	[BUG]  [BUGGY]  for(Option  option  :  longOpts)  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  longOpts)  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  longOpts)  {  requiredOpts.put(option.getKey(),  option);  }	      for(Option    option    :    shortOpts)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
77	[BUG]  [BUGGY]  for(Option  option  :  group.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  group.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group.getOptions())  {  requiredOpts.put(option.getKey(),  option);  }	      for(Option    option    :    shortOpts)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
78	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts!=  null)  {  requiredOpts.put(option.getKey(),  group);  }	      if(longOpts!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
79	[BUG]  [BUGGY]  if(option!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(option!=  null)  {  requiredOpts.put(option.getKey(),  group);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(option!=  null)  {  requiredOpts.put(option.getKey(),  group);  }	      if(longOpts!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
80	[BUG]  [BUGGY]  requiredOpts.put(option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  requiredOpts.put(option.getKey(),  group);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	requiredOpts.put(option.getKey(),  group);	      if(longOpts!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
81	[BUG]  [BUGGY]  Option  optionGroup  =  option.getOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  Option  optionGroup  =  option.getOptionGroup();  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  optionGroup  =  option.getOptionGroup();	  if(option.getKey()!=    null)    {    addOption(option);    }    else    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
82	[BUG]  [BUGGY]  Option  optionGroup  =  option.getOptionGroup(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  Option  optionGroup  =  option.getOptionGroup(option);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	Option  optionGroup  =  option.getOptionGroup(option);	  if(option.getKey()!=    null)    {    addOption(option);    }    else    {    requiredOpts.put(option.getKey(),    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
83	[BUG]  [BUGGY]  if(longOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(longOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null  &&  shortOpts.contains(option))  {  requiredOpts.add(option);  }	      if(longOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
84	[BUG]  [BUGGY]  if(lengthOpts!=  null)  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(lengthOpts!=  null)  {  requiredOpts.add(option);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(lengthOpts!=  null)  {  requiredOpts.add(option);  }	      if(longOpts!=    null)    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
85	[BUG]  [BUGGY]  addOption(option.getKey(),  group,  this);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  addOption(option.getKey(),  group,  this);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	addOption(option.getKey(),  group,  this);	  addOption(option.getKey(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
86	[BUG]  [BUGGY]  option.setShortOpts(shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  option.setShortOpts(shortOpts);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setShortOpts(shortOpts);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
87	[BUG]  [BUGGY]  if(requiredOpts.contains(option))  {  addOption(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(requiredOpts.contains(option))  {  addOption(option,  shortOpts);  }  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(requiredOpts.contains(option))  {  addOption(option,  shortOpts);  }	  if(requiredOpts.contains(option))    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
88	[BUG]  [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(longOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  for(Option  option  :  longOpts.values())  {  requiredOpts.add(option,  shortOpts);  }	      if(longOpts!=    null)    {    for(Option    option    :    longOpts.values())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
89	[BUG]  [BUGGY]  if(longOpts!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  if(longOpts!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	if(longOpts!=  null)  {  requiredOpts.put(option.getKey(),  shortOpts);  }	      if(longOpts!=    null)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
90	[BUG]  [BUGGY]  option.setRequired(false,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  option.setRequired(false,  group);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.setRequired(false,  group);	      option.setRequired(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
91	[BUG]  [BUGGY]  option.addOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  option.addOption(option);  [BUGGY]      optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	option.addOption(option);	  if(requiredOpts.size()    >    0)    {    addOption(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
92	[BUG]  [BUGGY]  for(Option  option  :  group)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);    [BUGGY]  for(Option  option  :  group)  {  requiredOpts.put(option.getKey(),  shortOpts);  }  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	82	82	1	replace	for(Option  option  :  group)  {  requiredOpts.put(option.getKey(),  shortOpts);  }	      for(Option    option    :    shortOpts)    {    requiredOpts.put(option.getKey(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
