bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  requiredOpts.add(group.getOptionGroup(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  requiredOpts.add(group.getOptionGroup(),  shortOpts);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	requiredOpts.add(group.getOptionGroup(),  shortOpts);	  requiredOpts.add(group.getOptionGroup());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
2	[BUG]  [BUGGY]  requiredOpts.add(group.getOptionGroup(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  requiredOpts.add(group.getOptionGroup(),  group);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	requiredOpts.add(group.getOptionGroup(),  group);	  requiredOpts.add(group.getOptionGroup());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
3	[BUG]  [BUGGY]  requiredOpts.add(group.getOptionGroup(),  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  requiredOpts.add(group.getOptionGroup(),  false);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	requiredOpts.add(group.getOptionGroup(),  false);	  requiredOpts.add(group.getOptionGroup());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
4	[BUG]  [BUGGY]  requiredOpts.add(group.getOptionGroup(),  this);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  requiredOpts.add(group.getOptionGroup(),  this);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	requiredOpts.add(group.getOptionGroup(),  this);	  requiredOpts.add(group.getOptionGroup());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
5	[BUG]  [BUGGY]  optionGroups.add(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  optionGroups.add(group);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	optionGroups.add(group);	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    shortOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
6	[BUG]  [BUGGY]  Annotation  group  =(Annotation)longOpts.get(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  Annotation  group  =(Annotation)longOpts.get(group);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	Annotation  group  =(Annotation)longOpts.get(group);	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    shortOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
7	[BUG]  [BUGGY]  Annotation  group  =(Annotation)group.getValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  Annotation  group  =(Annotation)group.getValue();  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	Annotation  group  =(Annotation)group.getValue();	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    shortOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
8	[BUG]  [BUGGY]  requiredOpts.add(null);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  requiredOpts.add(null);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	requiredOpts.add(null);	      if(group.isRequired())    {    requiredOpts.add(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
9	[BUG]  [BUGGY]  AnnotationGroup  shortOpts  =  group.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  AnnotationGroup  shortOpts  =  group.getShortOpts();  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	AnnotationGroup  shortOpts  =  group.getShortOpts();	      if(group.isRequired())    {    requiredOpts.add(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
10	[BUG]  [BUGGY]  found(null,  group.isRequired()))  {  requiredOpts.add(null);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(null,  group.isRequired()))  {  requiredOpts.add(null);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(null,  group.isRequired()))  {  requiredOpts.add(null);  }	      if(group.isRequired())    {    requiredOpts.add(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
11	[BUG]  [BUGGY]  if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  option.setRequired(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  option.setRequired(false);  }  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  option.setRequired(false);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
12	[BUG]  [BUGGY]  if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  option.setRequired(false);  addOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  option.setRequired(false);  addOption(option);  }  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  option.setRequired(false);  addOption(option);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
13	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  group.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  OptionGroup  shortOpts  =  group.getShortOpts();  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	OptionGroup  shortOpts  =  group.getShortOpts();	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
14	[BUG]  [BUGGY]  group.add(requiredOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  group.add(requiredOpts,  shortOpts);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	group.add(requiredOpts,  shortOpts);	  group.add(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
15	[BUG]  [BUGGY]  group.add(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  group.add(longOpts);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	group.add(longOpts);	  group.add(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
16	[BUG]  [BUGGY]  group.add(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  group.add(group);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	group.add(group);	  group.add(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
17	[BUG]  [BUGGY]  group.add(new  OptionGroup(longOpts,  shortOpts));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  group.add(new  OptionGroup(longOpts,  shortOpts));  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	group.add(new  OptionGroup(longOpts,  shortOpts));	  group.add(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
18	[BUG]  [BUGGY]  Annotation  shortOpts  =  group.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  Annotation  shortOpts  =  group.getShortOpts();  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	Annotation  shortOpts  =  group.getShortOpts();	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    longOpts.put(group.getName(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
19	[BUG]  [BUGGY]  Annotation  shortOpts  =  shortOpts.get(group.getName());  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  Annotation  shortOpts  =  shortOpts.get(group.getName());  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	Annotation  shortOpts  =  shortOpts.get(group.getName());	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    longOpts.put(group.getName(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
20	[BUG]  [BUGGY]  Annotation  requiredOpts  =  group.getRequired();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  Annotation  requiredOpts  =  group.getRequired();  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	Annotation  requiredOpts  =  group.getRequired();	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    longOpts.put(group.getName(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
21	[BUG]  [BUGGY]  try  ==  requiredOpts.add(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  try  ==  requiredOpts.add(group);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	try  ==  requiredOpts.add(group);	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    longOpts.put(group.getName(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
22	[BUG]  [BUGGY]  group.setRequired(true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  group.setRequired(true);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	group.setRequired(true);	      group.setRequired(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
23	[BUG]  [BUGGY]  group.setRequired(false,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  group.setRequired(false,  false);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	group.setRequired(false,  false);	      group.setRequired(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
24	[BUG]  [BUGGY]  group.setRequired(false,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  group.setRequired(false,  null);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	group.setRequired(false,  null);	      group.setRequired(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
25	[BUG]  [BUGGY]  For(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  For(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	For(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
26	[BUG]  [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
27	[BUG]  [BUGGY]  force(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  force(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	force(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
28	[BUG]  [BUGGY]  For(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  For(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	For(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
29	[BUG]  [BUGGY]  Annotation  group  =(Annotation)requiredOpts.get(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  Annotation  group  =(Annotation)requiredOpts.get(group);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	Annotation  group  =(Annotation)requiredOpts.get(group);	      if(group.isRequired())    {    requiredOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
30	[BUG]  [BUGGY]  requiredOpts.add(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  requiredOpts.add(false);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	requiredOpts.add(false);	      if(group.isRequired())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
31	[BUG]  [BUGGY]  forceRequired())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  forceRequired())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	forceRequired())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
32	[BUG]  [BUGGY]  try  ==  requiredOpts.add(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  try  ==  requiredOpts.add(false);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	try  ==  requiredOpts.add(false);	      if(group.isRequired())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
33	[BUG]  [BUGGY]  found(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(false);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(false);	      if(group.isRequired())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
34	[BUG]  [BUGGY]  List  <  Option>  shortOpts  =  longOpts.getLongOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  List  <  Option>  shortOpts  =  longOpts.getLongOpts();  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	List  <  Option>  shortOpts  =  longOpts.getLongOpts();	      List    <    Option>    shortOpts    =    group.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
35	[BUG]  [BUGGY]  List  <  Option>  shortOpts  =  group.getLongOpts(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  List  <  Option>  shortOpts  =  group.getLongOpts(),  longOpts);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	List  <  Option>  shortOpts  =  group.getLongOpts(),  longOpts);	      List    <    Option>    shortOpts    =    group.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
36	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  group.getRequiredOpts(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  OptionGroup  shortOpts  =  group.getRequiredOpts(),  longOpts);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	OptionGroup  shortOpts  =  group.getRequiredOpts(),  longOpts);	      OptionGroup    shortOpts    =    group.getRequiredOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
37	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  group.getRequiredOpts(),  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  OptionGroup  shortOpts  =  group.getRequiredOpts(),  requiredOpts);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	OptionGroup  shortOpts  =  group.getRequiredOpts(),  requiredOpts);	      OptionGroup    shortOpts    =    group.getRequiredOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
38	[BUG]  [BUGGY]  For(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  For(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	For(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
39	[BUG]  [BUGGY]  force(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  force(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	force(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
40	[BUG]  [BUGGY]  found(option.getOption(),  group.getOptions())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(option.getOption(),  group.getOptions())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(option.getOption(),  group.getOptions())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
41	[BUG]  [BUGGY]  force(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  force(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	force(Option  option  :  group.getOptions())  {  requiredOpts.add(false);	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
42	[BUG]  [BUGGY]  shortOpts.add(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  shortOpts.add(longOpts);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	shortOpts.add(longOpts);	  shortOpts.add(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
43	[BUG]  [BUGGY]  shortOpts.add(group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  shortOpts.add(group,  longOpts);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	shortOpts.add(group,  longOpts);	  shortOpts.add(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
44	[BUG]  [BUGGY]  shortOpts.add(group.getName());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  shortOpts.add(group.getName());  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	shortOpts.add(group.getName());	  shortOpts.add(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
45	[BUG]  [BUGGY]  List  <  Option>  shortOpts  =  group.getShortOpts(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  List  <  Option>  shortOpts  =  group.getShortOpts(),  longOpts);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	List  <  Option>  shortOpts  =  group.getShortOpts(),  longOpts);	      List    <    Option>    shortOpts    =    group.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
46	[BUG]  [BUGGY]  List  <  Option>  shortOpts  =  longOpts.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  List  <  Option>  shortOpts  =  longOpts.getShortOpts();  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	List  <  Option>  shortOpts  =  longOpts.getShortOpts();	      List    <    Option>    shortOpts    =    group.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
47	[BUG]  [BUGGY]  allowShortOpts(group.isRequired())  {  requiredOpts.add(group);  }  else  {  setRequired(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired())  {  requiredOpts.add(group);  }  else  {  setRequired(false);  }  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired())  {  requiredOpts.add(group);  }  else  {  setRequired(false);  }	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    setRequired(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
48	[BUG]  [BUGGY]  allowShortOpts(group.isRequired())  {  requiredOpts.add(group);  }  else  {  setRequired(true);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired())  {  requiredOpts.add(group);  }  else  {  setRequired(true);  }  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired())  {  requiredOpts.add(group);  }  else  {  setRequired(true);  }	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    setRequired(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
49	[BUG]  [BUGGY]  cuplur.requiredOpts.add(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  cuplur.requiredOpts.add(group);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	cuplur.requiredOpts.add(group);	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    setRequired(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
50	[BUG]  [BUGGY]  allowShortOpts(group.isRequired())  {  requiredOpts.add(group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired())  {  requiredOpts.add(group);  }  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired())  {  requiredOpts.add(group);  }	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    setRequired(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
51	[BUG]  [BUGGY]  force(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  force(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	force(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
52	[BUG]  [BUGGY]  force(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  force(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	force(Option  option  :  group.getOptions())  {  requiredOpts.add(option);	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
53	[BUG]  [BUGGY]  found(option,  group.getOptions())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(option,  group.getOptions())  {  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(option,  group.getOptions())  {	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
54	[BUG]  [BUGGY]  foundOpts.add(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  foundOpts.add(false);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	foundOpts.add(false);	      if(group.isRequired())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
55	[BUG]  [BUGGY]  optionGroups.add(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  optionGroups.add(false);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	optionGroups.add(false);	      if(group.isRequired())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
56	[BUG]  [BUGGY]  optionGroups.add(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  optionGroups.add(requiredOpts);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	optionGroups.add(requiredOpts);	      if(group.isRequired())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
57	[BUG]  [BUGGY]  List  <  Option>  shortOpts  =  group.getLongOpts(true);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  List  <  Option>  shortOpts  =  group.getLongOpts(true);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	List  <  Option>  shortOpts  =  group.getLongOpts(true);	      List    <    Option>    shortOpts    =    group.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
58	[BUG]  [BUGGY]  allowRequired())  {  requiredOpts.add(group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowRequired())  {  requiredOpts.add(group);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowRequired())  {  requiredOpts.add(group);  }	      if(group.isRequired())    {    requiredOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
59	[BUG]  [BUGGY]  allowRequired(false)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowRequired(false)  {  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowRequired(false)  {	      if(group.isRequired())    {    requiredOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
60	[BUG]  [BUGGY]  group.setRequired(false,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  group.setRequired(false,  true);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	group.setRequired(false,  true);	      group.setRequired(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
61	[BUG]  [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
62	[BUG]  [BUGGY]  found(option.getOptions(),  group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(option.getOptions(),  group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(option.getOptions(),  group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
63	[BUG]  [BUGGY]  found(option.getOptions(),  group.isRequired())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(option.getOptions(),  group.isRequired())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(option.getOptions(),  group.isRequired())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
64	[BUG]  [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(true);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(true);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(true);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
65	[BUG]  [BUGGY]  requiredOpts.add(group.getOptionGroup(),  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  requiredOpts.add(group.getOptionGroup(),  true);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	requiredOpts.add(group.getOptionGroup(),  true);	  requiredOpts.add(group.getOptionGroup());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
66	[BUG]  [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
67	[BUG]  [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option,  false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option,  false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option,  false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
68	[BUG]  [BUGGY]  allowShortOpts(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group);	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    setRequired(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
69	[BUG]  [BUGGY]  allowShortOpts(group.getOptions());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.getOptions());  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.getOptions());	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    setRequired(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
70	[BUG]  [BUGGY]  allowShortOpts(group.isRequired());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired());  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired());	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    setRequired(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
71	[BUG]  [BUGGY]  shortOpts.add(group,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  shortOpts.add(group,  false);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	shortOpts.add(group,  false);	  shortOpts.add(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
72	[BUG]  [BUGGY]  shortOpts.add(group,  LongOpts.NEVER);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  shortOpts.add(group,  LongOpts.NEVER);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	shortOpts.add(group,  LongOpts.NEVER);	  shortOpts.add(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
73	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  group.getLeastRequiredOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  OptionGroup  shortOpts  =  group.getLeastRequiredOpts();  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	OptionGroup  shortOpts  =  group.getLeastRequiredOpts();	      OptionGroup    shortOpts    =    group.getRequiredOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
74	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  group.getLongOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  OptionGroup  shortOpts  =  group.getLongOpts();  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	OptionGroup  shortOpts  =  group.getLongOpts();	      OptionGroup    shortOpts    =    group.getRequiredOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
75	[BUG]  [BUGGY]  if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  optionGroup.setRequired(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  optionGroup.setRequired(false);  }  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  optionGroup.setRequired(false);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
76	[BUG]  [BUGGY]  if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  optionGroup.setRequired(false);  addOption(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  optionGroup.setRequired(false);  addOption(option);  }  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	if(group.isRequired())  {  for(Option  option  :  group.getOptions())  {  optionGroup.setRequired(false);  addOption(option);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
77	[BUG]  [BUGGY]  allowShortOpts(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(false);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(false);	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    shortOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
78	[BUG]  [BUGGY]  allowShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts();  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts();	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    shortOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
79	[BUG]  [BUGGY]  List  <  Option>  shortOpts  =  group.getShortOpts(true);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  List  <  Option>  shortOpts  =  group.getShortOpts(true);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	List  <  Option>  shortOpts  =  group.getShortOpts(true);	      List    <    Option>    shortOpts    =    group.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
80	[BUG]  [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option,  false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option,  false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option,  false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
81	[BUG]  [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  neededOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  neededOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  neededOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
82	[BUG]  [BUGGY]  [Delete]  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  [Delete]  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	[Delete]	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    longOpts.put(group.getName(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
83	[BUG]  [BUGGY]  allowMutator(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowMutator(requiredOpts);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowMutator(requiredOpts);	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    longOpts.put(group.getName(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
84	[BUG]  [BUGGY]  optionGroups.add(null);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  optionGroups.add(null);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	optionGroups.add(null);	      if(group.isRequired())    {    requiredOpts.add(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
85	[BUG]  [BUGGY]  allowRequired(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowRequired(false);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowRequired(false);	      if(group.isRequired())    {    requiredOpts.add(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
86	[BUG]  [BUGGY]  group.add(requiredOpts,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  group.add(requiredOpts,  false);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	group.add(requiredOpts,  false);	  group.add(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
87	[BUG]  [BUGGY]  group.add(new  OptionGroup(longOpts));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  group.add(new  OptionGroup(longOpts));  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	group.add(new  OptionGroup(longOpts));	  group.add(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
88	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  group.getLargerOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  OptionGroup  shortOpts  =  group.getLargerOpts();  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	OptionGroup  shortOpts  =  group.getLargerOpts();	      OptionGroup    shortOpts    =    group.getRequiredOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
89	[BUG]  [BUGGY]  buckets.add(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  buckets.add(group);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	buckets.add(group);	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    shortOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
90	[BUG]  [BUGGY]  optionGroups.put(group,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  optionGroups.put(group,  group);  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	optionGroups.put(group,  group);	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    shortOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
91	[BUG]  [BUGGY]  if(group.isRequired())  {  requiredOpts.add(group);  }  else  {  requiredOpts.add(group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  if(group.isRequired())  {  requiredOpts.add(group);  }  else  {  requiredOpts.add(group);  }  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	if(group.isRequired())  {  requiredOpts.add(group);  }  else  {  requiredOpts.add(group);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
92	[BUG]  [BUGGY]  found(false,  group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(false,  group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(false,  group.isRequired())  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
93	[BUG]  [BUGGY]  found(false)  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(false)  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(false)  {  for(Option  option  :  group.getOptionGroups())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
94	[BUG]  [BUGGY]  found(false,  group.isRequired())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(false,  group.isRequired())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(false,  group.isRequired())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
95	[BUG]  [BUGGY]  allowShortOpts(group.isRequired())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.isRequired())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.isRequired())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
96	[BUG]  [BUGGY]  allowShortOpts(group.getRequired())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.getRequired())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.getRequired())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
97	[BUG]  [BUGGY]  found(null,  group.isRequired());  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(null,  group.isRequired());  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(null,  group.isRequired());	      if(group.isRequired())    {    requiredOpts.add(null);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
98	[BUG]  [BUGGY]  try  ==  for(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  try  ==  for(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	try  ==  for(Option  option  :  group.getOptions())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
99	[BUG]  [BUGGY]  forceOptions(option,  group.getOptions())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  forceOptions(option,  group.getOptions())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	forceOptions(option,  group.getOptions())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
100	[BUG]  [BUGGY]  allowShortOpts(group.getOptions(),  false)  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.getOptions(),  false)  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.getOptions(),  false)  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
101	[BUG]  [BUGGY]  allowShortOpts(group.getOptions())  {  requiredOpts.add(false);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.getOptions())  {  requiredOpts.add(false);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.getOptions())  {  requiredOpts.add(false);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(false);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
102	[BUG]  [BUGGY]  found(group.isRequired())&&  requiredOpts.contains(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(group.isRequired())&&  requiredOpts.contains(group);  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(group.isRequired())&&  requiredOpts.contains(group);	      if(group.isRequired())    {    requiredOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
103	[BUG]  [BUGGY]  found(group.getName(),  false)  {  requiredOpts.add(group);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(group.getName(),  false)  {  requiredOpts.add(group);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(group.getName(),  false)  {  requiredOpts.add(group);  }	      if(group.isRequired())    {    requiredOpts.add(group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
104	[BUG]  [BUGGY]  shortOpts.add(group.getShortOpts());  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  shortOpts.add(group.getShortOpts());  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	shortOpts.add(group.getShortOpts());	  shortOpts.add(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
105	[BUG]  [BUGGY]  shortOpts.add(group.getShortOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  shortOpts.add(group.getShortOpt());  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	shortOpts.add(group.getShortOpt());	  shortOpts.add(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
106	[BUG]  [BUGGY]  found(group.getName(),  false));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(group.getName(),  false));  [BUGGY]    }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(group.getName(),  false));	  if(group.isRequired())    {    requiredOpts.add(group);    }    else    {    longOpts.put(group.getName(),    group);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
107	[BUG]  [BUGGY]  found(false,  group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(false,  group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(false,  group.isRequired())  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
108	[BUG]  [BUGGY]  found(false)  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  found(false)  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	found(false)  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
109	[BUG]  [BUGGY]  allowShortOpts(group.getOptions(),  false)  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    public  Options  addOptionGroup(OptionGroup  group)  {  if  (group.isRequired())  {    [BUGGY]  allowShortOpts(group.getOptions(),  false)  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }  [BUGGY]    requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {    option.setRequired(false);  addOption(option);  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	73	73	1	replace	allowShortOpts(group.getOptions(),  false)  {  for(Option  option  :  group.getOptions())  {  requiredOpts.add(option);  }	      if(group.isRequired())    {    for(Option    option    :    group.getOptions())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
