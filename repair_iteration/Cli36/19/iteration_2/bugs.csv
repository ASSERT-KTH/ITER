bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
2	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
3	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
4	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
5	[BUG]  [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
6	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
7	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
8	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	      if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
9	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	      if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
10	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	      if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
11	[BUG]  [BUGGY]  longOpts.put(opt,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  longOpts.put(opt,  requiredOpts);  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	longOpts.put(opt,  requiredOpts);	  longOpts.put(opt,    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
12	[BUG]  [BUGGY]  longOpts.put(opt,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  longOpts.put(opt,  shortOpts);  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	longOpts.put(opt,  shortOpts);	  longOpts.put(opt,    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
13	[BUG]  [BUGGY]  if(opt.isRequired())  {  longOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  longOpts.put(key,  opt);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  longOpts.put(key,  opt);  }	  longOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
14	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  opt);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(key,  opt);  }	  longOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
15	[BUG]  [BUGGY]  optionGroups.put(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  optionGroups.put(key,  opt);  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	optionGroups.put(key,  opt);	  longOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
16	[BUG]  [BUGGY]  if(option.isRequired())  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(option.isRequired())  {  shortOpts.put(key,  opt);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(option.isRequired())  {  shortOpts.put(key,  opt);  }	  if(opt.isRequired())    {    shortOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
17	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  option);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  requiredOpts.put(key,  option);  }	  if(opt.isRequired())    {    shortOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
18	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
19	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
20	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
21	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
22	[BUG]  [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
23	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
24	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
25	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
26	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
27	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
28	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
29	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
30	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getKey());  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
31	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
32	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getKey());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getKey());  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
33	[BUG]  [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
34	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
35	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
36	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
37	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
38	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(key));  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
39	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
40	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
41	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
42	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(option);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(option);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
43	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(option))  {  requiredOpts.add(option);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(option))  {  requiredOpts.add(option);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
44	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
45	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
46	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
47	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
48	[BUG]  [BUGGY]  shortOpts.put(opt,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  shortOpts.put(opt,  requiredOpts);  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  requiredOpts);	  shortOpts.put(opt,    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
49	[BUG]  [BUGGY]  shortOpts.put(opt,  key,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  shortOpts.put(opt,  key,  requiredOpts);  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  key,  requiredOpts);	  shortOpts.put(opt,    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
50	[BUG]  [BUGGY]  shortOpts.put(opt,  key,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  shortOpts.put(opt,  key,  longOpts);  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  key,  longOpts);	  shortOpts.put(opt,    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
51	[BUG]  [BUGGY]  if(opt.isOption())  {  shortOpts.put(key,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isOption())  {  shortOpts.put(key,  requiredOpts);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  shortOpts.put(key,  requiredOpts);  }	  if(opt.isOption())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
52	[BUG]  [BUGGY]  if(opt.isOption())  {  shortOpts.put(key,  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isOption())  {  shortOpts.put(key,  option);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  shortOpts.put(key,  option);  }	  if(opt.isOption())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
53	[BUG]  [BUGGY]  while(opt.isOption())  {  shortOpts.put(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  while(opt.isOption())  {  shortOpts.put(key,  opt);  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption())  {  shortOpts.put(key,  opt);	  if(opt.isOption())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
54	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts);  }	  if(opt.isRequired())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
55	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  opt);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  requiredOpts.put(key,  opt);  }	  if(opt.isRequired())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
56	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  preferredOpt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  preferredOpt);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(key,  preferredOpt);  }	  if(opt.isRequired())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
57	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
58	[BUG]  [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  shortOpt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
59	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  preferredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  preferredOpts);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(key,  preferredOpts);  }	  if(opt.isRequired())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
60	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }	      if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
61	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(option,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  shortOpts.put(option,  key);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(option,  key);  }	  if(opt.isRequired())    {    shortOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
62	[BUG]  [BUGGY]  opt.put(key,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  opt.put(key,  longOpts);  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.put(key,  longOpts);	  longOpts.put(opt,    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
63	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
64	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
65	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
66	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
67	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
68	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
69	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  neededOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  neededOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  neededOpts.add(requiredOpts.indexOf(key));  }	      if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
70	[BUG]  [BUGGY]  if(opt.isOption())  {  requiredOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isOption())  {  requiredOpts.put(key,  opt);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  requiredOpts.put(key,  opt);  }	  if(opt.isOption())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
71	[BUG]  [BUGGY]  if(opt.isOption())  {  shortOpts.put(option,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isOption())  {  shortOpts.put(option,  opt);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  shortOpts.put(option,  opt);  }	  if(opt.isOption())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
72	[BUG]  [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  shortOpt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
73	[BUG]  [BUGGY]  for(Option  key  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  key  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(key);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  key  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(key);  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
74	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
75	[BUG]  [BUGGY]  opt.addOption(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  opt.addOption(longOpts);  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.addOption(longOpts);	  longOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
76	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  opt);  }  else  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  opt);  }  else  {  shortOpts.put(key,  opt);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(key,  opt);  }  else  {  shortOpts.put(key,  opt);  }	  longOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
77	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.keySet())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
78	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(!requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(!requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
79	[BUG]  [BUGGY]  if(opt.isOption())  {  shortOpts.put(key,  preferredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isOption())  {  shortOpts.put(key,  preferredOpts);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  shortOpts.put(key,  preferredOpts);  }	  if(opt.isOption())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
80	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }	      for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
81	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
82	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
83	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(opt,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  shortOpts.put(opt,  key);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(opt,  key);  }	  shortOpts.put(opt,    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
84	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(option));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(option));  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(option));  }	  if(opt.isRequired())    {    shortOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
85	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
86	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
87	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  key);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(opt,  key);  }	  longOpts.put(opt,    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
88	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  key);  }  else  {  shortOpts.put(opt,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  key);  }  else  {  shortOpts.put(opt,  key);  }  [BUGGY]      return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(opt,  key);  }  else  {  shortOpts.put(opt,  key);  }	  longOpts.put(opt,    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
89	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	      if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
90	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
91	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
92	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getKey());  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getKey());  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
93	[BUG]  [BUGGY]  Option  opt  =(Option)requiredOpts.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  Option  opt  =(Option)requiredOpts.get(key);  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)requiredOpts.get(key);	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
94	[BUG]  [BUGGY]  Option  opt  =(Option)requiredOpts.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  Option  opt  =(Option)requiredOpts.get(option);  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)requiredOpts.get(option);	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
95	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option,  opt);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option,  opt);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
96	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(1);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]      if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }    [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(1);  }  [BUGGY]    shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(1);  }	      if(opt!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
