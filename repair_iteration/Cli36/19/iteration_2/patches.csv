bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  requiredOpts);  }  else  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  requiredOpts);  }  else  {  shortOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(key,  requiredOpts);  }  else  {  shortOpts.put(key,  opt);  }	  if(opt.isOption())    {    longOpts.put(key,    opt);    }    else    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
2	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  option);  }  else  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  option);  }  else  {  shortOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(key,  option);  }  else  {  shortOpts.put(key,  opt);  }	  if(opt.isOption())    {    longOpts.put(key,    opt);    }    else    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
3	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  opt);  }  else  {  requiredOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  opt);  }  else  {  requiredOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(key,  opt);  }  else  {  requiredOpts.put(key,  opt);  }	  if(opt.isOption())    {    longOpts.put(key,    opt);    }    else    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
4	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  neededOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  neededOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  neededOpts.add(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    neededOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
5	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  neededOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  neededOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  neededOpts.add(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    neededOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
6	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
7	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
8	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
9	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
10	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(option))  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
11	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(!requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(!requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(!requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
12	[BUG]  [BUGGY]  optionGroups.put(key,  preferredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  optionGroups.put(key,  preferredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	optionGroups.put(key,  preferredOpts);	  if(opt.isRequired())    {    shortOpts.put(key,    preferredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
13	[BUG]  [BUGGY]  while(opt.isRequired())  {  preferredOpts.put(key,  preferredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isRequired())  {  preferredOpts.put(key,  preferredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isRequired())  {  preferredOpts.put(key,  preferredOpts);	  if(opt.isRequired())    {    shortOpts.put(key,    preferredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
14	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
15	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
16	[BUG]  [BUGGY]  requiredOpts.add(requiredOpts.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  requiredOpts.add(requiredOpts.indexOf(key));  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	requiredOpts.add(requiredOpts.indexOf(key));	  if(opt.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
17	[BUG]  [BUGGY]  while(opt.isOption())  {  longOpts.put(opt,  key);  }  else  {  shortOpts.put(opt,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption())  {  longOpts.put(opt,  key);  }  else  {  shortOpts.put(opt,  key);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption())  {  longOpts.put(opt,  key);  }  else  {  shortOpts.put(opt,  key);  }	  if(opt.isOption())    {    longOpts.put(opt,    key);    }    else    {    shortOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
18	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  key);  }  else  {  requiredOpts.put(opt,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  key);  }  else  {  requiredOpts.put(opt,  key);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(opt,  key);  }  else  {  requiredOpts.put(opt,  key);  }	  if(opt.isOption())    {    longOpts.put(opt,    key);    }    else    {    shortOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
19	[BUG]  [BUGGY]  optionGroups.put(key,  opt.isOption());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  optionGroups.put(key,  opt.isOption());  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	optionGroups.put(key,  opt.isOption());	  if(opt.isOption())    {    shortOpts.put(key,    preferredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
20	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
21	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(option)||  requiredOpts.containsKey(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(option)||  requiredOpts.containsKey(option))  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(option)||  requiredOpts.containsKey(option))  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
22	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
23	[BUG]  [BUGGY]  longOpts.put(key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  longOpts.put(key,  shortOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	longOpts.put(key,  shortOpts);	  longOpts.put(opt,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
24	[BUG]  [BUGGY]  longOpts.put(option,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  longOpts.put(option,  shortOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	longOpts.put(option,  shortOpts);	  longOpts.put(opt,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
25	[BUG]  [BUGGY]  longOpts.put(opt,  preferredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  longOpts.put(opt,  preferredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	longOpts.put(opt,  preferredOpts);	  longOpts.put(opt,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
26	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(!opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
27	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(!opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
28	[BUG]  [BUGGY]  if(optionGroups!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(optionGroups!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(optionGroups!=  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(!opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
29	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
30	[BUG]  [BUGGY]  if(opt.isOption()  ||  opt.isOption())  {  requiredOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption()  ||  opt.isOption())  {  requiredOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption()  ||  opt.isOption())  {  requiredOpts.put(key,  opt);  }	  if(opt.isOption())    {    requiredOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
31	[BUG]  [BUGGY]  if(opt.isOption())  {  requiredOpts.put(key,  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  requiredOpts.put(key,  option);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  requiredOpts.put(key,  option);  }	  if(opt.isOption())    {    requiredOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
32	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
33	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(!requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(!requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(!requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
34	[BUG]  [BUGGY]  optionGroups.put(key,  requiredOpts.indexOf(opt));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  optionGroups.put(key,  requiredOpts.indexOf(opt));  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	optionGroups.put(key,  requiredOpts.indexOf(opt));	  if(opt.isRequired())    {    shortOpts.put(key,    requiredOpts.indexOf(option));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
35	[BUG]  [BUGGY]  if(option.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(opt));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(option.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(opt));  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(option.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(opt));  }	  if(opt.isRequired())    {    shortOpts.put(key,    requiredOpts.indexOf(option));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
36	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  requiredOpts.indexOf(option));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  requiredOpts.indexOf(option));  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  requiredOpts.put(key,  requiredOpts.indexOf(option));  }	  if(opt.isRequired())    {    shortOpts.put(key,    requiredOpts.indexOf(option));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
37	[BUG]  [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  longOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }	  for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired()    ||    opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
38	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.values())  {  if(requiredOpts.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }	  for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired()    ||    opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
39	[BUG]  [BUGGY]  for(Option  opt  :  requiredOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  requiredOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  requiredOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }	  for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired()    ||    opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
40	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
41	[BUG]  [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
42	[BUG]  [BUGGY]  while(requiredOpts!=  null  &&  opt.isRequired())  {  requiredOpts.add(opt.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(requiredOpts!=  null  &&  opt.isRequired())  {  requiredOpts.add(opt.getKey());  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(requiredOpts!=  null  &&  opt.isRequired())  {  requiredOpts.add(opt.getKey());	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
43	[BUG]  [BUGGY]  Option  option  =  requiredOpts.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  option  =  requiredOpts.get(option);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  option  =  requiredOpts.get(option);	  if(opt!=    null)    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
44	[BUG]  [BUGGY]  Option  opt  =  requiredOpts.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =  requiredOpts.get(option);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =  requiredOpts.get(option);	  if(opt!=    null)    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
45	[BUG]  [BUGGY]  optionGroups.put(opt,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  optionGroups.put(opt,  requiredOpts);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	optionGroups.put(opt,  requiredOpts);	  if(opt!=    null)    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
46	[BUG]  [BUGGY]  Option  option  =  requiredOpts.getOption(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  option  =  requiredOpts.getOption(opt);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  option  =  requiredOpts.getOption(opt);	  if(opt!=    null)    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
47	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.contains(key)&&    requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
48	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.contains(key)&&    requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
49	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.contains(key)&&    requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
50	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    neededOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
51	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(option))  {  neededOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(option))  {  neededOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(option))  {  neededOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    neededOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
52	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  neededOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  neededOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  neededOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    neededOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
53	[BUG]  [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
54	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
55	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt.toString());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
56	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.isOptional())  {  requiredOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired()  ||  opt.isOptional())  {  requiredOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired()  ||  opt.isOptional())  {  requiredOpts.put(key,  opt);  }	  if(opt.isRequired())    {    requiredOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
57	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(opt,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  shortOpts.put(opt,  requiredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(opt,  requiredOpts);  }	  if(opt.isRequired())    {    shortOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
58	[BUG]  [BUGGY]  while(opt.isRequired())  {  shortOpts.put(opt,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isRequired())  {  shortOpts.put(opt,  key);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isRequired())  {  shortOpts.put(opt,  key);	  if(opt.isRequired())    {    shortOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
59	[BUG]  [BUGGY]  opt.put(key,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  opt.put(key,  requiredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.put(key,  requiredOpts);	  opt.put(key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
60	[BUG]  [BUGGY]  opt.put(key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  opt.put(key,  shortOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.put(key,  shortOpts);	  opt.put(key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
61	[BUG]  [BUGGY]  optionGroups.put(key,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  optionGroups.put(key,  longOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	optionGroups.put(key,  longOpts);	  opt.put(key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
62	[BUG]  [BUGGY]  for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }	  for(Option    opt    :    longOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
63	[BUG]  [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(requiredOpts!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
64	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(opt)||  requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(opt)||  requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.contains(opt)||  requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
65	[BUG]  [BUGGY]  while(opt.isRequired())  {  shortOpts.put(key,  preferredOpt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isRequired())  {  shortOpts.put(key,  preferredOpt);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isRequired())  {  shortOpts.put(key,  preferredOpt);	  if(opt.isRequired())    {    shortOpts.put(key,    preferredOpt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
66	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  requiredOpt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  requiredOpt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(key,  requiredOpt);  }	  if(opt.isRequired())    {    shortOpts.put(key,    preferredOpt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
67	[BUG]  [BUGGY]  optionGroups.put(opt,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  optionGroups.put(opt,  key);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	optionGroups.put(opt,  key);	  optionGroups.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
68	[BUG]  [BUGGY]  optionGroups.put(key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  optionGroups.put(key,  shortOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	optionGroups.put(key,  shortOpts);	  optionGroups.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
69	[BUG]  [BUGGY]  optionGroups.put(key,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  optionGroups.put(key,  requiredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	optionGroups.put(key,  requiredOpts);	  optionGroups.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
70	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
71	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
72	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
73	[BUG]  [BUGGY]  for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }	  for(Option    opt    :    longOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
74	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(option);  }	  for(Option    key    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
75	[BUG]  [BUGGY]  for(Option  key  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  key  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(key);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  key  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(key);  }	  for(Option    key    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
76	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
77	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.indexOf(key)!=  0)  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.indexOf(key)!=  0)  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.indexOf(key)!=  0)  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
78	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  neededOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  neededOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  neededOpts.add(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
79	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
80	[BUG]  [BUGGY]  while(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
81	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(opt.getKey()))  {  requiredOpts.remove(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(opt.getKey()))  {  requiredOpts.remove(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(opt.getKey()))  {  requiredOpts.remove(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
82	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
83	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
84	[BUG]  [BUGGY]  if(requiredOpts  ==  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts  ==  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts  ==  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
85	[BUG]  [BUGGY]  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
86	[BUG]  [BUGGY]  Option  shortOpts  =(Option)requiredOpts.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  shortOpts  =(Option)requiredOpts.get(opt);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  shortOpts  =(Option)requiredOpts.get(opt);	  if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
87	[BUG]  [BUGGY]  requiredOpts.add(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  requiredOpts.add(opt);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	requiredOpts.add(opt);	  if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
88	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  requiredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(opt,  requiredOpts);  }	  if(opt.isOption())    {    longOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
89	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  shortOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(opt,  shortOpts);  }	  if(opt.isOption())    {    longOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
90	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  optionGroups.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  optionGroups.indexOf(key));  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(opt,  optionGroups.indexOf(key));  }	  if(opt.isOption())    {    longOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
91	[BUG]  [BUGGY]  if(opt.isOptional())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOptional())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOptional())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
92	[BUG]  [BUGGY]  if(opt.isOptional())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOptional())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOptional())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
93	[BUG]  [BUGGY]  shortOpts.put(key,  opt,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(key,  opt,  longOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(key,  opt,  longOpts);	  shortOpts.put(opt,    key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
94	[BUG]  [BUGGY]  shortOpts.put(opt,  longOpts,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(opt,  longOpts,  key);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  longOpts,  key);	  shortOpts.put(opt,    key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
95	[BUG]  [BUGGY]  longOpts.put(opt,  key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  longOpts.put(opt,  key,  shortOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	longOpts.put(opt,  key,  shortOpts);	  shortOpts.put(opt,    key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
96	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt.getValue());  }	  for(Option    option    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
97	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
98	[BUG]  [BUGGY]  while(opt.isOption()  &&  opt.isOption())  {  shortOpts.put(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption()  &&  opt.isOption())  {  shortOpts.put(key,  opt);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption()  &&  opt.isOption())  {  shortOpts.put(key,  opt);	  while(opt.isOption())    {    shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
99	[BUG]  [BUGGY]  while(opt.isOption()  &&  shortOpts.contains(key))  {  shortOpts.put(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption()  &&  shortOpts.contains(key))  {  shortOpts.put(key,  opt);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption()  &&  shortOpts.contains(key))  {  shortOpts.put(key,  opt);	  while(opt.isOption())    {    shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
100	[BUG]  [BUGGY]  while(opt.isOption())  {  requiredOpts.put(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption())  {  requiredOpts.put(key,  opt);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption())  {  requiredOpts.put(key,  opt);	  while(opt.isOption())    {    shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
101	[BUG]  [BUGGY]  while(opt.isOption()  &&  opt.isOption())  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption()  &&  opt.isOption())  {  shortOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption()  &&  opt.isOption())  {  shortOpts.put(key,  opt);  }	  while(opt.isOption())    {    shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
102	[BUG]  [BUGGY]  if(opt.isOption())  {  shortOpts.put(option,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  shortOpts.put(option,  requiredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  shortOpts.put(option,  requiredOpts);  }	  if(opt.isOption())    {    shortOpts.put(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
103	[BUG]  [BUGGY]  if(opt.isOption())  {  shortOpts.put(option,  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  shortOpts.put(option,  option);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  shortOpts.put(option,  option);  }	  if(opt.isOption())    {    shortOpts.put(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
104	[BUG]  [BUGGY]  optionGroups.put(opt,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  optionGroups.put(opt,  opt);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	optionGroups.put(opt,  opt);	  if(opt.isOption())    {    shortOpts.put(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
105	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  requiredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(key,  requiredOpts);  }	  if(opt.isOption())    {    longOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
106	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  option);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(key,  option);  }	  if(opt.isOption())    {    longOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
107	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  preferredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  preferredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(key,  preferredOpts);  }	  if(opt.isOption())    {    longOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
108	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
109	[BUG]  [BUGGY]  if(opt.isRequired())  {  longOpts.put(key,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  longOpts.put(key,  requiredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  longOpts.put(key,  requiredOpts);  }	  if(opt.isRequired())    {    longOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
110	[BUG]  [BUGGY]  if(opt.isRequired())  {  longOpts.put(key,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  longOpts.put(key,  shortOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  longOpts.put(key,  shortOpts);  }	  if(opt.isRequired())    {    longOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
111	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
112	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
113	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(1);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(1);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(1);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
114	[BUG]  [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(longOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(longOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  shortOpt  :  opt.values())  {  if(longOpts.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    shortOpt    :    opt.values())    {    if(shortOpts.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
115	[BUG]  [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  shortOpt  :  opt.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    shortOpt    :    opt.values())    {    if(shortOpts.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
116	[BUG]  [BUGGY]  for(Option  opt  :  opt.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  opt.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  opt.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }	  for(Option    shortOpt    :    opt.values())    {    if(shortOpts.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
117	[BUG]  [BUGGY]  for(Option  opt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }	  for(Option    shortOpt    :    opt.values())    {    if(shortOpts.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
118	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt);  }	  for(Option    option    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
119	[BUG]  [BUGGY]  opt.addOption(optionGroups,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  opt.addOption(optionGroups,  longOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.addOption(optionGroups,  longOpts);	  opt.addOption(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
120	[BUG]  [BUGGY]  opt.addOption(optionGroups);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  opt.addOption(optionGroups);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.addOption(optionGroups);	  opt.addOption(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
121	[BUG]  [BUGGY]  opt.addOption(this,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  opt.addOption(this,  longOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.addOption(this,  longOpts);	  opt.addOption(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
122	[BUG]  [BUGGY]  opt.addOption(optionGroups,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  opt.addOption(optionGroups,  shortOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.addOption(optionGroups,  shortOpts);	  opt.addOption(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
123	[BUG]  [BUGGY]  while(opt.isOption())  {  shortOpts.put(key,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption())  {  shortOpts.put(key,  requiredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption())  {  shortOpts.put(key,  requiredOpts);	  if(opt.isOption())    {    shortOpts.put(key,    requiredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
124	[BUG]  [BUGGY]  while(opt.isOption())  {  shortOpts.put(key,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption())  {  shortOpts.put(key,  requiredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption())  {  shortOpts.put(key,  requiredOpts);  }	  if(opt.isOption())    {    shortOpts.put(key,    requiredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
125	[BUG]  [BUGGY]  for(Option  opt  :  longOpts.keySet())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  longOpts.keySet())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  longOpts.keySet())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }	  for(Option    opt    :    shortOpts.keySet())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
126	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.keySet())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.keySet())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }	  for(Option    opt    :    shortOpts.keySet())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
127	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
128	[BUG]  [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  longOpts.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
129	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
130	[BUG]  [BUGGY]  Option  opt  =(Option)requiredOpts.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =(Option)requiredOpts.get(opt);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)requiredOpts.get(opt);	  Option    opt    =(Option)requiredOpts.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
131	[BUG]  [BUGGY]  Option  opt  =(Option)shortOpts.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =(Option)shortOpts.get(option);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)shortOpts.get(option);	  Option    opt    =(Option)requiredOpts.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
132	[BUG]  [BUGGY]  Option  opt  =(Option)requiredOpts.get(option,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =(Option)requiredOpts.get(option,  shortOpts);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)requiredOpts.get(option,  shortOpts);	  Option    opt    =(Option)requiredOpts.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
133	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key)  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key)  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key)	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
134	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
135	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
136	[BUG]  [BUGGY]  for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    opt    :    longOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
137	[BUG]  [BUGGY]  if(option.isOption())  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(option.isOption())  {  shortOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(option.isOption())  {  shortOpts.put(key,  opt);  }	  if(opt.isOption())    {    shortOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
138	[BUG]  [BUGGY]  while(opt.isOption())  {  shortOpts.put(key,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption())  {  shortOpts.put(key,  option);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption())  {  shortOpts.put(key,  option);	  if(opt.isOption())    {    shortOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
139	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
140	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(1);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(1);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(1);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
141	[BUG]  [BUGGY]  Option  opt  =(Option)shortOpts.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =(Option)shortOpts.get(key);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)shortOpts.get(key);	  Option    opt    =(Option)requiredOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
142	[BUG]  [BUGGY]  Option  opt  =(Option)requiredOpts.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =(Option)requiredOpts.get(0);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)requiredOpts.get(0);	  Option    opt    =(Option)requiredOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
143	[BUG]  [BUGGY]  Option  shortOpts  =(Option)requiredOpts.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  shortOpts  =(Option)requiredOpts.get(key);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  shortOpts  =(Option)requiredOpts.get(key);	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    neededOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
144	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  shortOpts  =  opt.getOption();  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  shortOpts  =  opt.getOption();	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    neededOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
145	[BUG]  [BUGGY]  Option  shortOpts  =(Option)requiredOpts.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  shortOpts  =(Option)requiredOpts.clone();  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  shortOpts  =(Option)requiredOpts.clone();	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    neededOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
146	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
147	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
148	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  requiredOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
149	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
150	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(optionGroups.isRequired())  {  requiredOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
151	[BUG]  [BUGGY]  while(opt.isRequired())  {  shortOpts.put(key,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isRequired())  {  shortOpts.put(key,  requiredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isRequired())  {  shortOpts.put(key,  requiredOpts);	  if(opt.isRequired())    {    shortOpts.put(key,    requiredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
152	[BUG]  [BUGGY]  while(opt.isRequired())  {  shortOpts.put(key,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isRequired())  {  shortOpts.put(key,  requiredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isRequired())  {  shortOpts.put(key,  requiredOpts);  }	  if(opt.isRequired())    {    shortOpts.put(key,    requiredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
153	[BUG]  [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
154	[BUG]  [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
155	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(0);  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
156	[BUG]  [BUGGY]  while(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
157	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
158	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
159	[BUG]  [BUGGY]  while(requiredOpts!=  null  &&  opt.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(requiredOpts!=  null  &&  opt.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key));  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(requiredOpts!=  null  &&  opt.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key));	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
160	[BUG]  [BUGGY]  while(requiredOpts!=  null  &&  requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(requiredOpts!=  null  &&  requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key));  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(requiredOpts!=  null  &&  requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key));	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
161	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
162	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
163	[BUG]  [BUGGY]  shortOpts.put(key,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(key,  requiredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(key,  requiredOpts);	  shortOpts.put(opt,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
164	[BUG]  [BUGGY]  shortOpts.put(opt,  preferredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(opt,  preferredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  preferredOpts);	  shortOpts.put(opt,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
165	[BUG]  [BUGGY]  shortOpts.put(opt,  requiredOpts.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(opt,  requiredOpts.size());  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  requiredOpts.size());	  shortOpts.put(opt,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
166	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
167	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
168	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
169	[BUG]  [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(requiredOpts!=  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
170	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
171	[BUG]  [BUGGY]  if(option.isRequired())  {  shortOpts.put(key,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(option.isRequired())  {  shortOpts.put(key,  requiredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(option.isRequired())  {  shortOpts.put(key,  requiredOpts);  }	  if(option.isRequired())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
172	[BUG]  [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(1);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(1);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(1);  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(1);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
173	[BUG]  [BUGGY]  while(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
174	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
175	[BUG]  [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
176	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
177	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt);  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
178	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(option))  {  neededOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(option))  {  neededOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(option))  {  neededOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
179	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
180	[BUG]  [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
181	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
182	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt.getValue());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
183	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(option,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  shortOpts.put(option,  requiredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(option,  requiredOpts);  }	  if(opt.isRequired())    {    shortOpts.put(option,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
184	[BUG]  [BUGGY]  shortOpts.put(option,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(option,  key);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(option,  key);	  if(opt.isRequired())    {    shortOpts.put(option,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
185	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(option)||  requiredOpts.contains(option))  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
186	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
187	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
188	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    option    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
189	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key)||    requiredOpts.contains(opt.getKey()))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
190	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key)||    requiredOpts.contains(opt.getKey()))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
191	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key)||    requiredOpts.contains(opt.getKey()))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
192	[BUG]  [BUGGY]  shortOpts.put(opt,  requiredOpts,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(opt,  requiredOpts,  key);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  requiredOpts,  key);	  shortOpts.put(opt,    key,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
193	[BUG]  [BUGGY]  shortOpts.put(key,  opt,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(key,  opt,  requiredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(key,  opt,  requiredOpts);	  shortOpts.put(opt,    key,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
194	[BUG]  [BUGGY]  shortOpts.put(option,  key,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(option,  key,  requiredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(option,  key,  requiredOpts);	  shortOpts.put(opt,    key,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
195	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.isOptional())  {  requiredOpts.put(key,  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired()  ||  opt.isOptional())  {  requiredOpts.put(key,  option);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired()  ||  opt.isOptional())  {  requiredOpts.put(key,  option);  }	  if(opt.isRequired())    {    requiredOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
196	[BUG]  [BUGGY]  Option  option  =  opt.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  option  =  opt.getOption();  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  option  =  opt.getOption();	  if(opt.isRequired())    {    requiredOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
197	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
198	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
199	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
200	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  preferredOpt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  preferredOpt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  requiredOpts.put(key,  preferredOpt);  }	  if(opt.isRequired())    {    shortOpts.put(key,    preferredOpt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
201	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
202	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
203	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt.indexOf(opt));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt.indexOf(opt));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt.indexOf(opt));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    neededOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
204	[BUG]  [BUGGY]  if(opt.isOption())  {  shortOpts.put(opt,  key);  }  else  {  shortOpts.put(opt,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  shortOpts.put(opt,  key);  }  else  {  shortOpts.put(opt,  key);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  shortOpts.put(opt,  key);  }  else  {  shortOpts.put(opt,  key);  }	  if(opt.isOption())    {    longOpts.put(opt,    key);    }    else    {    shortOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
205	[BUG]  [BUGGY]  if(opt.isOption())  {  shortOpts.put(opt,  key);  }  else  {  requiredOpts.put(opt,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  shortOpts.put(opt,  key);  }  else  {  requiredOpts.put(opt,  key);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  shortOpts.put(opt,  key);  }  else  {  requiredOpts.put(opt,  key);  }	  if(opt.isOption())    {    longOpts.put(opt,    key);    }    else    {    shortOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
206	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.remove(opt.indexOf(opt));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.remove(opt.indexOf(opt));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.remove(opt.indexOf(opt));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
207	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
208	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key)||    requiredOpts.contains(opt.getKey()))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
209	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  shortOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  shortOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)||  shortOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key)||    requiredOpts.contains(opt.getKey()))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
210	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  preferredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  preferredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  requiredOpts.put(key,  preferredOpts);  }	  if(opt.isRequired())    {    shortOpts.put(key,    preferredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
211	[BUG]  [BUGGY]  Option  opt  =  opt.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =  opt.getOption();  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =  opt.getOption();	  if(opt.isOption())    {    requiredOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
212	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.contains(key)&&    requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
213	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getValue());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
214	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(option,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(option,  key);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  requiredOpts.put(option,  key);  }	  if(opt.isRequired())    {    requiredOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
215	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key)  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key)  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key)	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
216	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(opt));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(opt));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(opt));  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
217	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(option));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(option));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(option));  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
218	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =(Option)optionGroups.get(option);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)optionGroups.get(option);	  Option    opt    =(Option)requiredOpts.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
219	[BUG]  [BUGGY]  Option  opt  =(Option)opt.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =(Option)opt.get(option);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)opt.get(option);	  Option    opt    =(Option)requiredOpts.get(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
220	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  neededOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    neededOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
221	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
222	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(opt.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  }	  if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
223	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =(Option)optionGroups.get(key);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)optionGroups.get(key);	  Option    opt    =(Option)requiredOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
224	[BUG]  [BUGGY]  Option  opt  =(Option)shortOpts.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =(Option)shortOpts.get(opt);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)shortOpts.get(opt);	  Option    opt    =(Option)requiredOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
225	[BUG]  [BUGGY]  longOpts.put(opt,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  longOpts.put(opt,  opt);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	longOpts.put(opt,  opt);	  longOpts.put(opt,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
226	[BUG]  [BUGGY]  shortOpts.put(opt,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(opt,  opt);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  opt);	  longOpts.put(opt,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
227	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
228	[BUG]  [BUGGY]  if(opt!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
229	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
230	[BUG]  [BUGGY]  Option  opt  =(Option)requiredOpts.get(opt.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =(Option)requiredOpts.get(opt.getKey());  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)requiredOpts.get(opt.getKey());	  if(opt!=    null)    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
231	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  opt.getValue()!=  null)  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  opt.getValue()!=  null)  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  opt.getValue()!=  null)  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
232	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.indexOf(opt));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.indexOf(opt));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.indexOf(opt));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
233	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
234	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(opt,  requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  shortOpts.put(opt,  requiredOpts.indexOf(key));  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(opt,  requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    shortOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
235	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(opt,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(opt,  key);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  requiredOpts.put(opt,  key);  }	  if(opt.isRequired())    {    shortOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
236	[BUG]  [BUGGY]  for(Option  key  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  key  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(key);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  key  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(key);  }	  for(Option    key    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
237	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(option,  requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  shortOpts.put(option,  requiredOpts.indexOf(key));  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(option,  requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    shortOpts.put(option,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
238	[BUG]  [BUGGY]  if(requiredOpts  ==  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts  ==  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts  ==  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
239	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt)||  requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt)||  requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(opt)||  requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
240	[BUG]  [BUGGY]  if(opt.isOption())  {  shortOpts.put(option,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  shortOpts.put(option,  key);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  shortOpts.put(option,  key);  }	  if(opt.isOption())    {    shortOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
241	[BUG]  [BUGGY]  shortOpts.put(opt,  requiredOpts.toArray(new  Option[requiredOpts.size()  ]));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(opt,  requiredOpts.toArray(new  Option[requiredOpts.size()  ]));  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  requiredOpts.toArray(new  Option[requiredOpts.size()  ]));	  shortOpts.put(opt,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
242	[BUG]  [BUGGY]  for(Option  option  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  longOpts.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
243	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option,  option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option,  option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.add(option,  option);  }	  if(opt!=    null)    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
244	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(option,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(option,  opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(option,  opt);  }	  if(opt!=    null)    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
245	[BUG]  [BUGGY]  while(opt.isOption())  {  shortOpts.put(opt,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption())  {  shortOpts.put(opt,  opt);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption())  {  shortOpts.put(opt,  opt);	  while(opt.isOption())    {    shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
246	[BUG]  [BUGGY]  while(opt.isOption())  {  shortOpts.put(opt,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption())  {  shortOpts.put(opt,  requiredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption())  {  shortOpts.put(opt,  requiredOpts);	  while(opt.isOption())    {    shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
247	[BUG]  [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(longOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(longOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  shortOpt  :  opt.values())  {  if(longOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }	  for(Option    shortOpt    :    opt.values())    {    if(shortOpts.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
248	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt  ==  null)  {  if(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt  ==  null)  {  if(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
249	[BUG]  [BUGGY]  opt.addOption(opt,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  opt.addOption(opt,  longOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.addOption(opt,  longOpts);	  opt.addOption(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
250	[BUG]  [BUGGY]  opt.addOption(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  opt.addOption(opt);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.addOption(opt);	  opt.addOption(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
251	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
252	[BUG]  [BUGGY]  Option  optionGroups.put(opt,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  optionGroups.put(opt,  key);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  optionGroups.put(opt,  key);	  optionGroups.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
253	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
254	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  opt.getKey()!=  null)  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  opt.getKey()!=  null)  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  opt.getKey()!=  null)  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
255	[BUG]  [BUGGY]  for(Option  opt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    shortOpt    :    opt.values())    {    if(shortOpts.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
256	[BUG]  [BUGGY]  for(Option  option  :  opt.values())  {  if(optionGroups.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  opt.values())  {  if(optionGroups.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  opt.values())  {  if(optionGroups.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    shortOpt    :    opt.values())    {    if(shortOpts.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
257	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
258	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!requiredOpts.contains(opt))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(!requiredOpts.contains(opt))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(!requiredOpts.contains(opt))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt!=    null)    {    if(!requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
259	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.remove(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.remove(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(option))  {  requiredOpts.remove(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
260	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }	  for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired()    ||    opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
261	[BUG]  [BUGGY]  for(Option  key  :  shortOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  key  :  shortOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(key);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  key  :  shortOpts.values())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(key);  }	  for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired()    ||    opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
262	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  opt);  }  else  {  shortOpts.put(opt,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  opt);  }  else  {  shortOpts.put(opt,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(opt,  opt);  }  else  {  shortOpts.put(opt,  opt);  }	  if(opt.isOption())    {    longOpts.put(key,    opt);    }    else    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
263	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  requiredOpts);  }  else  {  shortOpts.put(opt,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  requiredOpts);  }  else  {  shortOpts.put(opt,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(opt,  requiredOpts);  }  else  {  shortOpts.put(opt,  opt);  }	  if(opt.isOption())    {    longOpts.put(key,    opt);    }    else    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
264	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  option);  }  else  {  shortOpts.put(opt,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  option);  }  else  {  shortOpts.put(opt,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(opt,  option);  }  else  {  shortOpts.put(opt,  opt);  }	  if(opt.isOption())    {    longOpts.put(key,    opt);    }    else    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
265	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt  ==  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt  ==  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  return  this;  }	  if(opt!=    null)    {    if(!opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
266	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt  ==  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt  ==  null)  {  if(!opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(!opt.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    return    this;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
267	[BUG]  [BUGGY]  shortOpts.put(opt,  key,  preferredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(opt,  key,  preferredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  key,  preferredOpts);	  shortOpts.put(opt,    key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
268	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key),  opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key),  opt);  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
269	[BUG]  [BUGGY]  for(Option  option  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }	  for(Option    option    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
270	[BUG]  [BUGGY]  for(Option  option  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    option    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
271	[BUG]  [BUGGY]  opt.put(key,  preferredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  opt.put(key,  preferredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.put(key,  preferredOpts);	  opt.put(key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
272	[BUG]  [BUGGY]  if(opt.isOption())  {  shortOpts.put(opt,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  shortOpts.put(opt,  key);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  shortOpts.put(opt,  key);  }	  if(opt.isOption())    {    longOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
273	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
274	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
275	[BUG]  [BUGGY]  for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(option);  }	  for(Option    option    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
276	[BUG]  [BUGGY]  if(opt.isOption())  {  preferredOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  preferredOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  preferredOpts.put(key,  opt);  }	  if(opt.isOption())    {    shortOpts.put(key,    preferredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
277	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(opt))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
278	[BUG]  [BUGGY]  if(requiredOpts  ==  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts  ==  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts  ==  null)  {  if(requiredOpts.containsKey(opt))  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
279	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
280	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(opt))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(opt))  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(opt))  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
281	[BUG]  [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  shortOpt  :  opt.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  shortOpt  :  opt.values())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
282	[BUG]  [BUGGY]  shortOpts.put(opt,  opt,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(opt,  opt,  requiredOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  opt,  requiredOpts);	  shortOpts.put(opt,    key,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
283	[BUG]  [BUGGY]  shortOpts.put(opt,  key,  requiredOpts.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(opt,  key,  requiredOpts.size());  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  key,  requiredOpts.size());	  shortOpts.put(opt,    key,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
284	[BUG]  [BUGGY]  requiredOpts.put(key,  requiredOpts.indexOf(option));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  requiredOpts.put(key,  requiredOpts.indexOf(option));  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	requiredOpts.put(key,  requiredOpts.indexOf(option));	  if(opt.isRequired())    {    shortOpts.put(key,    requiredOpts.indexOf(option));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
285	[BUG]  [BUGGY]  opt.put(key,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  opt.put(key,  lengthOpts);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt.put(key,  lengthOpts);	  opt.put(key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
286	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(opt);  }	  if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
287	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(!requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(!requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(!requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
288	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(!requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(!requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(!requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
289	[BUG]  [BUGGY]  if(requiredOpts.contains(opt))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts.contains(opt))  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts.contains(opt))  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
290	[BUG]  [BUGGY]  if(opt.isOption()  ||  opt.isOption())  {  shortOpts.put(option,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption()  ||  opt.isOption())  {  shortOpts.put(option,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption()  ||  opt.isOption())  {  shortOpts.put(option,  opt);  }	  if(opt.isOption())    {    shortOpts.put(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
291	[BUG]  [BUGGY]  if(option.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(option));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(option.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(option));  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(option.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(option));  }	  if(opt.isRequired())    {    shortOpts.put(key,    requiredOpts.indexOf(option));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
292	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  opt.isRequired())  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  opt.isRequired())  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(key)&&  opt.isRequired())  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
293	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  option  :  shortOpts.values())  {  if(option.isRequired())  {  requiredOpts.add(opt.getValue());  }	  for(Option    option    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
294	[BUG]  [BUGGY]  Option  opt  =(Option)this.longOpts.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  Option  opt  =(Option)this.longOpts.get(key);  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	Option  opt  =(Option)this.longOpts.get(key);	  Option    opt    =(Option)requiredOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
295	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  optionGroups);  }  else  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  optionGroups);  }  else  {  shortOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(key,  optionGroups);  }  else  {  shortOpts.put(key,  opt);  }	  if(opt.isOption())    {    longOpts.put(key,    opt);    }    else    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
296	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.isEmpty())  {  requiredOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired()  ||  opt.isEmpty())  {  requiredOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired()  ||  opt.isEmpty())  {  requiredOpts.put(key,  opt);  }	  if(opt.isRequired())    {    requiredOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
297	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  optionGroups);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(key,  optionGroups);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(key,  optionGroups);  }	  if(opt.isOption())    {    longOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
298	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(opt));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(opt));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(opt));  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
299	[BUG]  [BUGGY]  if(opt.isOption())  {  shortOpts.put(key,  optionGroups.indexOf(opt));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  shortOpts.put(key,  optionGroups.indexOf(opt));  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  shortOpts.put(key,  optionGroups.indexOf(opt));  }	  if(opt.isOption())    {    shortOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
300	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
301	[BUG]  [BUGGY]  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
302	[BUG]  [BUGGY]  if(opt.isRequired()  ||  preferredOpts.contains(key))  {  shortOpts.put(key,  preferredOpt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired()  ||  preferredOpts.contains(key))  {  shortOpts.put(key,  preferredOpt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired()  ||  preferredOpts.contains(key))  {  shortOpts.put(key,  preferredOpt);  }	  if(opt.isRequired())    {    shortOpts.put(key,    preferredOpt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
303	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(preferredOpt));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(preferredOpt));  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts.indexOf(preferredOpt));  }	  if(opt.isRequired())    {    shortOpts.put(key,    preferredOpt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
304	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
305	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key),  opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(key),  opt);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
306	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(option));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(option));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(requiredOpts.indexOf(option));  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
307	[BUG]  [BUGGY]  longOpts.put(opt,  optionGroups);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  longOpts.put(opt,  optionGroups);  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	longOpts.put(opt,  optionGroups);	  longOpts.put(opt,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
308	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    neededOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
309	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  neededOpts.remove(requiredOpts.indexOf(key));  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    neededOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
310	[BUG]  [BUGGY]  for(Option  key  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  key  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  key  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.getValue());  }	  for(Option    shortOpt    :    opt.values())    {    if(shortOpts.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
311	[BUG]  [BUGGY]  for(Option  key  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  key  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(key,  opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  key  :  shortOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(key,  opt);  }	  for(Option    key    :    shortOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
312	[BUG]  [BUGGY]  if(opt.isRequired()  ||  shortOpts.contains(key))  {  shortOpts.put(key,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired()  ||  shortOpts.contains(key))  {  shortOpts.put(key,  requiredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired()  ||  shortOpts.contains(key))  {  shortOpts.put(key,  requiredOpts);  }	  if(opt.isRequired())    {    shortOpts.put(key,    requiredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
313	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts.toArray(new  Option[requiredOpts.size()  ]));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts.toArray(new  Option[requiredOpts.size()  ]));  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(key,  requiredOpts.toArray(new  Option[requiredOpts.size()  ]));  }	  if(opt.isRequired())    {    shortOpts.put(key,    requiredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
314	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
315	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(0);  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
316	[BUG]  [BUGGY]  opt!=  null  &&  requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  opt!=  null  &&  requiredOpts.contains(key))  {  requiredOpts.remove(0);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	opt!=  null  &&  requiredOpts.contains(key))  {  requiredOpts.remove(0);  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(0);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
317	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  preferredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  preferredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(opt,  preferredOpts);  }	  if(opt.isOption())    {    longOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
318	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired()  ||  requiredOpts.contains(key))  {  requiredOpts.add(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
319	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
320	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  preferred);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  preferred);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  requiredOpts.put(key,  preferred);  }	  if(opt.isRequired())    {    requiredOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
321	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  optional);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  requiredOpts.put(key,  optional);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  requiredOpts.put(key,  optional);  }	  if(opt.isRequired())    {    requiredOpts.put(key,    option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
322	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(option,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(option,  opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key))  {  requiredOpts.add(option,  opt);  }	  if(opt!=    null)    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
323	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option)&&  opt.isRequired())  {  requiredOpts.add(option,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(option)&&  opt.isRequired())  {  requiredOpts.add(option,  opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(option)&&  opt.isRequired())  {  requiredOpts.add(option,  opt);  }	  if(opt!=    null)    {    if(requiredOpts.contains(option))    {    requiredOpts.add(option,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
324	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.remove(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.remove(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(opt.getKey()))  {  requiredOpts.remove(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
325	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  opt.getValue()!=  null)  {  requiredOpts.remove(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.contains(key)&&  opt.getValue()!=  null)  {  requiredOpts.remove(opt.getKey());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.contains(key)&&  opt.getValue()!=  null)  {  requiredOpts.remove(opt.getKey());  }	  if(opt!=    null)    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
326	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(key),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(key),  opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.isRequired())  {  requiredOpts.add(requiredOpts.indexOf(key),  opt);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
327	[BUG]  [BUGGY]  if(shortOpts.contains(key))  {  if(opt.isRequired())  {  shortOpts.put(opt,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(shortOpts.contains(key))  {  if(opt.isRequired())  {  shortOpts.put(opt,  key);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(shortOpts.contains(key))  {  if(opt.isRequired())  {  shortOpts.put(opt,  key);  }	  if(opt.isRequired())    {    shortOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
328	[BUG]  [BUGGY]  for(Option  key  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  key  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  key  :  opt.values())  {  if(shortOpts.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    shortOpt    :    opt.values())    {    if(shortOpts.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
329	[BUG]  [BUGGY]  for(Option  opt  :  opt.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  opt.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  opt.values())  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    shortOpt    :    opt.values())    {    if(shortOpts.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
330	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt);  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
331	[BUG]  [BUGGY]  while(opt.isOption())  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption())  {  shortOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption())  {  shortOpts.put(key,  opt);  }	  while(opt.isOption())    {    shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
332	[BUG]  [BUGGY]  while(opt.isOption())  {  requiredOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  while(opt.isOption())  {  requiredOpts.put(key,  opt);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	while(opt.isOption())  {  requiredOpts.put(key,  opt);  }	  while(opt.isOption())    {    shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
333	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(value))  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt!=  null)  {  if(requiredOpts.containsKey(value))  {  requiredOpts.add(option);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt!=  null)  {  if(requiredOpts.containsKey(value))  {  requiredOpts.add(option);  }	  if(opt!=    null)    {    if(requiredOpts.containsKey(option))    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
334	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(option))  {  requiredOpts.add(opt);  }	  if(requiredOpts!=    null)    {    if(opt.isRequired())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
335	[BUG]  [BUGGY]  if(opt.isRequired())  {  shortOpts.put(option,  key,  requiredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  shortOpts.put(option,  key,  requiredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  shortOpts.put(option,  key,  requiredOpts);  }	  if(opt.isRequired())    {    shortOpts.put(option,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
336	[BUG]  [BUGGY]  if(opt.isRequired()  ||  preferredOpts.contains(key))  {  shortOpts.put(key,  preferredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired()  ||  preferredOpts.contains(key))  {  shortOpts.put(key,  preferredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired()  ||  preferredOpts.contains(key))  {  shortOpts.put(key,  preferredOpts);  }	  if(opt.isRequired())    {    shortOpts.put(key,    preferredOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
337	[BUG]  [BUGGY]  if(opt.isRequired())  {  longOpts.put(key,  preferredOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isRequired())  {  longOpts.put(key,  preferredOpts);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isRequired())  {  longOpts.put(key,  preferredOpts);  }	  if(opt.isRequired())    {    longOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
338	[BUG]  [BUGGY]  for(Option  opt  :  this.longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  this.longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  this.longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.getValue());  }	  for(Option    opt    :    longOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.getValue());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
339	[BUG]  [BUGGY]  shortOpts.put(opt,  new  Option(requiredOpts));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  shortOpts.put(opt,  new  Option(requiredOpts));  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	shortOpts.put(opt,  new  Option(requiredOpts));	  shortOpts.put(opt,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
340	[BUG]  [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  key,  requiredOpts);  }  else  {  shortOpts.put(opt,  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(opt.isOption())  {  longOpts.put(opt,  key,  requiredOpts);  }  else  {  shortOpts.put(opt,  key);  }  [BUGGY]        return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(opt.isOption())  {  longOpts.put(opt,  key,  requiredOpts);  }  else  {  shortOpts.put(opt,  key);  }	  if(opt.isOption())    {    longOpts.put(opt,    key);    }    else    {    shortOpts.put(opt,    key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
341	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.keySet())  {  if(opt.isRequired()  ||  opt.isRequired())  {  requiredOpts.add(opt);  }	  for(Option    opt    :    shortOpts.values())    {    if(opt.isRequired()    ||    opt.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
342	[BUG]  [BUGGY]  if(requiredOpts.contains(opt))  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts.contains(opt))  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts.contains(opt))  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
343	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(opt);  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	if(requiredOpts!=  null)  {  requiredOpts.add(opt);  }	  if(opt!=    null)    {    if(requiredOpts.isRequired())    {    requiredOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
344	[BUG]  [BUGGY]  for(Option  opt  :  this.longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  this.longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  this.longOpts.values())  {  if(opt.isRequired())  {  requiredOpts.add(opt.toString());  }	  for(Option    opt    :    longOpts.values())    {    if(opt.isRequired())    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
345	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }      [BUGGY]  for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }  [BUGGY]      shortOpts.put(key,  opt);  return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	172	172	1	replace	for(Option  opt  :  shortOpts.keySet())  {  if(requiredOpts.contains(opt))  {  requiredOpts.add(opt.toString());  }	  for(Option    opt    :    shortOpts.values())    {    if(requiredOpts.contains(opt))    {    requiredOpts.add(opt.toString());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
