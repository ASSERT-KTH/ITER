bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =(Option)option.clone(),  group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone(),  group,  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone(),  group,  requiredOpts);	  Option    option    =(Option)option.clone(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
2	[BUG]  [BUGGY]  Option  option  =(Option)option.clone(),  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone(),  group,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone(),  group,  shortOpts);	  Option    option    =(Option)option.clone(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
3	[BUG]  [BUGGY]  Option  option  =(Option)option.clone(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone(),  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone(),  shortOpts);	  Option    option    =(Option)option.clone(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
4	[BUG]  [BUGGY]  Option  option  =(Option)option.clone(),  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone(),  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone(),  requiredOpts);	  Option    option    =(Option)option.clone(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
5	[BUG]  [BUGGY]  Option  option  =(Option)option.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getShortOpts();  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getShortOpts();	  Option    option    =(Option)option.getKey();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
6	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
7	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts,  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts,  requiredOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
8	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  requiredOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
9	[BUG]  [BUGGY]  option.setRequired(true,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(true,  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(true,  requiredOpts);	  option.setRequired(false,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
10	[BUG]  [BUGGY]  option.setRequired(false,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  shortOpts);	  option.setRequired(false,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
11	[BUG]  [BUGGY]  option.setRequired(false,  requiredOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  requiredOpts,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  requiredOpts,  shortOpts);	  option.setRequired(false,    requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
12	[BUG]  [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  group,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption( "requiredOpts ",  group,  shortOpts);	  Option    option    =    option.getOption(   "requiredOpts   ",    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
13	[BUG]  [BUGGY]  Option  option  =(Option)option.cloneTree(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.cloneTree(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.cloneTree(),  group);	  Option    option    =(Option)option.cloneTree();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
14	[BUG]  [BUGGY]  Option  option  =(Option)option.cloneTree(),  group;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.cloneTree(),  group;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.cloneTree(),  group;	  Option    option    =(Option)option.cloneTree();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
15	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(group);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
16	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(group,  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(group,  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
17	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(longOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(longOpts,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(longOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
18	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(requiredOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
19	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(group,  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group,  requiredOpts);	  Option    option    =    option.getOption(group,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
20	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(group,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group,  shortOpts);	  Option    option    =    option.getOption(group,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
21	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(group,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group,  group);	  Option    option    =    option.getOption(group,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
22	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(group,  0);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group,  0);	  Option    option    =    option.getOption(group,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
23	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  longOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(),  longOpts;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  longOpts;	  OptionGroup    group    =    option.getGroup(),    shortOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
24	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  shortOpts,  longOpts);	  OptionGroup    group    =    option.getGroup(),    shortOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
25	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  longOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  longOpts;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  shortOpts,  longOpts;	  OptionGroup    group    =    option.getGroup(),    shortOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
26	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  requiredOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  requiredOpts;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  shortOpts,  requiredOpts;	  OptionGroup    group    =    option.getGroup(),    shortOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
27	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(true);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(true);	  OptionGroup    shortOpts    =    option.getShortOpts(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
28	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(false,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(false,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(false,  group);	  OptionGroup    shortOpts    =    option.getShortOpts(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
29	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(true,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(true,  false);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(true,  false);	  OptionGroup    shortOpts    =    option.getShortOpts(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
30	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(false,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(false,  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(false,  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
31	[BUG]  [BUGGY]  OptionGroup  longOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  longOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  longOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  group);	  OptionGroup    longOpts    =    option.getShortOpts();    requiredOpts.add(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
32	[BUG]  [BUGGY]  Option  option  =  option.getOptionGroup(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOptionGroup(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOptionGroup(),  group);	  Option    option    =    option.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
33	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  group,  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  group,  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
34	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
35	[BUG]  [BUGGY]  OptionsGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionsGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionsGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);	  if(option.getShortOpts()!=    shortOpts)    {    OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
36	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  neededOpts.add(shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  neededOpts.add(shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  neededOpts.add(shortOpts);	  if(option.getShortOpts()!=    shortOpts)    {    OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
37	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey(),  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(option.getKey(),  shortOpts);	  OptionGroup    group    =    option.getGroup(option.getKey());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
38	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey(),  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey(),  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(option.getKey(),  requiredOpts);	  OptionGroup    group    =    option.getGroup(option.getKey());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
39	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(option.getShortOpts());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(option.getShortOpts());  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(option.getShortOpts());	  OptionGroup    group    =    option.getGroup(option.getKey());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
40	[BUG]  [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption( "requiredOpts ",  longOpts);	  Option    option    =    option.getOption(   "requiredOpts   ",    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
41	[BUG]  [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  shortOpts,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption( "requiredOpts ",  shortOpts,  longOpts);	  Option    option    =    option.getOption(   "requiredOpts   ",    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
42	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(group,  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(group,  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(longOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
43	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  shortOpts,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  shortOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(longOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
44	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  group,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  group,  false);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  group,  false);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(longOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
45	[BUG]  [BUGGY]  Option  option  =  option.getOptions(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOptions(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOptions(),  group);	  Option    option    =    option.getOptions();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
46	[BUG]  [BUGGY]  option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  group);	  option    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
47	[BUG]  [BUGGY]  Option  option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  group);	  option    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
48	[BUG]  [BUGGY]  Option  option  =(Option)option.getOption(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getOption(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getOption(),  group);	  Option    option    =(Option)option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
49	[BUG]  [BUGGY]  option  =(Option)option.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option  =(Option)option.getOption();  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =(Option)option.getOption();	  Option    option    =(Option)option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
50	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(),  shortOpts;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(),  shortOpts;	  Option    option    =    option.getOption(),    group;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
51	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(),  group,  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(),  group,  requiredOpts);	  Option    option    =    option.getOption(),    group;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
52	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  group,  requiredOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(),  group,  requiredOpts;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(),  group,  requiredOpts;	  Option    option    =    option.getOption(),    group;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
53	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(),  group,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(),  group,  shortOpts);	  Option    option    =    option.getOption(),    group;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
54	[BUG]  [BUGGY]  Option  option  =(Option)option.getImmediateParentPointer(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getImmediateParentPointer(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getImmediateParentPointer(),  group);	  Option    option    =(Option)option.getImmediateParentPointer();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
55	[BUG]  [BUGGY]  Option  option  =(Option)option.getImmediateParentPointer(),  group;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getImmediateParentPointer(),  group;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getImmediateParentPointer(),  group;	  Option    option    =(Option)option.getImmediateParentPointer();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
56	[BUG]  [BUGGY]  Option  option  =  option.getOption(group, "RequiredOpts ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(group, "RequiredOpts ");  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group, "RequiredOpts ");	  Option    option    =    option.getOption(   "RequiredOpts   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
57	[BUG]  [BUGGY]  Option  option  =  option.getOption( "RequiredOpts ",  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption( "RequiredOpts ",  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption( "RequiredOpts ",  shortOpts);	  Option    option    =    option.getOption(   "RequiredOpts   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
58	[BUG]  [BUGGY]  option  =  option.getOption(group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option  =  option.getOption(group,  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =  option.getOption(group,  requiredOpts);	  option    =    option.getOption(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
59	[BUG]  [BUGGY]  option  =  option.getOption(group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option  =  option.getOption(group,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =  option.getOption(group,  shortOpts);	  option    =    option.getOption(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
60	[BUG]  [BUGGY]  option  =  option.getOption(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option  =  option.getOption(requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =  option.getOption(requiredOpts);	  option    =    option.getOption(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
61	[BUG]  [BUGGY]  Option  option  =  option.getOption(true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(true);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(true);	  Option    option    =    option.getOption(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
62	[BUG]  [BUGGY]  Option  option  =  option.getOption(false,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(false,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(false,  group);	  Option    option    =    option.getOption(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
63	[BUG]  [BUGGY]  Option  option  =  option.getOption(null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(null);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(null);	  Option    option    =    option.getOption(false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
64	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(requiredOpts);	  OptionGroup    group    =    option.getGroup(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
65	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(group);	  OptionGroup    group    =    option.getGroup(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
66	[BUG]  [BUGGY]  option.setRequired(false,  group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  group,  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  group,  requiredOpts);	  option.setRequired(true,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
67	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(),  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  longOpts);	  OptionGroup    group    =    option.getGroup(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
68	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  shortOpts,  requiredOpts);	  OptionGroup    group    =    option.getGroup(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
69	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(),  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  requiredOpts);	  OptionGroup    group    =    option.getGroup(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
70	[BUG]  [BUGGY]  Option  option  =(Option)option.getValue(),  group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getValue(),  group,  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getValue(),  group,  requiredOpts);	  Option    option    =(Option)option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
71	[BUG]  [BUGGY]  Option  option  =(Option)option.getValue(),  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getValue(),  group,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getValue(),  group,  shortOpts);	  Option    option    =(Option)option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
72	[BUG]  [BUGGY]  Option  option  =(Option)option.getValue(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getValue(),  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getValue(),  shortOpts);	  Option    option    =(Option)option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
73	[BUG]  [BUGGY]  Option  option  =(Option)option.getValue(),  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getValue(),  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getValue(),  requiredOpts);	  Option    option    =(Option)option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
74	[BUG]  [BUGGY]  Option  option  =  option.getShortOpts();  shortOpts.put(option.getKey(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getShortOpts();  shortOpts.put(option.getKey(),  option);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getShortOpts();  shortOpts.put(option.getKey(),  option);	  Option    option    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
75	[BUG]  [BUGGY]  Option  option  =  option.getShortOpts(),  shortOpts.put(option.getKey(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getShortOpts(),  shortOpts.put(option.getKey(),  option);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getShortOpts(),  shortOpts.put(option.getKey(),  option);	  Option    option    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
76	[BUG]  [BUGGY]  Option  option  =(Option)option.clone()  :  optionGroup;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone()  :  optionGroup;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone()  :  optionGroup;	  Option    option    =(Option)option.clone()    :    option;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
77	[BUG]  [BUGGY]  Option  option  =(Option)option.clone()  :  optionGroups;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone()  :  optionGroups;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone()  :  optionGroups;	  Option    option    =(Option)option.clone()    :    option;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
78	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroups(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroups(),  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroups(),  shortOpts);	  OptionGroup    group    =    option.getGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
79	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroups(),  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroups(),  shortOpts;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroups(),  shortOpts;	  OptionGroup    group    =    option.getGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
80	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroups(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroups(requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroups(requiredOpts);	  OptionGroup    group    =    option.getGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
81	[BUG]  [BUGGY]  option  =(Option)option.clone(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option  =(Option)option.clone(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =(Option)option.clone(),  group);	  option    =(Option)option.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
82	[BUG]  [BUGGY]  option.setRequired(falseOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(falseOpts,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(falseOpts,  shortOpts);	  option.setRequired(falseOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
83	[BUG]  [BUGGY]  option.setRequired(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(requiredOpts);	  option.setRequired(falseOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
84	[BUG]  [BUGGY]  option.setRequired(trueOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(trueOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(trueOpts);	  option.setRequired(falseOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
85	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  group,  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  group,  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
86	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
87	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(option.getKey(),  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(option.getKey(),  shortOpts,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(option.getKey(),  shortOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
88	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(),  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(),  shortOpts);	  Option    option    =    option.getOption(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
89	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  group,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(),  group,  false);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(),  group,  false);	  Option    option    =    option.getOption(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
90	[BUG]  [BUGGY]  Option  option  =  option.getOptionGroup(group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOptionGroup(group,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOptionGroup(group,  shortOpts);	  Option    option    =    option.getOptionGroup(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
91	[BUG]  [BUGGY]  Option  option  =  option.getOptionGroup(group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOptionGroup(group,  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOptionGroup(group,  requiredOpts);	  Option    option    =    option.getOptionGroup(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
92	[BUG]  [BUGGY]  Option  option  =  option.getOptionGroup(group,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOptionGroup(group,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOptionGroup(group,  group);	  Option    option    =    option.getOptionGroup(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
93	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  group,  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
94	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  requiredOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  group,  requiredOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
95	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  lengthOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  lengthOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
96	[BUG]  [BUGGY]  longOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  longOpts.put(option.getKey(),  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	longOpts.put(option.getKey(),  shortOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    longOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
97	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    longOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
98	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts.put(option.getKey(),  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts.put(option.getKey(),  shortOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    longOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
99	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getLongOpts(),  group);	  OptionGroup    shortOpts    =    option.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
100	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(),  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getLongOpts(),  longOpts);	  OptionGroup    shortOpts    =    option.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
101	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,   "requiredOpts ",  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(group,   "requiredOpts ",  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group,   "requiredOpts ",  shortOpts);	  Option    option    =    option.getOption(group,   "requiredOpts   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
102	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  shortOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
103	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  shortOpts,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  shortOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
104	[BUG]  [BUGGY]  Option  option  =(Option)option.clone(),  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone(),  shortOpts;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone(),  shortOpts;	  Option    option    =(Option)option.clone(),    group;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
105	[BUG]  [BUGGY]  Option  option  =(Option)option.clone(),  group,  requiredOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone(),  group,  requiredOpts;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone(),  group,  requiredOpts;	  Option    option    =(Option)option.clone(),    group;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
106	[BUG]  [BUGGY]  Option  option  =  option.getOption(requiredOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(requiredOpts,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(requiredOpts,  group);	  Option    option    =    option.getOption(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
107	[BUG]  [BUGGY]  Option  option  =  option.getOption(requiredOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(requiredOpts,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(requiredOpts,  shortOpts);	  Option    option    =    option.getOption(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
108	[BUG]  [BUGGY]  option.setRequired(false,  shortOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  shortOpts,  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  shortOpts,  requiredOpts);	  option.setRequired(true,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
109	[BUG]  [BUGGY]  option.setRequired(false,  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  shortOpts,  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  shortOpts,  group);	  option.setRequired(true,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
110	[BUG]  [BUGGY]  option.setRequired(false,  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  shortOpts,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  shortOpts,  longOpts);	  option.setRequired(true,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
111	[BUG]  [BUGGY]  option  =  option.getShortOpts();  shortOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option  =  option.getShortOpts();  shortOpts.put(option.getKey(),  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =  option.getShortOpts();  shortOpts.put(option.getKey(),  shortOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    shortOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
112	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(lengthOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(lengthOpts,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(lengthOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(lengthOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
113	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(lengthOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(lengthOpts,  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(lengthOpts,  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(lengthOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
114	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroups(option.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroups(option.getKey());  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroups(option.getKey());	  OptionGroup    group    =    option.getGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
115	[BUG]  [BUGGY]  option.setRequired(false,  group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  group,  shortOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  group,  shortOpts);	  option.setRequired(false,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
116	[BUG]  [BUGGY]  Option  option  =  option.getOption( "RequiredOpts ",  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption( "RequiredOpts ",  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption( "RequiredOpts ",  group);	  Option    option    =    option.getOption(   "RequiredOpts   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
117	[BUG]  [BUGGY]  Option  option  =  option.getOption( "RequiredOpts ",  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption( "RequiredOpts ",  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption( "RequiredOpts ",  requiredOpts);	  Option    option    =    option.getOption(   "RequiredOpts   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
118	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey(),  options);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey(),  options);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(option.getKey(),  options);	  OptionGroup    group    =    option.getGroup(option.getKey());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
119	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey(),  this);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey(),  this);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(option.getKey(),  this);	  OptionGroup    group    =    option.getGroup(option.getKey());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
120	[BUG]  [BUGGY]  Option  option  =(Option)option.clone(),  group,  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone(),  group,  shortOpts;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone(),  group,  shortOpts;	  Option    option    =(Option)option.clone(),    group;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
121	[BUG]  [BUGGY]  if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  shortOpts);  }  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  shortOpts);  }	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
122	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(group,  false);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group,  false);	  Option    option    =    option.getOption(group,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
123	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  this);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(group,  this);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group,  this);	  Option    option    =    option.getOption(group,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
124	[BUG]  [BUGGY]  Option  option  =(Option)option.clone()?  option  :  option;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone()?  option  :  option;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone()?  option  :  option;	  Option    option    =(Option)option.clone()    :    option;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
125	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getLongOpts(longOpts);	  OptionGroup    shortOpts    =    option.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
126	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  options.getLongOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  options.getLongOpts();  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  options.getLongOpts();	  OptionGroup    shortOpts    =    option.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
127	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  langOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group,  langOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  group,  langOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
128	[BUG]  [BUGGY]  option  =  option.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option  =  option.getShortOpts();  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =  option.getShortOpts();	  option    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
129	[BUG]  [BUGGY]  Option  option  =(Option)option.getOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getOptionGroup();  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getOptionGroup();	  Option    option    =(Option)option.getKey();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
130	[BUG]  [BUGGY]  option.setRequired(false,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  longOpts);	  option.setRequired(true,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
131	[BUG]  [BUGGY]  option.setRequired(true,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(true,  longOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(true,  longOpts);	  option.setRequired(true,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
132	[BUG]  [BUGGY]  option.setRequired(false,  false,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  false,  group);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  false,  group);	  option.setRequired(true,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
133	[BUG]  [BUGGY]  option  =  option.getOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option  =  option.getOption(option);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =  option.getOption(option);	  option    =    option.getOption(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
134	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  lengthOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  shortOpts,  lengthOpts);	  OptionGroup    group    =    option.getGroup(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
135	[BUG]  [BUGGY]  Option  option  =(Option)option.clonePath();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clonePath();  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clonePath();	  Option    option    =(Option)option.cloneTree();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
136	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
137	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts();  longOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts();  longOpts.put(option.getKey(),  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getLongOpts();  longOpts.put(option.getKey(),  shortOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    longOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
138	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(option.getKey(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(option.getKey(),  longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(option.getKey(),  longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    shortOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
139	[BUG]  [BUGGY]  Option  option  =  option.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getShortOpts();  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getShortOpts();	  Option    option    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
140	[BUG]  [BUGGY]  Option  option  =  option.getOption();  requiredOpts.put(option.getKey(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption();  requiredOpts.put(option.getKey(),  option);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption();  requiredOpts.put(option.getKey(),  option);	  Option    option    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
141	[BUG]  [BUGGY]  Option  option  =(Option)option.getOptionPointer();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getOptionPointer();  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getOptionPointer();	  Option    option    =(Option)option.getImmediateParentPointer();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
142	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,   "requiredOpts ",  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(group,   "requiredOpts ",  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group,   "requiredOpts ",  requiredOpts);	  Option    option    =    option.getOption(group,   "requiredOpts   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
143	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(option,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(option,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(option,  shortOpts);	  OptionGroup    group    =    option.getGroup(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
144	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey(),  option);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(option.getKey(),  option);	  OptionGroup    group    =    option.getGroup(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
145	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  shortOpts,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  shortOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
146	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  shortOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
147	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.add(group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.add(group,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.add(group,  shortOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
148	[BUG]  [BUGGY]  Option  option  =  option.getOption(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(longOpts);	  Option    option    =    option.getOption(requiredOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
149	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts,  false);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  shortOpts,  false);	  OptionGroup    group    =    option.getGroup(),    shortOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
150	[BUG]  [BUGGY]  OptionGroup  longOpts  =  option.getLongOpts();  requiredOpts.add(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  longOpts  =  option.getLongOpts();  requiredOpts.add(longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  longOpts  =  option.getLongOpts();  requiredOpts.add(longOpts);	  OptionGroup    longOpts    =    option.getShortOpts();    requiredOpts.add(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
151	[BUG]  [BUGGY]  longOpts.put(option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  longOpts.put(option.getKey(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	longOpts.put(option.getKey(),  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    longOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
152	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(lengthOpts,  group);	  OptionGroup    shortOpts    =    option.getShortOpts(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
153	[BUG]  [BUGGY]  if(option.getShortOpts()  ==  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  if(option.getShortOpts()  ==  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);  }  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	if(option.getShortOpts()  ==  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);  }	  if(option.getShortOpts()!=    shortOpts)    {    OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
154	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(group,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(group,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(group,  shortOpts);	  OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
155	[BUG]  [BUGGY]  Option  option  =(Option)option.clone(),  group,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone(),  group,  false);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone(),  group,  false);	  Option    option    =(Option)option.clone(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
156	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getOption(group,  true);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group,  true);	  Option    option    =    option.getOption(group,    option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
157	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts(group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getLongOpts(group);	  OptionGroup    shortOpts    =    option.getLongOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
158	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  this.longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  this.longOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  this.longOpts);	  OptionGroup    shortOpts    =    option.getShortOpts(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
159	[BUG]  [BUGGY]  Option  option  =(Option)option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getKey(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getKey(),  group);	  Option    option    =(Option)option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
160	[BUG]  [BUGGY]  Option  option  =(Option)option.getValue(),  group,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getValue(),  group,  false);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getValue(),  group,  false);	  Option    option    =(Option)option.getValue(),    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
161	[BUG]  [BUGGY]  Option  option  =(Option)option.getAssignedValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.getAssignedValue();  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getAssignedValue();	  Option    option    =(Option)option.getKey();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
162	[BUG]  [BUGGY]  Option  option  =(Option)option.clone(),  this.shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =(Option)option.clone(),  this.shortOpts;  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone(),  this.shortOpts;	  Option    option    =(Option)option.clone(),    group;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
163	[BUG]  [BUGGY]  Option  option  =  option.getShortOpts();  shortOpts.put(option.getKey(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  Option  option  =  option.getShortOpts();  shortOpts.put(option.getKey(),  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getShortOpts();  shortOpts.put(option.getKey(),  group);	  OptionGroup    shortOpts    =    option.getShortOpts();    shortOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
164	[BUG]  [BUGGY]  option.setRequired(falseOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(falseOpts,  requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(falseOpts,  requiredOpts);	  option.setRequired(falseOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
165	[BUG]  [BUGGY]  option.setRequired(true,  group.isRequired());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(true,  group.isRequired());  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(true,  group.isRequired());	  option.setRequired(true,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
166	[BUG]  [BUGGY]  option.setRequired(false,  groups);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  groups);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  groups);	  option.setRequired(true,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
167	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  OptionGroup  group  =  option.getGroup(),  longOpts,  shortOpts);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  longOpts,  shortOpts);	  OptionGroup    group    =    option.getGroup(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
168	[BUG]  [BUGGY]  option.setRequired(false,  group.isRequired());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  group.isRequired());  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  group.isRequired());	  option.setRequired(false,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
169	[BUG]  [BUGGY]  option.setRequired(false,  group.requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option.setRequired(false,  group.requiredOpts);  [BUGGY]      addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  group.requiredOpts);	  option.setRequired(false,    group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
170	[BUG]  [BUGGY]  option  =  option.getOption(group,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option  =  option.getOption(group,  group);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =  option.getOption(group,  group);	  option    =    option.getOption(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
171	[BUG]  [BUGGY]  option  =  option.getOption(group,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {          [BUGGY]  option  =  option.getOption(group,  false);  [BUGGY]      option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =  option.getOption(group,  false);	  option    =    option.getOption(group);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
