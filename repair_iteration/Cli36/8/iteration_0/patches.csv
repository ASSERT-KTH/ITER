bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    OptionGroup  shortOpts  =  option.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]    OptionGroup  shortOpts  =  option.getShortOpts();  [BUGGY]  option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	    OptionGroup  shortOpts  =  option.getShortOpts();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
2	[BUG]  [BUGGY]    option.setRequired(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]    option.setRequired(false);  [BUGGY]  option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	    option.setRequired(false);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
3	[BUG]  [BUGGY]    OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]    OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);  [BUGGY]  option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	    OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
4	[BUG]  [BUGGY]    OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]    OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  [BUGGY]  option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	    OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
5	[BUG]  [BUGGY]    OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]    OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts);  [BUGGY]  option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	    OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
6	[BUG]  [BUGGY]  option.setRequired(true);  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]  option.setRequired(true);  [BUGGY]  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(true);	option.setRequired(false);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
7	[BUG]  [BUGGY]  Option  option  =  option.getOption( "requiredOpts ");  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]  Option  option  =  option.getOption( "requiredOpts ");  [BUGGY]  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption( "requiredOpts ");	option.setRequired(false);  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
8	[BUG]  [BUGGY]    option.setRequired(false);  addOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]    option.setRequired(false);  addOption(option);  [BUGGY]  option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	    option.setRequired(false);  addOption(option);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
9	[BUG]  [BUGGY]    Option  option  =  option.getOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]    Option  option  =  option.getOption(option);  [BUGGY]  option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	    Option  option  =  option.getOption(option);		non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
10	[BUG]  [BUGGY]    Option  option  =(Option)option.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]    Option  option  =(Option)option.clone();  [BUGGY]  option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	    Option  option  =(Option)option.clone();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
11	[BUG]  [BUGGY]    Option  option  =  option.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]    Option  option  =  option.getOption();  [BUGGY]  option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	    Option  option  =  option.getOption();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
12	[BUG]  [BUGGY]    OptionGroup  group  =  option.getGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]    OptionGroup  group  =  option.getGroup();  [BUGGY]  option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	    OptionGroup  group  =  option.getGroup();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
13	[BUG]  [BUGGY]    Option  option  =(Option)option.getValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]      ComparisonFailure  [CONTEXT]  if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {      [BUGGY]    Option  option  =(Option)option.getValue();  [BUGGY]  option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	    Option  option  =(Option)option.getValue();		non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	add
