bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  group);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(longOpts,  group);	      OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
2	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(lengthOpts);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(lengthOpts);	      OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
3	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  group);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  group);	      OptionGroup    shortOpts    =    option.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
4	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(),  longOpts);	      OptionGroup    shortOpts    =    option.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
5	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getLongOpts();  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getLongOpts();	      OptionGroup    shortOpts    =    option.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
6	[BUG]  [BUGGY]  Option  option  =(Option)option.getKey();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =(Option)option.getKey();  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getKey();	      Option    option    =(Option)option.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
7	[BUG]  [BUGGY]  Option  option  =(Option)option.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =(Option)option.getOption();  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getOption();	      Option    option    =(Option)option.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
8	[BUG]  [BUGGY]  Option  option  =(Option)option.getValue(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =(Option)option.getValue(),  group);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getValue(),  group);	      Option    option    =(Option)option.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
9	[BUG]  [BUGGY]  option.setRequired(true);  addOption(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  option.setRequired(true);  addOption(option);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(true);  addOption(option);	      option.setRequired(false);    addOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
10	[BUG]  [BUGGY]  Option  option  =  option.getOption(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOption(group);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group);	      Option    option    =    option.getOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
11	[BUG]  [BUGGY]  Option  option  =  option.getOption(group,  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOption(group,  option);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group,  option);	      Option    option    =    option.getOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
12	[BUG]  [BUGGY]  option  =  option.getOption(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  option  =  option.getOption(group);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =  option.getOption(group);	      Option    option    =    option.getOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
13	[BUG]  [BUGGY]  Option  option  =(Option)option.clone(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =(Option)option.clone(),  group);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone(),  group);	      Option    option    =(Option)option.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
14	[BUG]  [BUGGY]  Option  option  =(Option)option.clone(),  group;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =(Option)option.clone(),  group;  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone(),  group;	      Option    option    =(Option)option.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
15	[BUG]  [BUGGY]  Option  option  =(Option)option.cloneTree();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =(Option)option.cloneTree();  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.cloneTree();	      Option    option    =(Option)option.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
16	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOption(),  group);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(),  group);	      Option    option    =    option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
17	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  group;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOption(),  group;  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(),  group;	      Option    option    =    option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
18	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  group);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts,  group);	      OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
19	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(option.getKey(),  shortOpts);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  shortOpts.put(option.getKey(),  shortOpts);	      OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
20	[BUG]  [BUGGY]  option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  shortOpts);	      OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
21	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  group);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  group);	      OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
22	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  shortOpts);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts,  shortOpts);	      OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
23	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  shortOpts);	      OptionGroup    group    =    option.getGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
24	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  group  =  option.getGroup(),  shortOpts;  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(),  shortOpts;	      OptionGroup    group    =    option.getGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
25	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroups();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  group  =  option.getGroups();  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroups();	      OptionGroup    group    =    option.getGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
26	[BUG]  [BUGGY]  option.setRequired(false,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  option.setRequired(false,  group);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  group);	  option.setRequired(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
27	[BUG]  [BUGGY]  option.setRequired(false,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  option.setRequired(false,  requiredOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(false,  requiredOpts);	  option.setRequired(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
28	[BUG]  [BUGGY]  option.setRequired(true,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  option.setRequired(true,  shortOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(true,  shortOpts);	  option.setRequired(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
29	[BUG]  [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  shortOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption( "requiredOpts ",  shortOpts);	  Option    option    =    option.getOption(   "requiredOpts   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
30	[BUG]  [BUGGY]  Option  option  =  option.getOption(group, "requiredOpts ");  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOption(group, "requiredOpts ");  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(group, "requiredOpts ");	  Option    option    =    option.getOption(   "requiredOpts   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
31	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  group  =  option.getGroup(option.getKey());  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(option.getKey());	      OptionGroup    group    =    option.getGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
32	[BUG]  [BUGGY]  OptionGroup  group  =  option.getGroup(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  group  =  option.getGroup(option);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  group  =  option.getGroup(option);	      OptionGroup    group    =    option.getGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
33	[BUG]  [BUGGY]  Option  option  =  option.getOption(requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOption(requiredOpts);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(requiredOpts);	      Option    option    =    option.getOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
34	[BUG]  [BUGGY]  Option  option  =  option.getOption(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOption(false);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption(false);	      Option    option    =    option.getOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
35	[BUG]  [BUGGY]  Option  option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  option);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  option);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getShortOpts();  requiredOpts.put(option.getKey(),  option);	      OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
36	[BUG]  [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  group);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption( "requiredOpts ",  group);	  Option    option    =    option.getOption(   "requiredOpts   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
37	[BUG]  [BUGGY]  Option  option  =  option.getOption( "RequiredOpts ");  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOption( "RequiredOpts ");  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption( "RequiredOpts ");	  Option    option    =    option.getOption(   "requiredOpts   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
38	[BUG]  [BUGGY]  option.setRequired(falseOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  option.setRequired(falseOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(falseOpts);	  option.setRequired(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
39	[BUG]  [BUGGY]  option  =(Option)option.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  option  =(Option)option.clone();  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option  =(Option)option.clone();	      Option    option    =(Option)option.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
40	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(longOpts);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(longOpts);	      OptionGroup    shortOpts    =    option.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
41	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts(false);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts(false);	      OptionGroup    shortOpts    =    option.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
42	[BUG]  [BUGGY]  if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);  }  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	if(option.getShortOpts()!=  shortOpts)  {  OptionGroup  shortOpts  =  option.getShortOpts();  requiredOpts.add(shortOpts);  }	      OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
43	[BUG]  [BUGGY]  option.setRequired(true,  group);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  option.setRequired(true,  group);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	option.setRequired(true,  group);	  option.setRequired(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
44	[BUG]  [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOption( "requiredOpts ",  requiredOpts);  [BUGGY]    addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOption( "requiredOpts ",  requiredOpts);	  Option    option    =    option.getOption(   "requiredOpts   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
45	[BUG]  [BUGGY]  Option  option  =(Option)option.getImmediateParentPointer();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =(Option)option.getImmediateParentPointer();  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.getImmediateParentPointer();	      Option    option    =(Option)option.getValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
46	[BUG]  [BUGGY]  Option  option  =  option.getOptionGroup(group);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOptionGroup(group);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOptionGroup(group);	      Option    option    =    option.getOption(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
47	[BUG]  [BUGGY]  Option  option  =(Option)option.clone()  :  option;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =(Option)option.clone()  :  option;  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =(Option)option.clone()  :  option;	      Option    option    =(Option)option.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
48	[BUG]  [BUGGY]  Option  option  =  option.getOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOptionGroup();  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOptionGroup();	      Option    option    =    option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
49	[BUG]  [BUGGY]  Option  option  =  option.getOptions();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  Option  option  =  option.getOptions();  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	Option  option  =  option.getOptions();	      Option    option    =    option.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
50	[BUG]  [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  shortOpts  =  option.getShortOpts();  longOpts.put(option.getKey(),  shortOpts);	      OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.put(option.getKey(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
51	[BUG]  [BUGGY]  OptionGroup  longOpts  =  option.getShortOpts();  requiredOpts.add(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    if  (group.isRequired())  {  requiredOpts.add(group);  }  for  (Option  option  :  group.getOptions())  {        [BUGGY]  OptionGroup  longOpts  =  option.getShortOpts();  requiredOpts.add(longOpts);  [BUGGY]    option.setRequired(false);  addOption(option);  optionGroups.put(option.getKey(),  group);  }  return  this;  }  [CLASS]  Options  [METHOD]  addOptionGroup  [RETURN_TYPE]  Options  OptionGroup  group  [VARIABLES]  List  requiredOpts  Option  option  OptionGroup  group  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	81	81	1	replace	OptionGroup  longOpts  =  option.getShortOpts();  requiredOpts.add(longOpts);	      OptionGroup    shortOpts    =    option.getShortOpts();    requiredOpts.add(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
