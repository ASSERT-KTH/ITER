bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getUpperBound(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getUpperBound(),  shortOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getLongOpt(),  opt.getUpperBound(),  shortOpts);	  longOpts.put(opt.getLongOpt(),    opt.getUpperBound());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
2	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getLowerBound());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getLowerBound());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getLongOpt(),  opt.getLowerBound());	  longOpts.put(opt.getLongOpt(),    opt.getUpperBound());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
3	[BUG]  [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt.getUpperBound());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt.getUpperBound());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getLongOpt(),  opt.getUpperBound());	  longOpts.put(opt.getLongOpt(),    opt.getUpperBound());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
4	[BUG]  [BUGGY]  ShortOpts  longOpts  =  shortOpts.get(opt.longOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  longOpts  =  shortOpts.get(opt.longOpt());  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  longOpts  =  shortOpts.get(opt.longOpt());	  ShortOpts    longOpts    =    shortOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
5	[BUG]  [BUGGY]  ShortOpts  longOpts  =  opt.getShortOpts(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  longOpts  =  opt.getShortOpts(key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  longOpts  =  opt.getShortOpts(key);	  ShortOpts    longOpts    =    shortOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
6	[BUG]  [BUGGY]  ShortOpts  longOpts  =  shortOpts.get(key,  opt.longOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  longOpts  =  shortOpts.get(key,  opt.longOpt());  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  longOpts  =  shortOpts.get(key,  opt.longOpt());	  ShortOpts    longOpts    =    shortOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
7	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  longOpts);	  Option    optionGroups    =    opt.getOptionGroups(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
8	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  key);	  Option    optionGroups    =    opt.getOptionGroups(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
9	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  longOpts);	  Option    optionGroups    =    opt.getOptionGroups(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
10	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  key);	  Option    optionGroups    =    opt.getOptionGroups(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
11	[BUG]  [BUGGY]  shortOpts.put(opt.getKey(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getKey(),  key);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getKey(),  key);	  shortOpts.put(opt.getKey(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
12	[BUG]  [BUGGY]  shortOpts.put(key.getKey(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(key.getKey(),  opt);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(key.getKey(),  opt);	  shortOpts.put(opt.getKey(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
13	[BUG]  [BUGGY]  shortOpts.put(opt.getKey(),  opt.longOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getKey(),  opt.longOpt());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getKey(),  opt.longOpt());	  shortOpts.put(opt.getKey(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
14	[BUG]  [BUGGY]  Option  longOpts  =  optionGroups.get(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpts  =  optionGroups.get(key,  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpts  =  optionGroups.get(key,  opt);	  Option    longOpts    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
15	[BUG]  [BUGGY]  Option  longOpts  =  optionGroups.get(key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpts  =  optionGroups.get(key,  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpts  =  optionGroups.get(key,  shortOpts);	  Option    longOpts    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
16	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(key,  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(key,  shortOpts);	  Option    opt    =    opt.getOption(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
17	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(key,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(key,  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(key,  longOpts);	  Option    opt    =    opt.getOption(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
18	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(key,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(key,  false);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(key,  false);	  Option    opt    =    opt.getOption(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
19	[BUG]  [BUGGY]  shortOpts.put(key,  opt.getLongOpt())  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(key,  opt.getLongOpt())  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(key,  opt.getLongOpt())	  shortOpts.put(opt.getLongOpt(),    opt)    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
20	[BUG]  [BUGGY]  ShortOpts.put(opt.getLongOpt(),  key)  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts.put(opt.getLongOpt(),  key)  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts.put(opt.getLongOpt(),  key)	  shortOpts.put(opt.getLongOpt(),    opt)    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
21	[BUG]  [BUGGY]  shortOpts.put(key,  opt.getLongOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(key,  opt.getLongOpt(),  longOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(key,  opt.getLongOpt(),  longOpts);	  shortOpts.put(key,    opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
22	[BUG]  [BUGGY]  shortOpts.put(opt.getKey(),  opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getKey(),  opt.getLongOpt());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getKey(),  opt.getLongOpt());	  shortOpts.put(key,    opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
23	[BUG]  [BUGGY]  longOpts  =  opt.getLongOpt()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts  =  opt.getLongOpt()  +  1;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts  =  opt.getLongOpt()  +  1;	  longOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
24	[BUG]  [BUGGY]  longOpts  =  opt.getLongOpt(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts  =  opt.getLongOpt(),  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts  =  opt.getLongOpt(),  shortOpts);	  longOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
25	[BUG]  [BUGGY]  longOpts  =  opt.getLongOpt()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts  =  opt.getLongOpt()  -  1;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts  =  opt.getLongOpt()  -  1;	  longOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
26	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(this,  shortOpts);	  Option    optionGroups    =    opt.getOptionGroups(this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
27	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(this,  longOpts);	  Option    optionGroups    =    opt.getOptionGroups(this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
28	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(this,  key);	  Option    optionGroups    =    opt.getOptionGroups(this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
29	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(key.getLongOpt(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(key.getLongOpt(),  opt);  }  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	if(opt.hasLongOpt())  {  longOpts.put(key.getLongOpt(),  opt);  }	  longOpts.put(key.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
30	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(key.getLongOpt(),  opt);  }  else  {  shortOpts.put(key.getLongOpt(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(key.getLongOpt(),  opt);  }  else  {  shortOpts.put(key.getLongOpt(),  opt);  }  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	if(opt.hasLongOpt())  {  longOpts.put(key.getLongOpt(),  opt);  }  else  {  shortOpts.put(key.getLongOpt(),  opt);  }	  longOpts.put(key.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
31	[BUG]  [BUGGY]  LongOpts  shortOpts  =  opt.getLongOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  LongOpts  shortOpts  =  opt.getLongOpt(),  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	LongOpts  shortOpts  =  opt.getLongOpt(),  longOpts);	  LongOpts    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
32	[BUG]  [BUGGY]  LongOpts  shortOpts  =  opt.getShortOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  LongOpts  shortOpts  =  opt.getShortOpt();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	LongOpts  shortOpts  =  opt.getShortOpt();	  LongOpts    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
33	[BUG]  [BUGGY]  LongOpts  shortOpts  =  opt.getLongOpt()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  LongOpts  shortOpts  =  opt.getLongOpt()  +  1;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	LongOpts  shortOpts  =  opt.getLongOpt()  +  1;	  LongOpts    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
34	[BUG]  [BUGGY]  Option  opt  =  opt.getOptionGroup(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOptionGroup(),  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOptionGroup(),  shortOpts);	  Option    opt    =    opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
35	[BUG]  [BUGGY]  Option  opt  =  opt.getOptionGroup(),  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOptionGroup(),  shortOpts;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOptionGroup(),  shortOpts;	  Option    opt    =    opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
36	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  key;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  key;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  key;	  Option    optionGroups    =    opt.getOptionGroups(),    shortOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
37	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  longOpts;	  Option    optionGroups    =    opt.getOptionGroups(),    shortOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
38	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  longOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  longOpts;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  longOpts;	  Option    optionGroups    =    opt.getOptionGroups(),    shortOpts;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
39	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  key,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  key,  requiredOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getLongOpt(),  key,  requiredOpts);	  longOpts.put(opt.getLongOpt(),    key,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
40	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  key,  opt.longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  key,  opt.longOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getLongOpt(),  key,  opt.longOpts);	  longOpts.put(opt.getLongOpt(),    key,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
41	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  key,  preferredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  key,  preferredOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getLongOpt(),  key,  preferredOpts);	  longOpts.put(opt.getLongOpt(),    key,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
42	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.get(key),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.get(key),  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.get(key),  shortOpts);	  opt.setLongOpt(longOpts.get(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
43	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.get(key)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.get(key)+  1);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.get(key)+  1);	  opt.setLongOpt(longOpts.get(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
44	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.get(key),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.get(key),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.get(key),  opt);	  opt.setLongOpt(longOpts.get(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
45	[BUG]  [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt.getKey());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getLongOpt(),  opt.getKey());	  longOpts.put(opt.getLongOpt(),    opt.getKey());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
46	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(),  shortOpts,  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(),  shortOpts,  longOpts);	  Option    opt    =    opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
47	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(),  this.longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(),  this.longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(),  this.longOpts);	  Option    opt    =    opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
48	[BUG]  [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt.getValue());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt.getValue());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getLongOpt(),  opt.getValue());	  shortOpts.put(opt.getLongOpt(),    opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
49	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(option,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(option,  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(option,  shortOpts);	  Option    optionGroups    =    opt.getOptionGroups(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
50	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(key,  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(key,  opt);	  Option    optionGroups    =    opt.getOptionGroups(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
51	[BUG]  [BUGGY]  Option  longOpts  =  opt.getLongOpt(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpts  =  opt.getLongOpt(),  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpts  =  opt.getLongOpt(),  shortOpts);	  Option    longOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
52	[BUG]  [BUGGY]  Option  longOpts  =  opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpts  =  opt.getLongOpt(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpts  =  opt.getLongOpt(),  opt);	  Option    longOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
53	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getLongOpt(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  optionGroups.get(opt.getLongOpt(),  opt);	  Option    shortOpts    =    optionGroups.get(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
54	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getLongOpt(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getLongOpt(),  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  optionGroups.get(opt.getLongOpt(),  key);	  Option    shortOpts    =    optionGroups.get(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
55	[BUG]  [BUGGY]  Option  shortOpts  =  options.get(opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  options.get(opt.getLongOpt(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  options.get(opt.getLongOpt(),  opt);	  Option    shortOpts    =    optionGroups.get(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
56	[BUG]  [BUGGY]  Option  shortOpts  =  options.get(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  options.get(opt.getLongOpt());  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  options.get(opt.getLongOpt());	  Option    shortOpts    =    optionGroups.get(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
57	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  opt.getShortOpt(),  longOpts);	  Option    shortOpts    =    opt.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
58	[BUG]  [BUGGY]  Option  shortOpt  =  opt.getShortOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpt  =  opt.getShortOpt(),  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpt  =  opt.getShortOpt(),  longOpts);	  Option    shortOpt    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
59	[BUG]  [BUGGY]  Option  shortOpt  =  opt.getShortOpt(),  longOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpt  =  opt.getShortOpt(),  longOpts;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpt  =  opt.getShortOpt(),  longOpts;	  Option    shortOpt    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
60	[BUG]  [BUGGY]  Option  shortOpt  =  opt.getShortOpt(),  key;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpt  =  opt.getShortOpt(),  key;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpt  =  opt.getShortOpt(),  key;	  Option    shortOpt    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
61	[BUG]  [BUGGY]  longOpts.put(key.getLongOpt(),  opt)  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(key.getLongOpt(),  opt)  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(key.getLongOpt(),  opt)	  longOpts.put(opt.getLongOpt(),    key)    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
62	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(),  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(),  longOpts,  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(),  longOpts,  shortOpts);	  Option    opt    =    opt.getOption(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
63	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(),  stringOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(),  stringOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(),  stringOpts);	  Option    opt    =    opt.getOption(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
64	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpt();  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  shortOpts  =  opt.getShortOpt();	  ShortOpts    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
65	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpts();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpts();  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  shortOpts  =  opt.getShortOpts();	  ShortOpts    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
66	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  opt.getLongOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  shortOpts  =  opt.getLongOpt(),  longOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  shortOpts  =  opt.getLongOpt(),  longOpts);	  ShortOpts    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
67	[BUG]  [BUGGY]  Option  option  =  opt.getOption(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  option  =  opt.getOption(),  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  option  =  opt.getOption(),  longOpts);	  Option    option    =    opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
68	[BUG]  [BUGGY]  Option  option  =  opt.getOption(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  option  =  opt.getOption(),  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  option  =  opt.getOption(),  shortOpts);	  Option    option    =    opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
69	[BUG]  [BUGGY]  Option  option  =  opt.getOption(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  option  =  opt.getOption(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  option  =  opt.getOption(),  opt);	  Option    option    =    opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
70	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.containsKey(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.containsKey(key));  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.containsKey(key));	  opt.setLongOpt(longOpts.contains(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
71	[BUG]  [BUGGY]  Option  opt  =  opt.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.clone();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.clone();	  Option    opt    =    opt.cloneOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
72	[BUG]  [BUGGY]  Option  opt  =  opt.cloneOption(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.cloneOption(key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.cloneOption(key);	  Option    opt    =    opt.cloneOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
73	[BUG]  [BUGGY]  Option  opt  =  opt.cloneOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.cloneOpt();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.cloneOpt();	  Option    opt    =    opt.cloneOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
74	[BUG]  [BUGGY]  longOpts.put(key,  opt.longOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(key,  opt.longOpt());  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(key,  opt.longOpt());	  longOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
75	[BUG]  [BUGGY]  longOpts.put(opt,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt,  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt,  key);	  longOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
76	[BUG]  [BUGGY]  Aleger  opt  =  opt.getOption(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Aleger  opt  =  opt.getOption(),  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Aleger  opt  =  opt.getOption(),  shortOpts);	  Aleger    opt    =    opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
77	[BUG]  [BUGGY]  Aleger  opt  =  opt.getOption(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Aleger  opt  =  opt.getOption(),  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Aleger  opt  =  opt.getOption(),  key);	  Aleger    opt    =    opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
78	[BUG]  [BUGGY]  Aleger  opt  =  opt.getOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Aleger  opt  =  opt.getOptionGroup();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Aleger  opt  =  opt.getOptionGroup();	  Aleger    opt    =    opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
79	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  optionGroups.get(key,  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  optionGroups.get(key,  opt);	  Option    shortOpts    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
80	[BUG]  [BUGGY]  Option  shortOpts  =  options.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  options.get(key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  options.get(key);	  Option    shortOpts    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
81	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  optionGroups.get(opt.key);	  Option    shortOpts    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
82	[BUG]  [BUGGY]  Option  shortOpt  =  opt.getLongOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpt  =  opt.getLongOpt(),  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpt  =  opt.getLongOpt(),  longOpts);	  Option    shortOpt    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
83	[BUG]  [BUGGY]  Option  shortOpt  =  opt.getLongOpt(),  longOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpt  =  opt.getLongOpt(),  longOpts;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpt  =  opt.getLongOpt(),  longOpts;	  Option    shortOpt    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
84	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(),  key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(),  key,  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(),  key,  shortOpts);	  Option    opt    =    opt.getOption(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
85	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(),  key,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(),  key,  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(),  key,  longOpts);	  Option    opt    =    opt.getOption(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
86	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(),  key,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(),  key,  lengthOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(),  key,  lengthOpts);	  Option    opt    =    opt.getOption(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
87	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(),  key,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(),  key,  null);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(),  key,  null);	  Option    opt    =    opt.getOption(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
88	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getValue(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getValue(),  shortOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getLongOpt(),  opt.getValue(),  shortOpts);	  longOpts.put(opt.getLongOpt(),    opt.getValue());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
89	[BUG]  [BUGGY]  Option  longOpts  =  optionGroups.get(opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpts  =  optionGroups.get(opt.getLongOpt(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpts  =  optionGroups.get(opt.getLongOpt(),  opt);	  Option    longOpts    =    optionGroups.get(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
90	[BUG]  [BUGGY]  Option  longOpts  =  optionGroups.get(opt.getLongOpt(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpts  =  optionGroups.get(opt.getLongOpt(),  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpts  =  optionGroups.get(opt.getLongOpt(),  shortOpts);	  Option    longOpts    =    optionGroups.get(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
91	[BUG]  [BUGGY]  Option  longOpts  =  optionGroups.get(opt.getLongOpt(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpts  =  optionGroups.get(opt.getLongOpt(),  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpts  =  optionGroups.get(opt.getLongOpt(),  key);	  Option    longOpts    =    optionGroups.get(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
92	[BUG]  [BUGGY]  Option  opt  =  opt.getOption()?  null  :  opt.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption()?  null  :  opt.getOption();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption()?  null  :  opt.getOption();	  Option    opt    =    opt.getOption()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
93	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(),  key  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(),  key  :  null;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(),  key  :  null;	  Option    opt    =    opt.getOption()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
94	[BUG]  [BUGGY]  Option  longOpt  =  opt.getLongOpt(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpt  =  opt.getLongOpt(),  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpt  =  opt.getLongOpt(),  shortOpts);	  Option    longOpt    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
95	[BUG]  [BUGGY]  Option  longOpt  =  opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpt  =  opt.getLongOpt(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpt  =  opt.getLongOpt(),  opt);	  Option    longOpt    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
96	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt(),  key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt(),  key));  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.get(opt.getLongOpt(),  key));	  opt.setLongOpt(longOpts.get(opt.getLongOpt(),    opt));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
97	[BUG]  [BUGGY]  opt.setLongOpt(opt.getLongOpt(),  longOpts));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(opt.getLongOpt(),  longOpts));  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(opt.getLongOpt(),  longOpts));	  opt.setLongOpt(longOpts.get(opt.getLongOpt(),    opt));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
98	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt(),  key),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt(),  key),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.get(opt.getLongOpt(),  key),  opt);	  opt.setLongOpt(longOpts.get(opt.getLongOpt(),    opt));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
99	[BUG]  [BUGGY]  opt.setLongOpt(opt.getLongOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(opt.getLongOpt(),  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(opt.getLongOpt(),  longOpts);	  opt.setLongOpt(longOpts.get(opt.getLongOpt(),    opt));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
100	[BUG]  [BUGGY]  shortOpts.put(opt.getLongOpt(),  key,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getLongOpt(),  key,  longOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getLongOpt(),  key,  longOpts);	  shortOpts.put(opt.getLongOpt(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
101	[BUG]  [BUGGY]  shortOpts.put(opt.getLongOpt(),  key,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getLongOpt(),  key,  requiredOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getLongOpt(),  key,  requiredOpts);	  shortOpts.put(opt.getLongOpt(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
102	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(false);	  Option    optionGroups    =    opt.getOptionGroups(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
103	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(true,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(true,  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(true,  shortOpts);	  Option    optionGroups    =    opt.getOptionGroups(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
104	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false,  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(false,  key);	  Option    optionGroups    =    opt.getOptionGroups(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
105	[BUG]  [BUGGY]  longOpts.put(opt.indexOf(key), " ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.indexOf(key), " ");  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.indexOf(key), " ");	  longOpts.put(key.indexOf(   "       "),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
106	[BUG]  [BUGGY]  longOpts.put(opt.indexOf( "   "),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.indexOf( "   "),  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.indexOf( "   "),  key);	  longOpts.put(key.indexOf(   "       "),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
107	[BUG]  [BUGGY]  longOpts.put(opt.indexOf(key),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.indexOf(key),  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.indexOf(key),  key);	  longOpts.put(key.indexOf(   "       "),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
108	[BUG]  [BUGGY]  longOpts.put(opt.indexOf(key),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.indexOf(key),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.indexOf(key),  opt);	  longOpts.put(key.indexOf(   "       "),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
109	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt()),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt()),  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.get(opt.getLongOpt()),  key);	  opt.setLongOpt(longOpts.get(opt.getLongOpt()));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
110	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.get(key.getLongOpt()));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.get(key.getLongOpt()));  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.get(key.getLongOpt()));	  opt.setLongOpt(longOpts.get(opt.getLongOpt()));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
111	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getLongOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  opt.getLongOpt(),  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  opt.getLongOpt(),  longOpts);	  Option    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
112	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  opt.getLongOpt(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  opt.getLongOpt(),  opt);	  Option    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
113	[BUG]  [BUGGY]  shortOpts.put(key.getLongOpt(),  opt)  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(key.getLongOpt(),  opt)  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(key.getLongOpt(),  opt)	  shortOpts.put(opt.getLongOpt(),    key)    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
114	[BUG]  [BUGGY]  ShortOpts.put(opt.getLongOpt(),  key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts.put(opt.getLongOpt(),  key,  shortOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts.put(opt.getLongOpt(),  key,  shortOpts);	  ShortOpts.put(opt.getLongOpt(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
115	[BUG]  [BUGGY]  ShortOpts.put(key.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts.put(key.getLongOpt(),  opt);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts.put(key.getLongOpt(),  opt);	  ShortOpts.put(opt.getLongOpt(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
116	[BUG]  [BUGGY]  ShortOpts.put(opt.getLongOpt(),  key,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts.put(opt.getLongOpt(),  key,  longOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts.put(opt.getLongOpt(),  key,  longOpts);	  ShortOpts.put(opt.getLongOpt(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
117	[BUG]  [BUGGY]  ShortOpts.put(opt.getLongOpt(),  key,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts.put(opt.getLongOpt(),  key,  requiredOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts.put(opt.getLongOpt(),  key,  requiredOpts);	  ShortOpts.put(opt.getLongOpt(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
118	[BUG]  [BUGGY]  longOpts.add(opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.add(opt.getLongOpt(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.add(opt.getLongOpt(),  opt);	  longOpts.add(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
119	[BUG]  [BUGGY]  longOpts.add(opt.getLongOpt(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.add(opt.getLongOpt(),  key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.add(opt.getLongOpt(),  key);	  longOpts.add(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
120	[BUG]  [BUGGY]  shortOpts.add(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.add(opt.getLongOpt());  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.add(opt.getLongOpt());	  longOpts.add(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
121	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(),  longOpts;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  opt.getShortOpt(),  longOpts;	  Option    shortOpts    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
122	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getLowerOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getLowerOpt());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getLongOpt(),  opt.getLowerOpt());	  longOpts.put(opt.getLongOpt(),    opt.getUpperOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
123	[BUG]  [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt.getUpperOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt.getUpperOpt());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getLongOpt(),  opt.getUpperOpt());	  longOpts.put(opt.getLongOpt(),    opt.getUpperOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
124	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getUpperOpt(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getUpperOpt(),  shortOpts);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getLongOpt(),  opt.getUpperOpt(),  shortOpts);	  longOpts.put(opt.getLongOpt(),    opt.getUpperOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
125	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.indexOf(key)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.indexOf(key)+  1);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.indexOf(key)+  1);	  opt.setLongOpt(longOpts.indexOf(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
126	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.indexOf(key),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.indexOf(key),  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.indexOf(key),  shortOpts);	  opt.setLongOpt(longOpts.indexOf(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
127	[BUG]  [BUGGY]  Option  shortOpts  =(Option)opt.getLongOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =(Option)opt.getLongOpt();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =(Option)opt.getLongOpt();	  Option    shortOpts    =(Option)opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
128	[BUG]  [BUGGY]  Option  shortOpts  =(Option)opt.getShortOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =(Option)opt.getShortOpt(),  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =(Option)opt.getShortOpt(),  longOpts);	  Option    shortOpts    =(Option)opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
129	[BUG]  [BUGGY]  Option  shortOpts  =(Option)opt.getShortOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =(Option)opt.getShortOpt(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =(Option)opt.getShortOpt(),  opt);	  Option    shortOpts    =(Option)opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
130	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(key,  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(key,  shortOpts);	  Option    optionGroups    =    opt.getOptionGroups(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
131	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(key,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(key,  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(key,  longOpts);	  Option    optionGroups    =    opt.getOptionGroups(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
132	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(key,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(key,  lengthOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(key,  lengthOpts);	  Option    optionGroups    =    opt.getOptionGroups(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
133	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.indexOf(key),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.indexOf(key),  longOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.indexOf(key),  longOpts);	  opt.setLongOpt(longOpts.indexOf(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
134	[BUG]  [BUGGY]  opt.setOpt(longOpts.get(opt.getLongOpt(),  key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setOpt(longOpts.get(opt.getLongOpt(),  key));  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setOpt(longOpts.get(opt.getLongOpt(),  key));	  opt.setLongOpt(longOpts.get(opt.getLongOpt(),    opt));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
135	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  opt.getLongOpt()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  shortOpts  =  opt.getLongOpt()  -  1;  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  shortOpts  =  opt.getLongOpt()  -  1;	  ShortOpts    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
136	[BUG]  [BUGGY]  ShortOpts  shortOpts  =(ShortOpts)opt.getLongOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  shortOpts  =(ShortOpts)opt.getLongOpt();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  shortOpts  =(ShortOpts)opt.getLongOpt();	  shortOpts.put(opt.getLongOpt(),    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
137	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(opt);	  Option    optionGroups    =    opt.getOptionGroups(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
138	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpts(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  shortOpts  =  opt.getShortOpts(key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  shortOpts  =  opt.getShortOpts(key);	  ShortOpts    longOpts    =    shortOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
139	[BUG]  [BUGGY]  ShortOpts  longOpts  =  opt.getShortOpts().get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  longOpts  =  opt.getShortOpts().get(key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  longOpts  =  opt.getShortOpts().get(key);	  ShortOpts    longOpts    =    shortOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
140	[BUG]  [BUGGY]  Option  longOpts  =  opt.getLongOpt(),  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpts  =  opt.getLongOpt(),  shortOpts;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpts  =  opt.getLongOpt(),  shortOpts;	  Option    longOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
141	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  null);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  null);  }  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  null);  }	  longOpts.put(opt.getLongOpt(),    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
142	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getBaseOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  opt.getBaseOpt();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  opt.getBaseOpt();	  Option    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
143	[BUG]  [BUGGY]  LongOpts  shortOpts  =  opt.getLongOpt()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  LongOpts  shortOpts  =  opt.getLongOpt()  -  1;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	LongOpts  shortOpts  =  opt.getLongOpt()  -  1;	  LongOpts    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
144	[BUG]  [BUGGY]  Option  option  =  opt.getOption()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  option  =  opt.getOption()  :  null;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  option  =  opt.getOption()  :  null;	  Option    option    =    opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
145	[BUG]  [BUGGY]  Option  option  =  opt.getOption(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  option  =  opt.getOption(key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  option  =  opt.getOption(key);	  Option    option    =    opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
146	[BUG]  [BUGGY]  shortOpts.put(opt,  key.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt,  key.getLongOpt());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt,  key.getLongOpt());	  shortOpts.put(key,    opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
147	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(this,  opt);	  Option    optionGroups    =    opt.getOptionGroups(this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
148	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(),  this.shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(),  this.shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(),  this.shortOpts);	  Option    opt    =    opt.getOption(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
149	[BUG]  [BUGGY]  shortOpts.put(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(key,  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(key,  opt);	  longOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
150	[BUG]  [BUGGY]  Option  shortOpts  =(Option)opt.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =(Option)opt.clone();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =(Option)opt.clone();	  Option    shortOpts    =(Option)opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
151	[BUG]  [BUGGY]  opt.setLongOpt(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(opt.getLongOpt());  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(opt.getLongOpt());	  opt.setLongOpt(longOpts.get(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
152	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getLastOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  opt.getLastOpt());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getLongOpt(),  opt.getLastOpt());	  longOpts.put(opt.getLongOpt(),    opt.getUpperOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
153	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  opt);	  Option    optionGroups    =    opt.getOptionGroups(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
154	[BUG]  [BUGGY]  shortOpts.put(key.indexOf( "   "),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(key.indexOf( "   "),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(key.indexOf( "   "),  opt);	  longOpts.put(key.indexOf(   "       "),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
155	[BUG]  [BUGGY]  longOpts.put(opt.indexOf(key)+ "   "),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.indexOf(key)+ "   "),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.indexOf(key)+ "   "),  opt);	  longOpts.put(key.indexOf(   "       "),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
156	[BUG]  [BUGGY]  shortOpts.put(opt.getKey(),  opt.longOpt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getKey(),  opt.longOpt);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getKey(),  opt.longOpt);	  shortOpts.put(opt.getKey(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
157	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false,  shortOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  optionGroups  =  opt.getOptionGroups(false,  shortOpts);	  Option    optionGroups    =    opt.getOptionGroups(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
158	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.longOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.longOpt());  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  optionGroups.get(opt.longOpt());	  Option    shortOpts    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
159	[BUG]  [BUGGY]  Option  opt  =  opt.cloneOption(this);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.cloneOption(this);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.cloneOption(this);	  Option    opt    =    opt.cloneOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
160	[BUG]  [BUGGY]  Option  longOpts  =  optionGroups.get(opt.longOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpts  =  optionGroups.get(opt.longOpt());  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpts  =  optionGroups.get(opt.longOpt());	  Option    longOpts    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
161	[BUG]  [BUGGY]  longOpts.put(opt.getKey(),  opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getKey(),  opt.getLongOpt());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getKey(),  opt.getLongOpt());	  longOpts.put(opt.getLongOpt(),    opt.getValue());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
162	[BUG]  [BUGGY]  Option  longOpt  =  opt.getLongOpt(),  shortOpts;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpt  =  opt.getLongOpt(),  shortOpts;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpt  =  opt.getLongOpt(),  shortOpts;	  Option    longOpt    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
163	[BUG]  [BUGGY]  optionGroups.put(opt.getOptionGroup(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  optionGroups.put(opt.getOptionGroup(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	optionGroups.put(opt.getOptionGroup(),  opt);	  [Delete]    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
164	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =(Option)opt.getOption();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =(Option)opt.getOption();	  [Delete]    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
165	[BUG]  [BUGGY]  longOpts.put(opt.getUpperOpt(),  opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getUpperOpt(),  opt.getLongOpt());  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getUpperOpt(),  opt.getLongOpt());	  longOpts.put(opt.getLongOpt(),    opt.getUpperBound());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
166	[BUG]  [BUGGY]  Aleger  opt  =  opt.getOption(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Aleger  opt  =  opt.getOption(key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Aleger  opt  =  opt.getOption(key);	  Aleger    opt    =    opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
167	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getShortOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getShortOpt());  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  optionGroups.get(opt.getShortOpt());	  Option    shortOpts    =    optionGroups.get(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
168	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(key,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(key,  true);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(key,  true);	  Option    opt    =    opt.getOption(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
169	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt())+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt())+  1);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.get(opt.getLongOpt())+  1);	  opt.setLongOpt(longOpts.get(opt.getLongOpt()));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
170	[BUG]  [BUGGY]  shortOpts.put(opt.getKey(),  key)  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getKey(),  key)  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getKey(),  key)	  shortOpts.put(opt.getLongOpt(),    key)    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
171	[BUG]  [BUGGY]  Option  longOpt  =  opt.getLongOpt()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpt  =  opt.getLongOpt()  -  1;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpt  =  opt.getLongOpt()  -  1;	  Option    longOpt    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
172	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt(key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  opt.getShortOpt(key);	  Option    shortOpts    =    opt.getShortOpts();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
173	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getBooleanOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  opt.getBooleanOpt();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  opt.getBooleanOpt();	  Option    shortOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
174	[BUG]  [BUGGY]  Option  longOpts  =  options.get(opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  longOpts  =  options.get(opt.getLongOpt(),  opt);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  longOpts  =  options.get(opt.getLongOpt(),  opt);	  Option    longOpts    =    optionGroups.get(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
175	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  shortOpts.put(opt.getLongOpt(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  shortOpts  =  shortOpts.put(opt.getLongOpt(),  key);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  shortOpts  =  shortOpts.put(opt.getLongOpt(),  key);	  shortOpts.put(key.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
176	[BUG]  [BUGGY]  shortOpts.put(opt.getKey(),  opt)  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(opt.getKey(),  opt)  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(opt.getKey(),  opt)	  shortOpts.put(opt.getLongOpt(),    opt)    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
177	[BUG]  [BUGGY]  Aleger  opt  =  opt.cloneOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Aleger  opt  =  opt.cloneOption();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Aleger  opt  =  opt.cloneOption();	  Aleger    opt    =    opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
178	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt()  &&  longOpts.contains(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpts  =  opt.getShortOpt()  &&  longOpts.contains(key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpts  =  opt.getShortOpt()  &&  longOpts.contains(key);	  Option    shortOpts    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
179	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(key.indexOf( "   "),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(key.indexOf( "   "),  opt);  }  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	if(opt.hasLongOpt())  {  longOpts.put(key.indexOf( "   "),  opt);  }	  longOpts.put(key.indexOf(   "       "),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
180	[BUG]  [BUGGY]  Option  opt  =  opt.getOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOpt();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOpt();	  Option    opt    =    opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
181	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(longOpts.contains(key))  {  shortOpts.add(opt.getLongOpt());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  if(opt.hasLongOpt())  {  if(longOpts.contains(key))  {  shortOpts.add(opt.getLongOpt());  }  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	if(opt.hasLongOpt())  {  if(longOpts.contains(key))  {  shortOpts.add(opt.getLongOpt());  }	  [Delete]    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
182	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(longOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  if(opt.hasLongOpt())  {  if(longOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	if(opt.hasLongOpt())  {  if(longOpts.contains(key))  {  requiredOpts.add(key);  }	  [Delete]    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
183	[BUG]  [BUGGY]  opt  =(Option)opt.getValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt  =(Option)opt.getValue();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt  =(Option)opt.getValue();	  [Delete]    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
184	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt(),  true));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt(),  true));  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(longOpts.get(opt.getLongOpt(),  true));	  opt.setLongOpt(longOpts.get(opt.getLongOpt(),    opt));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
185	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  longOpts.add(opt.getLongOpt());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  if(opt.hasLongOpt())  {  longOpts.add(opt.getLongOpt());  }  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	if(opt.hasLongOpt())  {  longOpts.add(opt.getLongOpt());  }	  longOpts.add(opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
186	[BUG]  [BUGGY]  ShortOpts.put(opt.getKey(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts.put(opt.getKey(),  key);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts.put(opt.getKey(),  key);	  shortOpts.put(opt.getKey(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
187	[BUG]  [BUGGY]  opt.setLongOpt(opt.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  opt.setLongOpt(opt.indexOf(key));  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	opt.setLongOpt(opt.indexOf(key));	  opt.setLongOpt(longOpts.indexOf(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
188	[BUG]  [BUGGY]  Option  opt  =  opt.cloneTree();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.cloneTree();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.cloneTree();	  Option    opt    =    opt.cloneOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
189	[BUG]  [BUGGY]  Option  shortOpt  =  opt.getShortOpt()  &&  longOpts.contains(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  shortOpt  =  opt.getShortOpt()  &&  longOpts.contains(key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  shortOpt  =  opt.getShortOpt()  &&  longOpts.contains(key);	  Option    shortOpt    =    opt.getShortOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
190	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(),  key,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(),  key,  requiredOpts);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(),  key,  requiredOpts);	  Option    opt    =    opt.getOption(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
191	[BUG]  [BUGGY]  shortOpts  =  opt.getLongOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts  =  opt.getLongOpt();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts  =  opt.getLongOpt();	  longOpts    =    opt.getLongOpt();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
192	[BUG]  [BUGGY]  Option  opt  =  opt.getOption(key,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOption(key,  null);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOption(key,  null);	  Option    opt    =    opt.getOption(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
193	[BUG]  [BUGGY]  Option  opt  =  opt.getOpt()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  opt  =  opt.getOpt()  :  null;  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  opt  =  opt.getOpt()  :  null;	  Option    opt    =    opt.getOption()    :    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
194	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(key,  opt);  }  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	if(opt.hasLongOpt())  {  longOpts.put(key,  opt);  }	  longOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
195	[BUG]  [BUGGY]  longOpts.put(key,  opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(key,  opt.getLongOpt());  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(key,  opt.getLongOpt());	  longOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
196	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  key,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  longOpts.put(opt.getLongOpt(),  key,  null);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	longOpts.put(opt.getLongOpt(),  key,  null);	  longOpts.put(opt.getLongOpt(),    key,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
197	[BUG]  [BUGGY]  Option  option  =  opt.getOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  Option  option  =  opt.getOptionGroup();  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	Option  option  =  opt.getOptionGroup();	  Option    option    =    opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
198	[BUG]  [BUGGY]  ShortOpts  shortOpts  =  longOpts.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  ShortOpts  shortOpts  =  longOpts.get(key);  [BUGGY]      longOpts.put(opt.getLongOpt(),  opt);  }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	ShortOpts  shortOpts  =  longOpts.get(key);	  ShortOpts    longOpts    =    shortOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
199	[BUG]  [BUGGY]  shortOpts.put(key,  opt.getLongOpt(),  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(key,  opt.getLongOpt(),  true);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(key,  opt.getLongOpt(),  true);	  shortOpts.put(key,    opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
200	[BUG]  [BUGGY]  shortOpts.put(key,  opt.getLongOpt(),  this);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      public  Options  addOption(Option  opt)  {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {      [BUGGY]  shortOpts.put(key,  opt.getLongOpt(),  this);  [BUGGY]      }  if  (opt.isRequired())  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	159	159	1	replace	shortOpts.put(key,  opt.getLongOpt(),  this);	  shortOpts.put(key,    opt.getLongOpt());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
