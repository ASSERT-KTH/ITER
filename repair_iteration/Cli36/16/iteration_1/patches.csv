bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	      if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
2	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(key);  }	      if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
3	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.add(key);  }	      if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
4	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(opt.hasOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
5	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(opt.hasOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
6	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(opt.hasOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
7	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  longOpts);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOptionGroup(),  longOpts);	      Option    opt    =(Option)opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
8	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  shortOpts);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOptionGroup(),  shortOpts);	      Option    opt    =(Option)opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
9	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
10	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
11	[BUG]  [BUGGY]  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
12	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
13	[BUG]  [BUGGY]  if(opt.isRequired()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  ||  shortOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  shortOpts.containsKey(key))  {	  if(opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
14	[BUG]  [BUGGY]  if(!longOpts.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!longOpts.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {	  if(opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
15	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }	      longOpts.put(opt.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
16	[BUG]  [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  shortOpts.put(opt.getLongOpt(),  opt);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	shortOpts.put(opt.getLongOpt(),  opt);	      longOpts.put(opt.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
17	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  else  {  shortOpts.put(opt.getLongOpt(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  else  {  shortOpts.put(opt.getLongOpt(),  opt);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }  else  {  shortOpts.put(opt.getLongOpt(),  opt);  }	      longOpts.put(opt.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
18	[BUG]  [BUGGY]  if(!longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key))  {	  if(!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
19	[BUG]  [BUGGY]  if(!shortOpts.contains(key)||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!shortOpts.contains(key)||  shortOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!shortOpts.contains(key)||  shortOpts.contains(key))  {	  if(!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
20	[BUG]  [BUGGY]  if(!shortOpts.contains(key)&&!shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!shortOpts.contains(key)&&!shortOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!shortOpts.contains(key)&&!shortOpts.contains(key))  {	  if(!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
21	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(shortOpts.contains(key)||  shortOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)||  shortOpts.contains(key))  {	  if(!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
22	[BUG]  [BUGGY]  if(opt.isRequired()  &&  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  &&  opt.isRequired())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  &&  opt.isRequired())  {	  if(opt.isRequired()    ||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
23	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  ||  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  ||  opt.isRequired())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.isRequired()  ||  opt.isRequired())  {	  if(opt.isRequired()    ||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
24	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
25	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasRequiredOpt()  &&  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  &&  longOpts.contains(key))  {	  if(opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
26	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasRequiredOpt()  ||  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  ||  longOpts.contains(key))  {	  if(opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
27	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  ||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasRequiredOpt()  ||  opt.hasLongOpt())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  ||  opt.hasLongOpt())  {	  if(opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
28	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  ||  opt.hasRequiredOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasRequiredOpt()  ||  opt.hasRequiredOpt())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  ||  opt.hasRequiredOpt())  {	  if(opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
29	[BUG]  [BUGGY]  if(!opt.isRequired()  &&!requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!opt.isRequired()  &&!requiredOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&!requiredOpts.contains(key))  {	  if(!opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
30	[BUG]  [BUGGY]  if(!opt.isRequired()  &&!shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!opt.isRequired()  &&!shortOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&!shortOpts.contains(key))  {	  if(!opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
31	[BUG]  [BUGGY]  if(!opt.isRequired()  &&!longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!opt.isRequired()  &&!longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&!longOpts.contains(key))  {	  if(!opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
32	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	      if(opt.hasOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
33	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(key);  }	      if(opt.hasOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
34	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.add(key);  }	      if(opt.hasOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
35	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
36	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
37	[BUG]  [BUGGY]  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
38	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.containskey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.containskey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  if(optionGroups.containskey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
39	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
40	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
41	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
42	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasLongOpt())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {	  if(opt.hasOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
43	[BUG]  [BUGGY]  if(opt.hasOpt()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOpt()  ||  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt()  ||  longOpts.contains(key))  {	  if(opt.hasOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
44	[BUG]  [BUGGY]  if(opt.hasOpt()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOpt()  &&  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt()  &&  longOpts.contains(key))  {	  if(opt.hasOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
45	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =  optionGroups.get(key,  shortOpts);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(key,  shortOpts);	      Option    opt    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
46	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(key,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =  optionGroups.get(key,  longOpts);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(key,  longOpts);	      Option    opt    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
47	[BUG]  [BUGGY]  Option  opt  =  options.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =  options.get(key);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  options.get(key);	      Option    opt    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
48	[BUG]  [BUGGY]  if(opt.isRequired()  &&  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  &&  opt.hasLongOpt())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  &&  opt.hasLongOpt())  {	  if(opt.isRequired()    ||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
49	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
50	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.hasLongOpt()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  ||  opt.hasLongOpt()  ||  shortOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  opt.hasLongOpt()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
51	[BUG]  [BUGGY]  if(requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key))  {  requiredOpts.add(key);  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
52	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  shortOpts  =  optionGroups.get(key);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpts  =  optionGroups.get(key);	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
53	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOption(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)opt.getOption(),  longOpts);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOption(),  longOpts);	      Option    opt    =(Option)opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
54	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOption(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)opt.getOption(),  shortOpts);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOption(),  shortOpts);	      Option    opt    =(Option)opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
55	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption());  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(opt.getOption());	      Option    opt    =(Option)opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
56	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
57	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
58	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
59	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
60	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
61	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
62	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
63	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  options.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(optionGroups.containsKey(key)||  options.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  options.containsKey(key))  {	  if(optionGroups.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
64	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  optionGroups.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(optionGroups.containsKey(key)||  optionGroups.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  optionGroups.containsKey(key))  {	  if(optionGroups.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
65	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key))  {	  if(optionGroups.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
66	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(optionGroups.containsKey(key)||  opt.hasLongOpt())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.hasLongOpt())  {	  if(optionGroups.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
67	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(longOpts);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(longOpts);	      Option    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
68	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  longOpts);	      Option    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
69	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  shortOpts);	      Option    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
70	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)longOpts.clone();  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.clone();	      Option    opt    =(Option)opt.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
71	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)optionGroups.clone();  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.clone();	      Option    opt    =(Option)opt.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
72	[BUG]  [BUGGY]  Option  opt  =(Option)opt.clone(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)opt.clone(),  longOpts);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.clone(),  longOpts);	      Option    opt    =(Option)opt.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
73	[BUG]  [BUGGY]  if(optionGroups.isRequired()  &&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(optionGroups.isRequired()  &&  longOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  &&  longOpts.containsKey(key))  {	  if(opt.isRequired()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
74	[BUG]  [BUGGY]  if(!opt.isRequired()  &&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!opt.isRequired()  &&  longOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&  longOpts.containsKey(key))  {	  if(opt.isRequired()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
75	[BUG]  [BUGGY]  if(opt.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
76	[BUG]  [BUGGY]  if(!longOpts.contains(key)||  opt.isRequired()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!longOpts.contains(key)||  opt.isRequired()  ||  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)||  opt.isRequired()  ||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
77	[BUG]  [BUGGY]  if(optionGroups.isRequired()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(optionGroups.isRequired()  ||  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  ||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
78	[BUG]  [BUGGY]  if(opt.isRequired()  &&  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  &&  shortOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  &&  shortOpts.containsKey(key))  {	  if(opt.isRequired()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
79	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =  optionGroups.get(opt);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt);	      Option    opt    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
80	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt.key);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =  optionGroups.get(opt.key);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt.key);	      Option    opt    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
81	[BUG]  [BUGGY]  if(opt.isRequired()  ||  longOpts.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  ||  longOpts.hasLongOpt())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  longOpts.hasLongOpt())  {	  if(opt.isRequired()    ||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
82	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
83	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
84	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
85	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)longOpts.getOption();  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.getOption();	      Option    opt    =(Option)opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
86	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||!opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(optionGroups.containsKey(key)||!opt.isRequired())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||!opt.isRequired())  {	  if(!opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
87	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  ||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  opt.isRequired()  ||  longOpts.containsKey(key))  {	  if(opt.isRequired()    ||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
88	[BUG]  [BUGGY]  requiredOpts.remove(opt.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  requiredOpts.remove(opt.indexOf(key));  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	requiredOpts.remove(opt.indexOf(key));	      if(opt.hasOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
89	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.getOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)longOpts.getOptionGroup();  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.getOptionGroup();	      Option    opt    =(Option)opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
90	[BUG]  [BUGGY]  Options  optionGroups  =  opt.getOptionGroups();  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Options  optionGroups  =  opt.getOptionGroups();  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Options  optionGroups  =  opt.getOptionGroups();	      Option    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
91	[BUG]  [BUGGY]  Option  optionGroups  =  options.getOptionGroups();  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  optionGroups  =  options.getOptionGroups();  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  options.getOptionGroups();	      Option    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
92	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(this);	      Option    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
93	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.hasOption(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(optionGroups.containsKey(key)||  opt.hasOption(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.hasOption(key))  {	  if(optionGroups.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
94	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {	  if(optionGroups.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
95	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }	      if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
96	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
97	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
98	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
99	[BUG]  [BUGGY]  if(!shortOpts.contains(key)&&!longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!shortOpts.contains(key)&&!longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!shortOpts.contains(key)&&!longOpts.contains(key))  {	  if(!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
100	[BUG]  [BUGGY]  if(!shortOpts.contains(key)||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!shortOpts.contains(key)||  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!shortOpts.contains(key)||  longOpts.contains(key))  {	  if(!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
101	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
102	[BUG]  [BUGGY]  if(opt.hasOption())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOption())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {	  if(opt.hasOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
103	[BUG]  [BUGGY]  if(opt.hasOpt()  &&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOpt()  &&  longOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt()  &&  longOpts.containsKey(key))  {	  if(opt.hasOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
104	[BUG]  [BUGGY]  if(optionGroups.isRequired()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(optionGroups.isRequired()  ||  longOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  ||  longOpts.containsKey(key))  {	  if(opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
105	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  &&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasRequiredOpt()  &&  longOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  &&  longOpts.containsKey(key))  {	  if(opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
106	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasRequiredOpt()  ||  longOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  ||  longOpts.containsKey(key))  {	  if(opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
107	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
108	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
109	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
110	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
111	[BUG]  [BUGGY]  if(opt.isRequired()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  &&  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  &&  longOpts.contains(key))  {	  if(opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
112	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(true);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(true);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(true);	      Option    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
113	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.get(opt.getOption());  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)longOpts.get(opt.getOption());  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.get(opt.getOption());	      Option    opt    =(Option)opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
114	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption());  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(opt.getOption());	      Option    opt    =(Option)opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
115	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)this.optionGroups.get(key);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(key);	      Option    opt    =(Option)opt.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
116	[BUG]  [BUGGY]  if(!shortOpts.contains(key)&&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!shortOpts.contains(key)&&  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!shortOpts.contains(key)&&  longOpts.contains(key))  {	  if(!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
117	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.isRequired()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired()  ||  opt.isRequired()  ||  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  opt.isRequired()  ||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
118	[BUG]  [BUGGY]  if(opt.hasShortOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasShortOpt())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasShortOpt())  {	  if(opt.hasOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
119	[BUG]  [BUGGY]  if(opt.hasOpt()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOpt()  ||  longOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt()  ||  longOpts.containsKey(key))  {	  if(opt.hasOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
120	[BUG]  [BUGGY]  Option  opt  =  shortOpts.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =  shortOpts.get(key);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  shortOpts.get(key);	      Option    opt    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
121	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =  optionGroups.get(key,  opt);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(key,  opt);	      Option    opt    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
122	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasRequiredOpt()  ||  shortOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  ||  shortOpts.contains(key))  {	  if(opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
123	[BUG]  [BUGGY]  if(requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key))  {	  if(opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
124	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)optionGroups.get(key);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(key);	      Option    opt    =(Option)opt.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
125	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	      if(opt.hasOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
126	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  ||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  ||  opt.hasLongOpt())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.isRequired()  ||  opt.hasLongOpt())  {	  if(opt.isRequired()    ||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
127	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key)||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
128	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(shortOpts.contains(key)||  opt.isRequired())  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)||  opt.isRequired())  {	  if(opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
129	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
130	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
131	[BUG]  [BUGGY]  Option  opt  =(Option)shortOpts.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  Option  opt  =(Option)shortOpts.clone();  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)shortOpts.clone();	      Option    opt    =(Option)opt.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
132	[BUG]  [BUGGY]  if(!opt.isRequired()  &&  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!opt.isRequired()  &&  shortOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&  shortOpts.containsKey(key))  {	  if(opt.isRequired()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
133	[BUG]  [BUGGY]  if(!longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!longOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.containsKey(key))  {	  if(opt.isRequired()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
134	[BUG]  [BUGGY]  if(!opt.isRequired()  &&!shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(!opt.isRequired()  &&!shortOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&!shortOpts.containsKey(key))  {	  if(!opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
135	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  longOpts.put(opt.getLongOpt(),  key);  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	longOpts.put(opt.getLongOpt(),  key);	      longOpts.put(opt.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
136	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
137	[BUG]  [BUGGY]  if(requiredOpts.contains(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts.contains(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
138	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(requiredOpts.containsKey(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]    if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	      if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
139	[BUG]  [BUGGY]  if(shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }      [BUGGY]  if(shortOpts.containsKey(key))  {  [BUGGY]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.containsKey(key))  {	  if(opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
