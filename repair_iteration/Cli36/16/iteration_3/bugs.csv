bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
2	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
3	[BUG]  [BUGGY]  LongOpts  shortOpts  =  longOpts.get(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  LongOpts  shortOpts  =  longOpts.get(opt.getLongOpt());  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	LongOpts  shortOpts  =  longOpts.get(opt.getLongOpt());	  if(opt.hasLongOpt())    {    longOpts.put(opt.getLongOpt(),    opt);    }    else    {    shortOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
4	[BUG]  [BUGGY]  LongOpts  requiredOpts  =  longOpts.get(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  LongOpts  requiredOpts  =  longOpts.get(opt.getLongOpt());  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	LongOpts  requiredOpts  =  longOpts.get(opt.getLongOpt());	  if(opt.hasLongOpt())    {    longOpts.put(opt.getLongOpt(),    opt);    }    else    {    shortOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
5	[BUG]  [BUGGY]  if(requiredOpts.hasRequiredOpt()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.hasRequiredOpt()  &&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.hasRequiredOpt()  &&  longOpts.contains(key))  {	  if(opt.hasRequiredOpt()    &&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
6	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  &&  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasRequiredOpt()  &&  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  &&  shortOpts.contains(key))  {	  if(opt.hasRequiredOpt()    &&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
7	[BUG]  [BUGGY]  if(optionGroups.hasRequiredOpt()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.hasRequiredOpt()  &&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.hasRequiredOpt()  &&  longOpts.contains(key))  {	  if(opt.hasRequiredOpt()    &&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
8	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.getOptionGroup(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)longOpts.getOptionGroup(),  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.getOptionGroup(),  opt);	  Option    opt    =(Option)opt.getOptionGroup(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
9	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  longOpts,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOptionGroup(),  longOpts,  shortOpts);	  Option    opt    =(Option)opt.getOptionGroup(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
10	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  shortOpts,  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOptionGroup(),  shortOpts,  longOpts);	  Option    opt    =(Option)opt.getOptionGroup(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
11	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
12	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
13	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasRequiredOpt()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  ||  shortOpts.containsKey(key))  {	  if(opt.hasRequiredOpt()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	replace
14	[BUG]  [BUGGY]  if(longOpts.containsKey(key)||  opt.hasRequiredOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.containsKey(key)||  opt.hasRequiredOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.containsKey(key)||  opt.hasRequiredOpt())  {	  if(opt.hasRequiredOpt()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	replace
15	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  longOpts,  shortOpts);	  Option    optionGroups    =    opt.getOptionGroups(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
16	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts,  lengthOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  longOpts,  lengthOpts);	  Option    optionGroups    =    opt.getOptionGroups(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
17	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  &&  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  &&  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.isRequired()  &&  opt.isRequired())  {	  if(opt.isRequired()    &&    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
18	[BUG]  [BUGGY]  if(!opt.isRequired()  &&  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  &&  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&  opt.isRequired())  {	  if(opt.isRequired()    &&    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
19	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired()  &&  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired()  &&  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  opt.isRequired()  &&  opt.isRequired())  {	  if(opt.isRequired()    &&    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
20	[BUG]  [BUGGY]  optionGroups.put(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  optionGroups.put(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	optionGroups.put(opt.getIndexOf(key));	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(requiredOpts.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
21	[BUG]  [BUGGY]  Option  shortOpts  =  options.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  shortOpts  =  options.get(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpts  =  options.get(key);	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(requiredOpts.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
22	[BUG]  [BUGGY]  optionGroups.put(opt.getKey(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  optionGroups.put(opt.getKey(),  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	optionGroups.put(opt.getKey(),  opt);	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(requiredOpts.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
23	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  optionGroups.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  optionGroups.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  optionGroups.containsKey(key))  {	  if(optionGroups.containsKey(key)||    optionGroups.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
24	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  shortOpts.containsKey(key))  {	  if(optionGroups.containsKey(key)||    optionGroups.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
25	[BUG]  [BUGGY]  optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
26	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
27	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	130	None	replace
28	[BUG]  [BUGGY]  while(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  while(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	while(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	130	None	replace
29	[BUG]  [BUGGY]  while(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  while(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	while(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));	  if(requiredOpts!=    null)    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	130	None	replace
30	[BUG]  [BUGGY]  Option  option  =(Option)longOpts.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  option  =(Option)longOpts.clone();  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  option  =(Option)longOpts.clone();	  Option    opt    =(Option)longOpts.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
31	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
32	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
33	[BUG]  [BUGGY]  Option  opt  =  options.get(key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  options.get(key,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  options.get(key,  shortOpts);	  Option    opt    =    options.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
34	[BUG]  [BUGGY]  Option  opt  =  options.get(key,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  options.get(key,  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  options.get(key,  longOpts);	  Option    opt    =    options.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
35	[BUG]  [BUGGY]  Option  opt  =  options.get(key,  optionGroups);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  options.get(key,  optionGroups);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  options.get(key,  optionGroups);	  Option    opt    =    options.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
36	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	108	None	replace
37	[BUG]  [BUGGY]  while(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  while(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	while(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));	  if(opt.hasOptions())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	108	None	replace
38	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	108	None	replace
39	[BUG]  [BUGGY]  Option  opt  =(Option)langOpts.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)langOpts.clone();  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)langOpts.clone();	  Option    opt    =(Option)shortOpts.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	131	None	replace
40	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	107	None	replace
41	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)||  options.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)||  options.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key)||  options.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	107	None	replace
42	[BUG]  [BUGGY]  Option  opt  =(Option)shortOpts.getOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)shortOpts.getOptionGroup();  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)shortOpts.getOptionGroup();	  Option    opt    =(Option)longOpts.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
43	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.getObject();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)longOpts.getObject();  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.getObject();	  Option    opt    =(Option)longOpts.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
44	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.getObjectGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)longOpts.getObjectGroup();  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.getObjectGroup();	  Option    opt    =(Option)longOpts.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
45	[BUG]  [BUGGY]  if(opt.hasOpt()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOpt()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt()  ||  shortOpts.contains(key))  {	  if(opt.hasOpt()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
46	[BUG]  [BUGGY]  if(longOpts.contains(key)||  opt.hasOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.contains(key)||  opt.hasOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.contains(key)||  opt.hasOpt())  {	  if(opt.hasOpt()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
47	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  shortOpts.put(opt.getLongOpt(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  shortOpts.put(opt.getLongOpt(),  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  shortOpts.put(opt.getLongOpt(),  opt);  }	  shortOpts.put(opt.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
48	[BUG]  [BUGGY]  shortOpts.put(opt.getLongOpt(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  shortOpts.put(opt.getLongOpt(),  key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	shortOpts.put(opt.getLongOpt(),  key);	  shortOpts.put(opt.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
49	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired()  ||  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired()  ||  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  opt.isRequired()  ||  opt.isRequired())  {	  if(optionGroups.containsKey(key)||    opt.isRequired()    ||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
50	[BUG]  [BUGGY]  if(opt.isRequired()  ||  optionGroups.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  optionGroups.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  optionGroups.containsKey(key))  {	  if(optionGroups.containsKey(key)||    opt.isRequired()    ||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
51	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  shortOpts  =  optionGroups.get(key,  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpts  =  optionGroups.get(key,  opt);	  Option    shortOpts    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
52	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  shortOpts  =  optionGroups.get(opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpts  =  optionGroups.get(opt);	  Option    shortOpts    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
53	[BUG]  [BUGGY]  if(opt.isRequired()  ||  shortOpts.contains(key)||  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  shortOpts.contains(key)||  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  shortOpts.contains(key)||  opt.isRequired())  {	  if(shortOpts.contains(key)||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	128	None	replace
54	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.contains(key)||  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key)||  opt.isRequired())  {	  if(shortOpts.contains(key)||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	128	None	replace
55	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.isRequired())  {	  if(shortOpts.contains(key)||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	128	None	replace
56	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  opt.isRequired()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)||  opt.isRequired()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)||  opt.isRequired()  ||  longOpts.contains(key))  {	  if(shortOpts.contains(key)||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	128	None	replace
57	[BUG]  [BUGGY]  Options  optionGroups  =  opt.getOptionGroups(longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Options  optionGroups  =  opt.getOptionGroups(longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Options  optionGroups  =  opt.getOptionGroups(longOpts);	  Options    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
58	[BUG]  [BUGGY]  Options  optionGroups  =  opt.getOptionGroups(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Options  optionGroups  =  opt.getOptionGroups(),  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Options  optionGroups  =  opt.getOptionGroups(),  shortOpts);	  Options    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
59	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(this,  shortOpts);	  Option    optionGroups    =    opt.getOptionGroups(this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
60	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(this,  longOpts);	  Option    optionGroups    =    opt.getOptionGroups(this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
61	[BUG]  [BUGGY]  if(opt.hasOpt()  &&  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOpt()  &&  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt()  &&  shortOpts.containsKey(key))  {	  if(opt.hasOpt()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
62	[BUG]  [BUGGY]  if(optionGroups.hasOpt()  &&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.hasOpt()  &&  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.hasOpt()  &&  longOpts.containsKey(key))  {	  if(opt.hasOpt()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
63	[BUG]  [BUGGY]  if(longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.containsKey(key))  {	  if(opt.hasOpt()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
64	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt.key,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(opt.key,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt.key,  shortOpts);	  Option    opt    =    optionGroups.get(opt.key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
65	[BUG]  [BUGGY]  Option  opt  =  options.get(opt.key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  options.get(opt.key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  options.get(opt.key);	  Option    opt    =    optionGroups.get(opt.key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
66	[BUG]  [BUGGY]  Option  optionGroups  =  options.getOptionGroups(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  options.getOptionGroups(opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  options.getOptionGroups(opt);	  Option    optionGroups    =    options.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
67	[BUG]  [BUGGY]  Option  optionGroups  =  options.getOptionGroups(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  options.getOptionGroups(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  options.getOptionGroups(key);	  Option    optionGroups    =    options.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
68	[BUG]  [BUGGY]  Option  optionGroups  =  options.getOptionGroups(options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  options.getOptionGroups(options);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  options.getOptionGroups(options);	  Option    optionGroups    =    options.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
69	[BUG]  [BUGGY]  requiredOpts.remove(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  requiredOpts.remove(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	requiredOpts.remove(opt.getIndexOf(key));	  if(requiredOpts.containsKey(key))    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
70	[BUG]  [BUGGY]  optionGroups.remove(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  optionGroups.remove(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	optionGroups.remove(opt.getIndexOf(key));	  if(requiredOpts.containsKey(key))    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
71	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpts  =  optionGroups.get(opt.getIndexOf(key));	  if(requiredOpts.containsKey(key))    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
72	[BUG]  [BUGGY]  if(shortOpts.containsKey(key)||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.containsKey(key)||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.containsKey(key)||  shortOpts.containsKey(key))  {	  if(shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	139	None	replace
73	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)||  shortOpts.containsKey(key))  {	  if(shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	139	None	replace
74	[BUG]  [BUGGY]  if(opt.hasOpt()  &&  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOpt()  &&  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt()  &&  shortOpts.contains(key))  {	  if(opt.hasOpt()    &&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
75	[BUG]  [BUGGY]  if(optionGroups.hasOpt()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.hasOpt()  &&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.hasOpt()  &&  longOpts.contains(key))  {	  if(opt.hasOpt()    &&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
76	[BUG]  [BUGGY]  if(longOpts.hasOpt()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.hasOpt()  &&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.hasOpt()  &&  longOpts.contains(key))  {	  if(opt.hasOpt()    &&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
77	[BUG]  [BUGGY]  if(opt.hasOpt()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOpt()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt()  ||  shortOpts.containsKey(key))  {	  if(opt.hasOpt()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	119	None	replace
78	[BUG]  [BUGGY]  if(longOpts.containsKey(key)||  opt.hasOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.containsKey(key)||  opt.hasOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.containsKey(key)||  opt.hasOpt())  {	  if(opt.hasOpt()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	119	None	replace
79	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
80	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
81	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
82	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(false);	  Option    optionGroups    =    opt.getOptionGroups(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	112	None	replace
83	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(false,  shortOpts);	  Option    optionGroups    =    opt.getOptionGroups(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	112	None	replace
84	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(false,  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(false,  longOpts);	  Option    optionGroups    =    opt.getOptionGroups(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	112	None	replace
85	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(true,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(true,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(true,  shortOpts);	  Option    optionGroups    =    opt.getOptionGroups(true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	112	None	replace
86	[BUG]  [BUGGY]  if(optionGroups.isRequired()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.isRequired()  &&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  &&  longOpts.contains(key))  {	  if(opt.isRequired()    &&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	111	None	replace
87	[BUG]  [BUGGY]  if(!opt.isRequired()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  &&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&  longOpts.contains(key))  {	  if(opt.isRequired()    &&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	111	None	replace
88	[BUG]  [BUGGY]  if(opt.hasLongOpt()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt()  &&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt()  &&  longOpts.contains(key))  {	  if(opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
89	[BUG]  [BUGGY]  if(opt.hasLongOpt()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt()  ||  longOpts.contains(key))  {	  if(opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
90	[BUG]  [BUGGY]  if(opt.hasLongOpt()  ||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt()  ||  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt()  ||  opt.hasLongOpt())  {	  if(opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
91	[BUG]  [BUGGY]  if(opt.hasLongOpt()  &&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt()  &&  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt()  &&  longOpts.containsKey(key))  {	  if(opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
92	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(key);	  Option    optionGroups    =    opt.getOptionGroups(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
93	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(longOpts,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(longOpts,  shortOpts);	  Option    optionGroups    =    opt.getOptionGroups(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
94	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(longOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(longOpts,  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(longOpts,  longOpts);	  Option    optionGroups    =    opt.getOptionGroups(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
95	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(longOpts,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(longOpts,  lengthOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(longOpts,  lengthOpts);	  Option    optionGroups    =    opt.getOptionGroups(longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
96	[BUG]  [BUGGY]  if(optionGroups.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
97	[BUG]  [BUGGY]  if(requiredOpts.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
98	[BUG]  [BUGGY]  if(!opt.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  ||  opt.isRequired()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
99	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
100	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  options.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  options.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  options.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
101	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
102	[BUG]  [BUGGY]  if(!opt.isRequired()  ||!shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  ||!shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  ||!shortOpts.contains(key))  {	  if(!opt.isRequired()    &&!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
103	[BUG]  [BUGGY]  if(opt.isRequired()  ||!shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||!shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||!shortOpts.contains(key))  {	  if(!opt.isRequired()    &&!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
104	[BUG]  [BUGGY]  if(!opt.isRequired()  &&!shortOpts.contains(key)||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  &&!shortOpts.contains(key)||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&!shortOpts.contains(key)||  shortOpts.contains(key))  {	  if(!opt.isRequired()    &&!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
105	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  &&  opt.hasRequiredOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasRequiredOpt()  &&  opt.hasRequiredOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  &&  opt.hasRequiredOpt())  {	  if(opt.hasRequiredOpt()    ||    opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
106	[BUG]  [BUGGY]  if(opt.hasLongOpt()  ||  opt.hasRequiredOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt()  ||  opt.hasRequiredOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt()  ||  opt.hasRequiredOpt())  {	  if(opt.hasRequiredOpt()    ||    opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
107	[BUG]  [BUGGY]  if(optionGroups.isRequired()  &&  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.isRequired()  &&  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  &&  shortOpts.containsKey(key))  {	  if(opt.isRequired()    &&    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
108	[BUG]  [BUGGY]  if(shortOpts.isRequired()  &&  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.isRequired()  &&  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.isRequired()  &&  opt.isRequired())  {	  if(opt.isRequired()    &&    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
109	[BUG]  [BUGGY]  if(optionGroups.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.hasLongOpt()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
110	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.containsKey(key))  {	  if(opt.isRequired()    ||    opt.hasLongOpt()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
111	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)optionGroups.get(opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(opt);	  Option    opt    =(Option)optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	124	None	replace
112	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)longOpts.get(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.get(key);	  Option    opt    =(Option)optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	124	None	replace
113	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
114	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)||  longOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
115	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)&&  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)&&  shortOpts.containsKey(key))  {	  if(requiredOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
116	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
117	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
118	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {	  if(requiredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
119	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key)||  shortOpts.contains(key))  {	  if(requiredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
120	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  longOpts);	  Option    opt    =(Option)this.optionGroups.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
121	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  shortOpts);	  Option    opt    =(Option)this.optionGroups.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
122	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  key);	  Option    opt    =(Option)this.optionGroups.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
123	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(opt.getOption(),  longOpts);	  Option    opt    =(Option)optionGroups.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
124	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(opt.getOption(),  shortOpts);	  Option    opt    =(Option)optionGroups.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
125	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(opt.getOption(),  key);	  Option    opt    =(Option)optionGroups.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
126	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.isRequired()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  opt.isRequired()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  opt.isRequired()  ||  shortOpts.containsKey(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
127	[BUG]  [BUGGY]  if(optionGroups.isRequired()  ||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.isRequired()  ||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  ||  opt.isRequired()  ||  longOpts.containsKey(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
128	[BUG]  [BUGGY]  if(opt.isRequired()  &&  opt.isRequired()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  &&  opt.isRequired()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  &&  opt.isRequired()  ||  longOpts.containsKey(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
129	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  else  {  longOpts.put(opt.getLongOpt(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  else  {  longOpts.put(opt.getLongOpt(),  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  else  {  longOpts.put(opt.getLongOpt(),  opt);  }	  if(requiredOpts!=    null)    {    if(optionGroups.containskey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
130	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  else  {  shortOpts.put(opt.getLongOpt(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  else  {  shortOpts.put(opt.getLongOpt(),  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  else  {  shortOpts.put(opt.getLongOpt(),  opt);  }	  if(requiredOpts!=    null)    {    if(optionGroups.containskey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
131	[BUG]  [BUGGY]  requiredOpts.add(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  requiredOpts.add(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	requiredOpts.add(opt.getIndexOf(key));	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
132	[BUG]  [BUGGY]  optionGroups.add(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  optionGroups.add(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	optionGroups.add(opt.getIndexOf(key));	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
133	[BUG]  [BUGGY]  if(opt.hasShortOpt()  ||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasShortOpt()  ||  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasShortOpt()  ||  opt.hasLongOpt())  {	  if(opt.hasShortOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
134	[BUG]  [BUGGY]  if(opt.hasShortOpt()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasShortOpt()  &&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasShortOpt()  &&  longOpts.contains(key))  {	  if(opt.hasShortOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
135	[BUG]  [BUGGY]  if(opt.hasShortOpt()  &&  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasShortOpt()  &&  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasShortOpt()  &&  shortOpts.contains(key))  {	  if(opt.hasShortOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
136	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.add(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  requiredOpts.add(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  requiredOpts.add(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
137	[BUG]  [BUGGY]  ters.remove(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  ters.remove(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	ters.remove(opt.getIndexOf(key));	  if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
138	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.add(key);  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)&&    longOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
139	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.add(key);  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)&&    longOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
140	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.add(key);  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)&&    longOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
141	[BUG]  [BUGGY]  if(opt.hasOption(key)||  optionGroups.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption(key)||  optionGroups.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption(key)||  optionGroups.containsKey(key))  {	  if(optionGroups.containsKey(key)||    opt.hasOption(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
142	[BUG]  [BUGGY]  if(opt.hasOption(key)||  opt.hasOption(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption(key)||  opt.hasOption(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption(key)||  opt.hasOption(key))  {	  if(optionGroups.containsKey(key)||    opt.hasOption(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
143	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  opt.hasOption(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  opt.hasOption(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  opt.hasOption(key))  {	  if(optionGroups.containsKey(key)||    opt.hasOption(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
144	[BUG]  [BUGGY]  if(!longOpts.containsKey(key)&&!requiredOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.containsKey(key)&&!requiredOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.containsKey(key)&&!requiredOpts.containsKey(key))  {	  if(!longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	133	None	replace
145	[BUG]  [BUGGY]  if(!longOpts.containsKey(key)||!longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.containsKey(key)||!longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.containsKey(key)||!longOpts.containsKey(key))  {	  if(!longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	133	None	replace
146	[BUG]  [BUGGY]  if(!longOpts.containsKey(key)||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.containsKey(key)||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.containsKey(key)||  longOpts.containsKey(key))  {	  if(!longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	133	None	replace
147	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
148	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
149	[BUG]  [BUGGY]  Option  opt  =(Option)shortOpts.getOption();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)shortOpts.getOption();  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)shortOpts.getOption();	  Option    opt    =(Option)longOpts.getOption();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
150	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(requiredOpts.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
151	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }	  if(requiredOpts.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
152	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(opt.getIndexOf(key));  }	  if(requiredOpts.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
153	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.get(opt.getOption(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)longOpts.get(opt.getOption(),  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.get(opt.getOption(),  longOpts);	  Option    opt    =(Option)longOpts.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	113	None	replace
154	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.get(opt.getOption(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)longOpts.get(opt.getOption(),  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.get(opt.getOption(),  shortOpts);	  Option    opt    =(Option)longOpts.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	113	None	replace
155	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.get(opt.getOption(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)longOpts.get(opt.getOption(),  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.get(opt.getOption(),  opt);	  Option    opt    =(Option)longOpts.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	113	None	replace
156	[BUG]  [BUGGY]  if(!shortOpts.contains(key)&&  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!shortOpts.contains(key)&&  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!shortOpts.contains(key)&&  shortOpts.contains(key))  {	  if(!shortOpts.contains(key)||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
157	[BUG]  [BUGGY]  if(!longOpts.contains(key)||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)||  shortOpts.contains(key))  {	  if(!shortOpts.contains(key)||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
158	[BUG]  [BUGGY]  if(!shortOpts.contains(key)||  shortOpts.contains(opt))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!shortOpts.contains(key)||  shortOpts.contains(opt))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!shortOpts.contains(key)||  shortOpts.contains(opt))  {	  if(!shortOpts.contains(key)||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
159	[BUG]  [BUGGY]  if(longOpts.contains(key)||  opt.hasRequiredOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.contains(key)||  opt.hasRequiredOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.contains(key)||  opt.hasRequiredOpt())  {	  if(opt.hasRequiredOpt()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
160	[BUG]  [BUGGY]  if(optionGroups.isRequired()  ||  opt.hasLongOpt()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.isRequired()  ||  opt.hasLongOpt()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  ||  opt.hasLongOpt()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.hasLongOpt()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
161	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.hasLongOpt()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  opt.hasLongOpt()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  opt.hasLongOpt()  ||  shortOpts.containsKey(key))  {	  if(opt.isRequired()    ||    opt.hasLongOpt()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
162	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
163	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(opt);	  Option    opt    =(Option)this.optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	replace
164	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)this.optionGroups.get(key,  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(key,  opt);	  Option    opt    =(Option)this.optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	replace
165	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(key  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)this.optionGroups.get(key  +  1);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(key  +  1);	  Option    opt    =(Option)this.optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	replace
166	[BUG]  [BUGGY]  if(!longOpts.contains(key)&&!longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)&&!longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)&&!longOpts.contains(key))  {	  if(!shortOpts.contains(key)&&!longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
167	[BUG]  [BUGGY]  if(!shortOpts.contains(key)||!longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!shortOpts.contains(key)||!longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!shortOpts.contains(key)||!longOpts.contains(key))  {	  if(!shortOpts.contains(key)&&!longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
168	[BUG]  [BUGGY]  if(shortOpts.contains(key)||!longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)||!longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)||!longOpts.contains(key))  {	  if(!shortOpts.contains(key)&&!longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
169	[BUG]  [BUGGY]  longOpts.put(opt.getLongOpt(),  opt,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  longOpts.put(opt.getLongOpt(),  opt,  requiredOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	longOpts.put(opt.getLongOpt(),  opt,  requiredOpts);	  longOpts.put(opt.getLongOpt(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	135	None	replace
170	[BUG]  [BUGGY]  optionGroups.remove(opt.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  optionGroups.remove(opt.indexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	optionGroups.remove(opt.indexOf(key));	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	129	None	replace
171	[BUG]  [BUGGY]  if(optionGroups.isRequired()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.isRequired()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  ||  shortOpts.containsKey(key))  {	  if(optionGroups.isRequired()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
172	[BUG]  [BUGGY]  if(!optionGroups.isRequired()  &&  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!optionGroups.isRequired()  &&  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!optionGroups.isRequired()  &&  shortOpts.containsKey(key))  {	  if(optionGroups.isRequired()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
173	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
174	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
175	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
176	[BUG]  [BUGGY]  if(optionGroups.isRequired()  ||  opt.isRequired()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.isRequired()  ||  opt.isRequired()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  ||  opt.isRequired()  ||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	117	None	replace
177	[BUG]  [BUGGY]  if(requiredOpts.isRequired()  ||  opt.isRequired()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.isRequired()  ||  opt.isRequired()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.isRequired()  ||  opt.isRequired()  ||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	117	None	replace
178	[BUG]  [BUGGY]  if(!opt.isRequired()  ||!requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  ||!requiredOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  ||!requiredOpts.contains(key))  {	  if(!opt.isRequired()    &&!requiredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
179	[BUG]  [BUGGY]  if(opt.isRequired()  ||!requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||!requiredOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||!requiredOpts.contains(key))  {	  if(!opt.isRequired()    &&!requiredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
180	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(opt,  key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt,  key);	  Option    opt    =    optionGroups.get(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	121	None	replace
181	[BUG]  [BUGGY]  Option  opt  =  options.get(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  options.get(key,  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  options.get(key,  opt);	  Option    opt    =    optionGroups.get(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	121	None	replace
182	[BUG]  [BUGGY]  if(longOpts.isRequired()  ||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.isRequired()  ||  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.isRequired()  ||  opt.hasLongOpt())  {	  if(opt.isRequired()    ||    longOpts.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
183	[BUG]  [BUGGY]  if(requiredOpts.isRequired()  ||  longOpts.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.isRequired()  ||  longOpts.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.isRequired()  ||  longOpts.hasLongOpt())  {	  if(opt.isRequired()    ||    longOpts.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
184	[BUG]  [BUGGY]  if(longOpts.hasLongOpt()  ||  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.hasLongOpt()  ||  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.hasLongOpt()  ||  opt.isRequired())  {	  if(opt.isRequired()    ||    longOpts.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
185	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(longOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
186	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(longOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
187	[BUG]  [BUGGY]  requiredOpts.remove(longOpts.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  requiredOpts.remove(longOpts.indexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	requiredOpts.remove(longOpts.indexOf(key));	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(longOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
188	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.add(key);  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)&&    longOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
189	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.add(key);  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)&&    longOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
190	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.getOption(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)longOpts.getOption(),  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.getOption(),  opt);	  Option    opt    =(Option)opt.getOption(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
191	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOption(),  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOption(),  longOpts,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOption(),  longOpts,  shortOpts);	  Option    opt    =(Option)opt.getOption(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
192	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOption(),  longOpts,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOption(),  longOpts,  lengthOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOption(),  longOpts,  lengthOpts);	  Option    opt    =(Option)opt.getOption(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
193	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  shortOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
194	[BUG]  [BUGGY]  if(!opt.isRequired()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  ||  longOpts.containsKey(key))  {	  if(!opt.isRequired()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
195	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
196	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(key);  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
197	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.add(key);  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
198	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.add(key);  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
199	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.clone(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)longOpts.clone(),  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)longOpts.clone(),  opt);	  Option    opt    =(Option)opt.clone(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
200	[BUG]  [BUGGY]  Option  opt  =(Option)opt.clone(),  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.clone(),  longOpts,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.clone(),  longOpts,  shortOpts);	  Option    opt    =(Option)opt.clone(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
201	[BUG]  [BUGGY]  Option  opt  =(Option)opt.clone(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.clone(),  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.clone(),  shortOpts);	  Option    opt    =(Option)opt.clone(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
202	[BUG]  [BUGGY]  Option  opt  =(Option)opt.clone(),  longOpts,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.clone(),  longOpts,  lengthOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.clone(),  longOpts,  lengthOpts);	  Option    opt    =(Option)opt.clone(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
203	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(key,  longOpts,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(key,  longOpts,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(key,  longOpts,  shortOpts);	  Option    opt    =    optionGroups.get(key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
204	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(key,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(key,  lengthOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(key,  lengthOpts);	  Option    opt    =    optionGroups.get(key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
205	[BUG]  [BUGGY]  if(!opt.isRequired()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  ||  shortOpts.containsKey(key))  {	  if(!opt.isRequired()    &&    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	132	None	replace
206	[BUG]  [BUGGY]  if(!opt.isRequired()  &&  shortOpts.containsKey(key)||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  &&  shortOpts.containsKey(key)||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&  shortOpts.containsKey(key)||  shortOpts.containsKey(key))  {	  if(!opt.isRequired()    &&    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	132	None	replace
207	[BUG]  [BUGGY]  if(!opt.isRequired()  &&  requiredOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  &&  requiredOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&  requiredOpts.containsKey(key))  {	  if(!opt.isRequired()    &&    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	132	None	replace
208	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  lengthOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOptionGroup(),  lengthOpts);	  Option    opt    =(Option)opt.getOptionGroup(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
209	[BUG]  [BUGGY]  requiredOpts.remove(requiredOpts.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  requiredOpts.remove(requiredOpts.indexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	requiredOpts.remove(requiredOpts.indexOf(key));	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
210	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  longOpts.containsKey(key))  {	  if(optionGroups.containsKey(key)&&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
211	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  shortOpts.containsKey(key))  {	  if(optionGroups.containsKey(key)&&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
212	[BUG]  [BUGGY]  if(longOpts.containsKey(key)&&  optionGroups.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.containsKey(key)&&  optionGroups.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.containsKey(key)&&  optionGroups.containsKey(key))  {	  if(optionGroups.containsKey(key)&&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
213	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {	  if(optionGroups.containsKey(key)&&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
214	[BUG]  [BUGGY]  if(optionGroups.hasRequiredOpt()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.hasRequiredOpt()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.hasRequiredOpt()  ||  shortOpts.contains(key))  {	  if(opt.hasRequiredOpt()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	122	None	replace
215	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  opt.hasRequiredOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)||  opt.hasRequiredOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)||  opt.hasRequiredOpt())  {	  if(opt.hasRequiredOpt()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	122	None	replace
216	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
217	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
218	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  shortOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  shortOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  shortOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
219	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  &&  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasRequiredOpt()  &&  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  &&  opt.hasLongOpt())  {	  if(opt.hasRequiredOpt()    ||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
220	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.hasRequiredOpt()  ||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  opt.hasRequiredOpt()  ||  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.hasRequiredOpt()  ||  opt.hasLongOpt())  {	  if(opt.hasRequiredOpt()    ||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
221	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired()  &&  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired()  &&  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  opt.isRequired()  &&  opt.hasLongOpt())  {	  if(opt.isRequired()    &&    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
222	[BUG]  [BUGGY]  if(!opt.isRequired()  &&  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  &&  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&  opt.hasLongOpt())  {	  if(opt.isRequired()    &&    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
223	[BUG]  [BUGGY]  if(optionGroups.isRequired()  &&  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.isRequired()  &&  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  &&  opt.hasLongOpt())  {	  if(opt.isRequired()    &&    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
224	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	109	None	replace
225	[BUG]  [BUGGY]  while(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  while(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	while(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));	  if(opt.hasOptions())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	109	None	replace
226	[BUG]  [BUGGY]  Option  opt  =  shortOpts.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  shortOpts.get(opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  shortOpts.get(opt);	  Option    opt    =    optionGroups.get(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
227	[BUG]  [BUGGY]  Option  opt  =  options.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  options.get(opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  options.get(opt);	  Option    opt    =    optionGroups.get(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
228	[BUG]  [BUGGY]  Option  opt  =  longOpts.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  longOpts.get(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  longOpts.get(key);	  Option    opt    =    shortOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	120	None	replace
229	[BUG]  [BUGGY]  Option  opt  =  shortOpts.get(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  shortOpts.get(key,  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  shortOpts.get(key,  opt);	  Option    opt    =    shortOpts.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	120	None	replace
230	[BUG]  [BUGGY]  if(longOpts.contains(key)||  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.contains(key)||  requiredOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.contains(key)||  requiredOpts.contains(key))  {	  if(requiredOpts.contains(key)||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	127	None	replace
231	[BUG]  [BUGGY]  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key)&&  longOpts.contains(key))  {	  if(requiredOpts.contains(key)||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	127	None	replace
232	[BUG]  [BUGGY]  if(optionGroups.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.isRequired()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
233	[BUG]  [BUGGY]  if(requiredOpts.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.isRequired()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
234	[BUG]  [BUGGY]  if(shortOpts.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.isRequired()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
235	[BUG]  [BUGGY]  if(longOpts.contains(key)||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.contains(key)||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.contains(key)||  shortOpts.contains(key))  {	  if(shortOpts.contains(key)||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
236	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)||  longOpts.contains(key))  {	  if(shortOpts.contains(key)||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
237	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  shortOpts.contains(opt))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)||  shortOpts.contains(opt))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)||  shortOpts.contains(opt))  {	  if(shortOpts.contains(key)||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
238	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(requiredOpts.contains(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	137	None	replace
239	[BUG]  [BUGGY]  if(!opt.isRequired()  ||!longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  ||!longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  ||!longOpts.contains(key))  {	  if(!opt.isRequired()    &&!longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
240	[BUG]  [BUGGY]  if(opt.isRequired()  ||!longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||!longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||!longOpts.contains(key))  {	  if(!opt.isRequired()    &&!longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
241	[BUG]  [BUGGY]  if(requiredOpts.hasRequiredOpt()  &&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.hasRequiredOpt()  &&  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.hasRequiredOpt()  &&  longOpts.containsKey(key))  {	  if(opt.hasRequiredOpt()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	105	None	replace
242	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  &&  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasRequiredOpt()  &&  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  &&  shortOpts.containsKey(key))  {	  if(opt.hasRequiredOpt()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	105	None	replace
243	[BUG]  [BUGGY]  if(optionGroups.hasRequiredOpt()  &&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.hasRequiredOpt()  &&  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.hasRequiredOpt()  &&  longOpts.containsKey(key))  {	  if(opt.hasRequiredOpt()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	105	None	replace
244	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	125	None	replace
245	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	125	None	replace
246	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	125	None	replace
247	[BUG]  [BUGGY]  if(opt.indexOf(key)!=  -1)  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.indexOf(key)!=  -1)  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.indexOf(key)!=  -1)  {  requiredOpts.remove(opt.indexOf(key));  }	  requiredOpts.remove(opt.indexOf(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
248	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  requiredOpts.remove(opt.indexOf(key));  }	  requiredOpts.remove(opt.indexOf(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
249	[BUG]  [BUGGY]  if(!shortOpts.contains(key)||!shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!shortOpts.contains(key)||!shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!shortOpts.contains(key)||!shortOpts.contains(key))  {	  if(!shortOpts.contains(key)&&!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
250	[BUG]  [BUGGY]  if(!longOpts.contains(key)&&!requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)&&!requiredOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)&&!requiredOpts.contains(key))  {	  if(!longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
251	[BUG]  [BUGGY]  if(!longOpts.contains(key)||!longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)||!longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)||!longOpts.contains(key))  {	  if(!longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
252	[BUG]  [BUGGY]  if(!longOpts.contains(key)||!requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)||!requiredOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)||!requiredOpts.contains(key))  {	  if(!longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
253	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(opt.hasOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
254	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(opt.hasOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
255	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key,  opt);  }	  if(opt.hasOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
256	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
257	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
258	[BUG]  [BUGGY]  while(requiredOpts.contains(key)&&!requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  while(requiredOpts.contains(key)&&!requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	while(requiredOpts.contains(key)&&!requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	37	None	replace
259	[BUG]  [BUGGY]  if(!longOpts.containsKey(key)||  opt.isRequired()  &&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.containsKey(key)||  opt.isRequired()  &&  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.containsKey(key)||  opt.isRequired()  &&  longOpts.containsKey(key))  {	  if(!longOpts.containsKey(key)||    opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
260	[BUG]  [BUGGY]  if(!longOpts.containsKey(key)&&  opt.isRequired()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.containsKey(key)&&  opt.isRequired()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.containsKey(key)&&  opt.isRequired()  ||  longOpts.containsKey(key))  {	  if(!longOpts.containsKey(key)||    opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
261	[BUG]  [BUGGY]  if(!longOpts.containsKey(key)||  opt.isRequired()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.containsKey(key)||  opt.isRequired()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.containsKey(key)||  opt.isRequired()  ||  shortOpts.containsKey(key))  {	  if(!longOpts.containsKey(key)||    opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
262	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key)||    opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
263	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key)||    opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
264	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  optionGroups.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  optionGroups.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  optionGroups.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key)||    opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
265	[BUG]  [BUGGY]  if(!longOpts.contains(key)&&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)&&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)&&  longOpts.contains(key))  {	  if(!shortOpts.contains(key)&&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	116	None	replace
266	[BUG]  [BUGGY]  if(!longOpts.contains(key)&&  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)&&  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)&&  shortOpts.contains(key))  {	  if(!shortOpts.contains(key)&&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	116	None	replace
267	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(key,  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(key,  shortOpts,  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(key,  shortOpts,  longOpts);	  Option    opt    =    optionGroups.get(key,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
268	[BUG]  [BUGGY]  Option  option  =  optionGroups.get(key,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  option  =  optionGroups.get(key,  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  option  =  optionGroups.get(key,  longOpts);	  Option    opt    =    optionGroups.get(key,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
269	[BUG]  [BUGGY]  if(!optionGroups.isRequired()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!optionGroups.isRequired()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!optionGroups.isRequired()  ||  longOpts.contains(key))  {	  if(optionGroups.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
270	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  options.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  options.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  options.containsKey(key))  {	  if(optionGroups.containsKey(key)||    options.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
271	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  options.containsKey(key,  opt))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  options.containsKey(key,  opt))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  options.containsKey(key,  opt))  {	  if(optionGroups.containsKey(key)||    options.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
272	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  options.containsKey(value))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  options.containsKey(value))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  options.containsKey(value))  {	  if(optionGroups.containsKey(key)||    options.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
273	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  opt.hasLongOpt())  {	  if(optionGroups.containsKey(key)||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
274	[BUG]  [BUGGY]  if(opt.hasLongOpt()  ||  optionGroups.containsKey(key)||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt()  ||  optionGroups.containsKey(key)||  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt()  ||  optionGroups.containsKey(key)||  opt.hasLongOpt())  {	  if(optionGroups.containsKey(key)||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
275	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  longOpts.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  longOpts.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  longOpts.hasLongOpt())  {	  if(optionGroups.containsKey(key)||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
276	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&!opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&!opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&!opt.isRequired())  {	  if(optionGroups.containsKey(key)||!opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
277	[BUG]  [BUGGY]  if(opt.isRequired()  ||  optionGroups.containsKey(key)||!opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  optionGroups.containsKey(key)||!opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  optionGroups.containsKey(key)||!opt.isRequired())  {	  if(optionGroups.containsKey(key)||!opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
278	[BUG]  [BUGGY]  if(opt.isRequired()  ||  options.containsKey(key)||!opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  options.containsKey(key)||!opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  options.containsKey(key)||!opt.isRequired())  {	  if(optionGroups.containsKey(key)||!opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
279	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||!opt.isRequired()  &&  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||!opt.isRequired()  &&  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||!opt.isRequired()  &&  shortOpts.containsKey(key))  {	  if(optionGroups.containsKey(key)||!opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
280	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
281	[BUG]  [BUGGY]  Option  shortOpts  =  opt.getShortOpt();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  shortOpts  =  opt.getShortOpt();  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpts  =  opt.getShortOpt();	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
282	[BUG]  [BUGGY]  optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	optionGroups.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
283	[BUG]  [BUGGY]  optionGroups.containsKey(key))  {  requiredOpts.add(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  optionGroups.containsKey(key))  {  requiredOpts.add(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	optionGroups.containsKey(key))  {  requiredOpts.add(key);	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
284	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.clone();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)this.optionGroups.clone();  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.clone();	  Option    opt    =(Option)optionGroups.clone();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
285	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
286	[BUG]  [BUGGY]  while(requiredOpts.containsKey(key)&&!requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  while(requiredOpts.containsKey(key)&&!requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	while(requiredOpts.containsKey(key)&&!requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
287	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  else  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  else  {  shortOpts.put(key,  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  else  {  shortOpts.put(key,  opt);  }	  if(opt.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
288	[BUG]  [BUGGY]  if(!longOpts.contains(key)||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)||  longOpts.contains(key))  {	  if(!shortOpts.contains(key)||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	100	None	replace
289	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOption(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOption(),  shortOpts,  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOption(),  shortOpts,  longOpts);	  Option    opt    =(Option)opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
290	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.getOption(),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)optionGroups.getOption(),  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.getOption(),  shortOpts);	  Option    opt    =(Option)opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
291	[BUG]  [BUGGY]  if(opt.hasOption()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption()  &&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption()  &&  longOpts.contains(key))  {	  if(opt.hasOption())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
292	[BUG]  [BUGGY]  if(opt.hasOption()  ||  opt.hasOption())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption()  ||  opt.hasOption())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption()  ||  opt.hasOption())  {	  if(opt.hasOption())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
293	[BUG]  [BUGGY]  if(opt.hasOption()  &&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption()  &&  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption()  &&  longOpts.containsKey(key))  {	  if(opt.hasOption())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	102	None	replace
294	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts.containsKey(key)||    requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
295	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts.containsKey(key)||    requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
296	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  longOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)||  longOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)||  longOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts.containsKey(key)||    requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
297	[BUG]  [BUGGY]  LongOpts  shortOpts  =  longOpts.put(opt.getLongOpt(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  LongOpts  shortOpts  =  longOpts.put(opt.getLongOpt(),  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	LongOpts  shortOpts  =  longOpts.put(opt.getLongOpt(),  opt);	  if(opt.hasLongOpt())    {    longOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
298	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  longOpts);	  Option    optionGroups    =    opt.getOptionGroups(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
299	[BUG]  [BUGGY]  if(!longOpts.contains(key)||  opt.isRequired()  &&  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)||  opt.isRequired()  &&  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)||  opt.isRequired()  &&  longOpts.contains(key))  {	  if(!longOpts.contains(key)||    opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
300	[BUG]  [BUGGY]  if(!longOpts.contains(key)&&  opt.isRequired()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)&&  opt.isRequired()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)&&  opt.isRequired()  ||  longOpts.contains(key))  {	  if(!longOpts.contains(key)||    opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
301	[BUG]  [BUGGY]  if(!longOpts.contains(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {	  if(!longOpts.contains(key)||    opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
302	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(key);  }	  if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
303	[BUG]  [BUGGY]  while(requiredOpts.contains(key))  {  requiredOpts.add(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  while(requiredOpts.contains(key))  {  requiredOpts.add(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	while(requiredOpts.contains(key))  {  requiredOpts.add(key);	  if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
304	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.add(key);  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
305	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.add(key);  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
306	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts!=    null    ||    shortOpts.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
307	[BUG]  [BUGGY]  if(longOpts!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts!=    null    ||    shortOpts.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
308	[BUG]  [BUGGY]  if(longOpts!=  null)  {  if(requiredOpts  ==  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts!=  null)  {  if(requiredOpts  ==  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts!=  null)  {  if(requiredOpts  ==  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts!=    null    ||    shortOpts.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
309	[BUG]  [BUGGY]  if(!opt.isRequired()  ||!shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  ||!shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  ||!shortOpts.containsKey(key))  {	  if(!opt.isRequired()    &&!shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	134	None	replace
310	[BUG]  [BUGGY]  if(opt.isRequired()  ||!shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||!shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||!shortOpts.containsKey(key))  {	  if(!opt.isRequired()    &&!shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	134	None	replace
311	[BUG]  [BUGGY]  if(!opt.isRequired()  &&!shortOpts.containsKey(key)||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  &&!shortOpts.containsKey(key)||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&!shortOpts.containsKey(key)||  shortOpts.containsKey(key))  {	  if(!opt.isRequired()    &&!shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	134	None	replace
312	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)||  options.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)||  options.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key)||  options.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
313	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
314	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
315	[BUG]  [BUGGY]  ters.put(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  ters.put(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	ters.put(opt.getIndexOf(key));	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	replace
316	[BUG]  [BUGGY]  if(shortOpts.isRequired()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.isRequired()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.isRequired()  ||  shortOpts.containsKey(key))  {	  if(opt.isRequired()    ||    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
317	[BUG]  [BUGGY]  if(requiredOpts.isRequired()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.isRequired()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.isRequired()  ||  shortOpts.containsKey(key))  {	  if(opt.isRequired()    ||    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
318	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  &&  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  &&  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.isRequired()  &&  opt.hasLongOpt())  {	  if(optionGroups.containsKey(key)||    opt.isRequired()    ||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	126	None	replace
319	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired()  ||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired()  ||  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  opt.isRequired()  ||  opt.hasLongOpt())  {	  if(optionGroups.containsKey(key)||    opt.isRequired()    ||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	126	None	replace
320	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.hasOpt()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  opt.hasOpt()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  opt.hasOpt()  ||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.hasLongOpt()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
321	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.contains(longOpts.indexOf(key)))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.contains(longOpts.indexOf(key)))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  opt.hasLongOpt()  ||  longOpts.contains(longOpts.indexOf(key)))  {	  if(opt.isRequired()    ||    opt.hasLongOpt()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
322	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts!=  null)  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {	  if(requiredOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
323	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt.getIndexOf(key));	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
324	[BUG]  [BUGGY]  if(opt.hasIndexOf(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasIndexOf(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasIndexOf(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
325	[BUG]  [BUGGY]  if(opt.hasIndexOf(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasIndexOf(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasIndexOf(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
326	[BUG]  [BUGGY]  if(longOpts.containsKey(key)&&  options.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.containsKey(key)&&  options.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.containsKey(key)&&  options.containsKey(key))  {	  if(optionGroups.containsKey(key)&&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
327	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key,  opt);  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
328	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	108	None	replace
329	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  opt.hasRequiredOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.contains(key)||  opt.hasRequiredOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key)||  opt.hasRequiredOpt())  {	  if(opt.hasRequiredOpt()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
330	[BUG]  [BUGGY]  shortOpts.put(opt.getLongOpt(),  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  shortOpts.put(opt.getLongOpt(),  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	shortOpts.put(opt.getLongOpt(),  longOpts);	  shortOpts.put(opt.getLongOpt(),    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
331	[BUG]  [BUGGY]  if(opt.hasIndexOf(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasIndexOf(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasIndexOf(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
332	[BUG]  [BUGGY]  if(opt.hasIndexOf(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasIndexOf(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasIndexOf(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
333	[BUG]  [BUGGY]  if(opt.hasIndexOf(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasIndexOf(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasIndexOf(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
334	[BUG]  [BUGGY]  optionGroups.put(opt.getOptionGroup(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  optionGroups.put(opt.getOptionGroup(),  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	optionGroups.put(opt.getOptionGroup(),  opt);	  if(opt.isRequired())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
335	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  longOpts,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  longOpts,  lengthOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOptionGroup(),  longOpts,  lengthOpts);	  Option    opt    =(Option)opt.getOptionGroup(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
336	[BUG]  [BUGGY]  if(opt.hasOption()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption()  ||  longOpts.containsKey(key))  {	  if(opt.hasOpt()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	119	None	replace
337	[BUG]  [BUGGY]  Options  optionGroups  =  options.getOptionGroups();  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Options  optionGroups  =  options.getOptionGroups();  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Options  optionGroups  =  options.getOptionGroups();	  Options    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
338	[BUG]  [BUGGY]  Options  optionGroups  =  opt.getOptionGroups(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Options  optionGroups  =  opt.getOptionGroups(option);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Options  optionGroups  =  opt.getOptionGroups(option);	  Options    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
339	[BUG]  [BUGGY]  if(shortOpts.contains(key)&&!longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)&&!longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)&&!longOpts.contains(key))  {	  if(!shortOpts.contains(key)&&!longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
340	[BUG]  [BUGGY]  if(shortOpts.containsKey(key)||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.containsKey(key)||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.containsKey(key)||  longOpts.containsKey(key))  {	  if(shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	139	None	replace
341	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
342	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
343	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
344	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key)||    opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
345	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)&&  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)&&  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)&&  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key)||    opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
346	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
347	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
348	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
349	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  shortOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  shortOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  shortOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	107	None	replace
350	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	107	None	replace
351	[BUG]  [BUGGY]  Option  optionGroup  =  opt.getOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroup  =  opt.getOptionGroup();  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroup  =  opt.getOptionGroup();	  if(requiredOpts.containsKey(key))    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
352	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOption(),  langOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOption(),  langOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOption(),  langOpts);	  Option    opt    =(Option)opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
353	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOption(),  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOption(),  lengthOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOption(),  lengthOpts);	  Option    opt    =(Option)opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
354	[BUG]  [BUGGY]  requiredOpts.add(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  requiredOpts.add(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	requiredOpts.add(key);	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
355	[BUG]  [BUGGY]  requiredOpts.add(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  requiredOpts.add(opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	requiredOpts.add(opt);	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
356	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(longOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(longOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(longOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(longOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
357	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
358	[BUG]  [BUGGY]  if(opt.isRequired()  &&  opt.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  &&  opt.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  &&  opt.isRequired()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
359	[BUG]  [BUGGY]  if(opt.hasOpt()  ||  opt.hasRequiredOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOpt()  ||  opt.hasRequiredOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt()  ||  opt.hasRequiredOpt())  {	  if(opt.hasRequiredOpt()    ||    opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
360	[BUG]  [BUGGY]  if(!longOpts.containsKey(key)&&!longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.containsKey(key)&&!longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.containsKey(key)&&!longOpts.containsKey(key))  {	  if(!longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	133	None	replace
361	[BUG]  [BUGGY]  if(!longOpts.containsKey(key)||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.containsKey(key)||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.containsKey(key)||  shortOpts.containsKey(key))  {	  if(!longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	133	None	replace
362	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(requiredOpts.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
363	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(requiredOpts.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
364	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key)  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key)  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key)  }	  if(requiredOpts.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
365	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  }	  if(requiredOpts.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
366	[BUG]  [BUGGY]  if(opt.isRequired()  &&  opt.isRequired()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  &&  opt.isRequired()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  &&  opt.isRequired()  ||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	117	None	replace
367	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.isRequired()  ||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	117	None	replace
368	[BUG]  [BUGGY]  if(opt.hasRequiredOpt()  ||  longOpts.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasRequiredOpt()  ||  longOpts.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasRequiredOpt()  ||  longOpts.hasLongOpt())  {	  if(opt.hasRequiredOpt()    ||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
369	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getLongOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getLongOpt());  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpts  =  optionGroups.get(opt.getLongOpt());	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
370	[BUG]  [BUGGY]  Option  shortOpt  =  optionGroups.get(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  shortOpt  =  optionGroups.get(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpt  =  optionGroups.get(opt.getIndexOf(key));	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
371	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getKey());  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpts  =  optionGroups.get(opt.getKey());	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
372	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  opt);	  Option    opt    =(Option)this.optionGroups.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
373	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  requiredOpts.add(key);  }	  if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
374	[BUG]  [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
375	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null)  {  requiredOpts.add(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null)  {  requiredOpts.add(key,  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(requiredOpts!=  null)  {  requiredOpts.add(key,  opt);  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
376	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key,  opt);  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	101	None	replace
377	[BUG]  [BUGGY]  if(shortOpts.contains(key)&&  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)&&  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)&&  shortOpts.contains(key))  {	  if(shortOpts.contains(key)||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
378	[BUG]  [BUGGY]  if(opt.isRequired()  &&  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  &&  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  &&  shortOpts.contains(key))  {	  if(opt.isRequired()    &&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	111	None	replace
379	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  optionalOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  optionalOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  optionalOpts.containsKey(key))  {	  if(optionGroups.containsKey(key)||    optionGroups.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
380	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  options);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(opt.getOption(),  options);	  Option    opt    =(Option)optionGroups.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
381	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  lengthOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(opt.getOption(),  lengthOpts);	  Option    opt    =(Option)optionGroups.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
382	[BUG]  [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(optionGroups.containskey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
383	[BUG]  [BUGGY]  if(opt!=  null)  {  if(optionGroups.containskey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(optionGroups.containskey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(optionGroups.containskey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(optionGroups.containskey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
384	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key))  {  requiredOpts.add(key);  }	  if(requiredOpts.contains(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
385	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(requiredOpts.contains(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	137	None	replace
386	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(requiredOpts.contains(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	137	None	replace
387	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key)  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key)  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key)  }	  if(requiredOpts.contains(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	137	None	replace
388	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt.getOption());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(opt.getOption());  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt.getOption());	  Option    opt    =    optionGroups.get(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
389	[BUG]  [BUGGY]  if(opt.hasOpt())  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOpt())  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt())  {  requiredOpts.remove(opt.indexOf(key));  }	  requiredOpts.remove(opt.indexOf(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
390	[BUG]  [BUGGY]  if(opt.isRequired())  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  requiredOpts.remove(opt.indexOf(key));  }	  requiredOpts.remove(opt.indexOf(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
391	[BUG]  [BUGGY]  if(opt.hasOption())  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  requiredOpts.remove(opt.indexOf(key));  }	  requiredOpts.remove(opt.indexOf(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
392	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.contains(key)||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key)||  longOpts.containsKey(key))  {	  if(requiredOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
393	[BUG]  [BUGGY]  if(!opt.isRequired()  &&!longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  &&!longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&!longOpts.containsKey(key))  {	  if(!opt.isRequired()    &&!shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	134	None	replace
394	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt.keyOpt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(opt.keyOpt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt.keyOpt);	  Option    opt    =    optionGroups.get(opt.key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
395	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt.keyOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(opt.keyOpt());  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt.keyOpt());	  Option    opt    =    optionGroups.get(opt.key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
396	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
397	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)||  shortOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
398	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt,  longOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(opt,  longOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt,  longOpts);	  Option    opt    =    optionGroups.get(key,    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
399	[BUG]  [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getShortOpt());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  shortOpts  =  optionGroups.get(opt.getShortOpt());  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpts  =  optionGroups.get(opt.getShortOpt());	  Option    shortOpts    =    optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
400	[BUG]  [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
401	[BUG]  [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  neededOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  neededOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  neededOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
402	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getKey());  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(opt.getKey());	  Option    opt    =(Option)this.optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	replace
403	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(opt.key);	  Option    opt    =(Option)this.optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	replace
404	[BUG]  [BUGGY]  if(!longOpts.contains(key)||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.contains(key)||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.contains(key)||  longOpts.containsKey(key))  {	  if(!longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
405	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  longOpts,  requiredOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  longOpts,  requiredOpts);	  Option    optionGroups    =    opt.getOptionGroups(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
406	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(opt.key);	  Option    opt    =(Option)optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	124	None	replace
407	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getKey());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getKey());  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(opt.getKey());	  Option    opt    =(Option)optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	124	None	replace
408	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
409	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	replace
410	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)||  opt.hasIndexOf(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)||  opt.hasIndexOf(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key)||  opt.hasIndexOf(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	replace
411	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt,  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(opt,  shortOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt,  shortOpts);	  Option    opt    =    optionGroups.get(key,    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
412	[BUG]  [BUGGY]  if(opt.isRequired()  &&  longOpts.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  &&  longOpts.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  &&  longOpts.hasLongOpt())  {	  if(opt.isRequired()    &&    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
413	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts.containsKey(key)||    requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
414	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key)||  requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts.containsKey(key)||    requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
415	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
416	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
417	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  shortOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  shortOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  shortOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
418	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key)&&  longOpts.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
419	[BUG]  [BUGGY]  if(shortOpts.isRequired()  &&  opt.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.isRequired()  &&  opt.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.isRequired()  &&  opt.containsKey(key))  {	  if(opt.isRequired()    &&    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
420	[BUG]  [BUGGY]  if(opt.hasOpt())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOpt())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	129	None	replace
421	[BUG]  [BUGGY]  if(opt.hasOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	129	None	replace
422	[BUG]  [BUGGY]  if(shortOpts.contains(key)&&!shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)&&!shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)&&!shortOpts.contains(key))  {	  if(!shortOpts.contains(key)&&!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
423	[BUG]  [BUGGY]  if(shortOpts.contains(key)||!shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)||!shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)||!shortOpts.contains(key))  {	  if(!shortOpts.contains(key)&&!shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
424	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  langOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  langOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  langOpts);	  Option    optionGroups    =    opt.getOptionGroups(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
425	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  key);  }	  longOpts.put(opt.getLongOpt(),    key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	135	None	replace
426	[BUG]  [BUGGY]  if(shortOpts.hasRequiredOpt()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.hasRequiredOpt()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.hasRequiredOpt()  ||  shortOpts.contains(key))  {	  if(opt.hasRequiredOpt()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	122	None	replace
427	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)||  longOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
428	[BUG]  [BUGGY]  if(shortOpts.contains(key)&&  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)&&  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)&&  opt.isRequired())  {	  if(shortOpts.contains(key)||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	128	None	replace
429	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
430	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(opt.indexOf(key));  }	  if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
431	[BUG]  [BUGGY]  if(opt.isRequired()  ||  shortOpts.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  shortOpts.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  shortOpts.hasLongOpt())  {	  if(opt.isRequired()    ||    longOpts.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
432	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  opt.hasRequiredOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)||  opt.hasRequiredOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)||  opt.hasRequiredOpt())  {	  if(opt.hasRequiredOpt()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	replace
433	[BUG]  [BUGGY]  if(opt.isRequired()  ||  opt.hasOpt()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  opt.hasOpt()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  opt.hasOpt()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.hasLongOpt()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
434	[BUG]  [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
435	[BUG]  [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(key);  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
436	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.contains(key)&&  longOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
437	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  langOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  langOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOptionGroup(),  langOpts);	  Option    opt    =(Option)opt.getOptionGroup(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
438	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  shortOpts,  langOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  shortOpts,  langOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOptionGroup(),  shortOpts,  langOpts);	  Option    opt    =(Option)opt.getOptionGroup(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
439	[BUG]  [BUGGY]  if(opt.hasOption()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption()  ||  longOpts.contains(key))  {	  if(opt.hasOpt()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
440	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  opt.isRequired())  {	  if(opt.isRequired()    &&    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
441	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts!=    null    ||    shortOpts.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
442	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts!=    null    ||    shortOpts.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
443	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add(key);  }  }	  if(requiredOpts!=    null    ||    shortOpts.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
444	[BUG]  [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt!=  null)  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.add	  if(requiredOpts!=    null    ||    shortOpts.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
445	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
446	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&!longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&!longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&!longOpts.contains(key))  {	  if(!shortOpts.contains(key)&&!longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
447	[BUG]  [BUGGY]  Option  shortOpts  =  optionsGroups.get(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  shortOpts  =  optionsGroups.get(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpts  =  optionsGroups.get(opt.getIndexOf(key));	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
448	[BUG]  [BUGGY]  Annotation  shortOpts  =  optionGroups.get(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Annotation  shortOpts  =  optionGroups.get(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Annotation  shortOpts  =  optionGroups.get(opt.getIndexOf(key));	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
449	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts!=  null)  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts!=  null)  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts!=  null)  {  requiredOpts.add(key);  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
450	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts!=  null)  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts!=  null)  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts!=  null)  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
451	[BUG]  [BUGGY]  if(shortOpts.containsKey(key)&&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.containsKey(key)&&  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.containsKey(key)&&  longOpts.containsKey(key))  {	  if(shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	139	None	replace
452	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key))  {  if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key))  {  if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key))  {  if(optionGroups.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key)||    opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
453	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key))  {  if(optionGroups.containsKey(key)&&  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key))  {  if(optionGroups.containsKey(key)&&  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key))  {  if(optionGroups.containsKey(key)&&  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key)||    opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
454	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)||  opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key)||    opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
455	[BUG]  [BUGGY]  Option  opt  =(Option)shortOpts.get(opt.getOption());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)shortOpts.get(opt.getOption());  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)shortOpts.get(opt.getOption());	  Option    opt    =(Option)longOpts.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	113	None	replace
456	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOptionGroup(),  key);	  Option    opt    =(Option)opt.getOptionGroup(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
457	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  if(opt.isRequired())  {  requiredOpts.add(key);  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
458	[BUG]  [BUGGY]  if(requiredOpts.contains(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.contains(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key))  {  if(optionGroups.containsKey(key))  {  requiredOpts.add(key);  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
459	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  &&  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  &&  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)||  opt.isRequired()  &&  opt.isRequired())  {	  if(opt.isRequired()    &&    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
460	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
461	[BUG]  [BUGGY]  if(shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key))  {	  if(opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
462	[BUG]  [BUGGY]  if(opt.isRequired()  ||  requiredOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired()  ||  requiredOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired()  ||  requiredOpts.contains(key))  {	  if(opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
463	[BUG]  [BUGGY]  if(!optionGroups.isRequired()  &&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!optionGroups.isRequired()  &&  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!optionGroups.isRequired()  &&  longOpts.containsKey(key))  {	  if(optionGroups.isRequired()    &&    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
464	[BUG]  [BUGGY]  if(requiredOpts.contains(key)||  opt.isRequired()  &&  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.contains(key)||  opt.isRequired()  &&  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key)||  opt.isRequired()  &&  opt.hasLongOpt())  {	  if(opt.isRequired()    &&    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
465	[BUG]  [BUGGY]  if(shortOpts!=  null  &&!shortOpts.contains(key)||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts!=  null  &&!shortOpts.contains(key)||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts!=  null  &&!shortOpts.contains(key)||  shortOpts.contains(key))  {	  if(!shortOpts.contains(key)||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
466	[BUG]  [BUGGY]  if(!opt.isRequired()  &&  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  &&  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&  shortOpts.contains(key))  {	  if(opt.isRequired()    &&    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	111	None	replace
467	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||!opt.isRequired()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||!opt.isRequired()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||!opt.isRequired()  ||  longOpts.containsKey(key))  {	  if(optionGroups.containsKey(key)||!opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
468	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||!opt.isRequired()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||!opt.isRequired()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||!opt.isRequired()  ||  shortOpts.containsKey(key))  {	  if(optionGroups.containsKey(key)||!opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
469	[BUG]  [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt()));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  opt.setLongOpt(longOpts.get(opt.getLongOpt()));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	opt.setLongOpt(longOpts.get(opt.getLongOpt()));	  if(opt.hasLongOpt())    {    longOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
470	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)||  opt.optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(optionGroups.containsKey(key)||  opt.optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(optionGroups.containsKey(key)||  opt.optionGroups.containsKey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	107	None	replace
471	[BUG]  [BUGGY]  if(requiredOpts.contains(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.contains(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.contains(key))  {  requiredOpts.remove(longOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(longOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
472	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
473	[BUG]  [BUGGY]  if(longOpts.contains(key)||  opt.hasLongOpt()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.contains(key)||  opt.hasLongOpt()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.contains(key)||  opt.hasLongOpt()  ||  longOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.hasLongOpt()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
474	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(requiredOpts.containsKey(key))    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
475	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(requiredOpts.containsKey(key))    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
476	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.getIndexOf(key));  }	  if(requiredOpts.containsKey(key))    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
477	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
478	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)&&  requiredOpts.containsKey(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
479	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  requiredOpts.add(requiredOpts.indexOf(key));  }	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
480	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts!=    null    ||    shortOpts.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
481	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key);  }	  if(requiredOpts!=    null    ||    shortOpts.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
482	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key,  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts!=  null  ||  shortOpts.containsKey(key))  {  requiredOpts.add(key,  opt);  }	  if(requiredOpts!=    null    ||    shortOpts.containsKey(key))    {    if(requiredOpts.containsKey(key))    {    requiredOpts.add(key);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
483	[BUG]  [BUGGY]  Option  optionGroups  =  options.getOptionGroups(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  options.getOptionGroups(option);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  options.getOptionGroups(option);	  Option    optionGroups    =    options.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
484	[BUG]  [BUGGY]  if(longOpts.isRequired()  ||  longOpts.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.isRequired()  ||  longOpts.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.isRequired()  ||  longOpts.hasLongOpt())  {	  if(opt.isRequired()    ||    longOpts.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
485	[BUG]  [BUGGY]  Option  opt  =  shortOpts.get(opt.key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  shortOpts.get(opt.key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  shortOpts.get(opt.key);	  Option    opt    =    optionGroups.get(opt.key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
486	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt.key,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(opt.key,  key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt.key,  key);	  Option    opt    =    optionGroups.get(opt.key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
487	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOption(),  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOption(),  key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOption(),  key);	  Option    opt    =(Option)opt.getOption(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
488	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts!=  null)  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
489	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts  ==  null)  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts  ==  null)  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts  ==  null)  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
490	[BUG]  [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isOption())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(opt.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
491	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)||  opt.isRequired()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
492	[BUG]  [BUGGY]  Option  shortOpts  =  optionsGroups.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  shortOpts  =  optionsGroups.get(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  shortOpts  =  optionsGroups.get(key);	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	129	None	replace
493	[BUG]  [BUGGY]  Annotation  shortOpts  =  optionGroups.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Annotation  shortOpts  =  optionGroups.get(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Annotation  shortOpts  =  optionGroups.get(key);	  if(opt.isRequired())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	129	None	replace
494	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.hasLongOpt()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  opt.hasLongOpt()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.hasLongOpt()  ||  longOpts.containsKey(key))  {	  if(optionGroups.containsKey(key)||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
495	[BUG]  [BUGGY]  if(shortOpts.containsKey(key)||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.containsKey(key)||  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.containsKey(key)||  opt.hasLongOpt())  {	  if(optionGroups.containsKey(key)||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
496	[BUG]  [BUGGY]  Options  optionGroups  =  opt.getOptionGroups(this);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Options  optionGroups  =  opt.getOptionGroups(this);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Options  optionGroups  =  opt.getOptionGroups(this);	  Options    optionGroups    =    opt.getOptionGroups();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
497	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	replace
498	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.getIndexOf(key));  }	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	98	None	replace
499	[BUG]  [BUGGY]  Option  opt  =(Option)shortOpts.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)shortOpts.get(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)shortOpts.get(key);	  Option    opt    =(Option)optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	124	None	replace
500	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(key,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)optionGroups.get(key,  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(key,  opt);	  Option    opt    =(Option)optionGroups.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	124	None	replace
501	[BUG]  [BUGGY]  if(opt.hasShortOpt()  ||  longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasShortOpt()  ||  longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasShortOpt()  ||  longOpts.contains(key))  {	  if(opt.hasShortOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
502	[BUG]  [BUGGY]  if(!optionGroups.isRequired()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!optionGroups.isRequired()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!optionGroups.isRequired()  ||  shortOpts.contains(key))  {	  if(optionGroups.isRequired()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
503	[BUG]  [BUGGY]  Option  opt  =  optionGroups.get(opt.indexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =  optionGroups.get(opt.indexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =  optionGroups.get(opt.indexOf(key));	  Option    opt    =    optionGroups.get(opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
504	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  removedOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  removedOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.contains(key))  {  removedOpts.remove(opt.getIndexOf(key));  }	  if(requiredOpts.contains(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	137	None	replace
505	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
506	[BUG]  [BUGGY]  if(!shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!shortOpts.containsKey(key))  {	  if(opt.isRequired()    ||    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
507	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  opt.isRequired())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  opt.isRequired())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  opt.isRequired())  {	  if(optionGroups.containsKey(key)||    opt.isRequired()    ||    opt.isRequired())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
508	[BUG]  [BUGGY]  if(shortOpts.contains(key)||  opt.hasLongOpt()  ||  shortOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.contains(key)||  opt.hasLongOpt()  ||  shortOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.contains(key)||  opt.hasLongOpt()  ||  shortOpts.contains(key))  {	  if(opt.isRequired()    ||    opt.hasLongOpt()    ||    shortOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
509	[BUG]  [BUGGY]  if(shortOpts.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(shortOpts.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(shortOpts.containsKey(key)||  opt.isRequired()  ||  longOpts.containsKey(key))  {	  if(opt.isRequired()    ||    opt.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
510	[BUG]  [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  longOpts,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)opt.getOptionGroup(),  longOpts,  key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)opt.getOptionGroup(),  longOpts,  key);	  Option    opt    =(Option)opt.getOptionGroup(),    longOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
511	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  for(int  i  =  0;  i  <  opt.size();  ++i)  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts!=  null)  {  for(int  i  =  0;  i  <  opt.size();  ++i)  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  for(int  i  =  0;  i  <  opt.size();  ++i)  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	130	None	replace
512	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts!=  null)  {  requiredOpts.add(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  requiredOpts.add(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	130	None	replace
513	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  options.containsKey(key)&&  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  options.containsKey(key)&&  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  options.containsKey(key)&&  shortOpts.containsKey(key))  {	  if(optionGroups.containsKey(key)||    options.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
514	[BUG]  [BUGGY]  if(!optionGroups.isRequired()  ||  shortOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!optionGroups.isRequired()  ||  shortOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!optionGroups.isRequired()  ||  shortOpts.containsKey(key))  {	  if(optionGroups.isRequired()    ||    longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	104	None	replace
515	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(opt.indexOf(key));  }	  if(opt.hasOption())    {    if(requiredOpts.containsKey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
516	[BUG]  [BUGGY]  if(longOpts.contains(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(longOpts.contains(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(longOpts.contains(key))  {	  if(opt.hasOpt()    ||    longOpts.contains(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
517	[BUG]  [BUGGY]  Option  opt  =(Option)langOpts.getOptionGroup();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)langOpts.getOptionGroup();  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)langOpts.getOptionGroup();	  Option    opt    =(Option)longOpts.getOptionGroup();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
518	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
519	[BUG]  [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)&&    requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
520	[BUG]  [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)optionGroups.get(opt.getOption(),  opt);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)optionGroups.get(opt.getOption(),  opt);	  Option    opt    =(Option)optionGroups.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
521	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(requiredOpts.contains(key)||  requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }	  if(opt.isOption())    {    if(requiredOpts.contains(key)||    requiredOpts.contains(key))    {    requiredOpts.remove(requiredOpts.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
522	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  opt.hasLongOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  opt.hasLongOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key)||  opt.isRequired()  ||  opt.hasLongOpt())  {	  if(optionGroups.containsKey(key)||    opt.isRequired()    ||    opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	126	None	replace
523	[BUG]  [BUGGY]  forceRequired(opt.getIndexOf(key));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  forceRequired(opt.getIndexOf(key));  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	forceRequired(opt.getIndexOf(key));	  if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
524	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  requiredOpts.add(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(optionGroups.containsKey(key))    {    requiredOpts.add(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	110	None	replace
525	[BUG]  [BUGGY]  if(!opt.isRequired()  &&  shortOpts.containsKey(key)||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!opt.isRequired()  &&  shortOpts.containsKey(key)||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!opt.isRequired()  &&  shortOpts.containsKey(key)||  longOpts.containsKey(key))  {	  if(!opt.isRequired()    &&    shortOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	132	None	replace
526	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(requiredOpts.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
527	[BUG]  [BUGGY]  if(requiredOpts.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(requiredOpts.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
528	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  if(requiredOpts.isRequired())  {  requiredOpts.add(opt.getIndexOf(key));  }	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(requiredOpts.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
529	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  lengthOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(),  shortOpts,  lengthOpts);	  Option    optionGroups    =    opt.getOptionGroups(),    shortOpts);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
530	[BUG]  [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  lengthOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  optionGroups  =  opt.getOptionGroups(this,  lengthOpts);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  optionGroups  =  opt.getOptionGroups(this,  lengthOpts);	  Option    optionGroups    =    opt.getOptionGroups(this);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
531	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  removedOpts.remove(opt.getIndexOf(key));  }	  if(requiredOpts.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
532	[BUG]  [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt())  {  if(requiredOpts.containsKey(key))  {  neededOpts.remove(opt.getIndexOf(key));  }	  if(requiredOpts.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
533	[BUG]  [BUGGY]  if(!longOpts.containsKey(key)&&  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(!longOpts.containsKey(key)&&  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(!longOpts.containsKey(key)&&  longOpts.containsKey(key))  {	  if(!longOpts.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	133	None	replace
534	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containskey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(optionGroups.containskey(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(optionGroups.containskey(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(requiredOpts!=    null)    {    if(optionGroups.containskey(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
535	[BUG]  [BUGGY]  if(optionGroups.containsKey(key)||  opt.optionGroups.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key)||  opt.optionGroups.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key)||  opt.optionGroups.containsKey(key))  {	  if(optionGroups.containsKey(key)||    optionGroups.containsKey(key))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
536	[BUG]  [BUGGY]  if(opt.hasOption(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOption(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOption(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  requiredOpts.remove(opt.indexOf(key));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
537	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  if(optionGroups.containsKey(key))  {  if(opt.isRequired())  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
538	[BUG]  [BUGGY]  if(requiredOpts!=  null)  {  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(requiredOpts!=  null)  {  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(requiredOpts!=  null)  {  if(opt.hasLongOpt())  {  if(optionGroups.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
539	[BUG]  [BUGGY]  if(optionGroups.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(optionGroups.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(optionGroups.containsKey(key))  {  if(requiredOpts.containsKey(key))  {  requiredOpts.remove(opt.getIndexOf(key));  }	  if(opt.hasLongOpt())    {    if(optionGroups.containsKey(key))    {    if(opt.isRequired())    {    requiredOpts.remove(opt.getIndexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
540	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(longOpts.contains(key))  {  longOpts.put(opt.getLongOpt(),  opt);  }  else  {  shortOpts.put(opt.getLongOpt()  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(longOpts.contains(key))  {  longOpts.put(opt.getLongOpt(),  opt);  }  else  {  shortOpts.put(opt.getLongOpt()  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(longOpts.contains(key))  {  longOpts.put(opt.getLongOpt(),  opt);  }  else  {  shortOpts.put(opt.getLongOpt()	  if(opt.hasLongOpt())    {    longOpts.put(opt.getLongOpt(),    opt);    }    else    {    shortOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
541	[BUG]  [BUGGY]  if(opt.isRequired())  {  if(longOpts.contains(key))  {  longOpts.put(opt.getLongOpt(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.isRequired())  {  if(longOpts.contains(key))  {  longOpts.put(opt.getLongOpt(),  opt);  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.isRequired())  {  if(longOpts.contains(key))  {  longOpts.put(opt.getLongOpt(),  opt);  }	  if(opt.hasLongOpt())    {    longOpts.put(opt.getLongOpt(),    opt);    }    else    {    shortOpts.put(opt.getLongOpt(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
542	[BUG]  [BUGGY]  if(opt.hasValue()  ||  opt.hasRequiredOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasValue()  ||  opt.hasRequiredOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasValue()  ||  opt.hasRequiredOpt())  {	  if(opt.hasRequiredOpt()    ||    opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
543	[BUG]  [BUGGY]  if(opt.hasOpt()  ||  opt.hasOpt())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOpt()  ||  opt.hasOpt())  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOpt()  ||  opt.hasOpt())  {	  if(opt.hasRequiredOpt()    ||    opt.hasRequiredOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
544	[BUG]  [BUGGY]  Option  option  =  options.get(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  option  =  options.get(key);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  option  =  options.get(key);	  Option    opt    =    options.get(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
545	[BUG]  [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  this);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  this);  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	Option  opt  =(Option)this.optionGroups.get(opt.getOption(),  this);	  Option    opt    =(Option)this.optionGroups.get(opt.getOption());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
546	[BUG]  [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasOptions())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }  [BUGGY]      if  (opt.isRequired())  {  {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasOptions())  {  if(requiredOpts.contains(key)&&  requiredOpts.contains(key))  {  requiredOpts.remove(opt.indexOf(key));  }	  if(opt.hasOptions())    {    if(requiredOpts.contains(key))    {    requiredOpts.remove(opt.indexOf(key));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	109	None	replace
547	[BUG]  [BUGGY]  if(opt.hasLongOpt()  ||  longOpts.containsKey(key))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      {  String  key  =  opt.getKey();  if  (opt.hasLongOpt())  {  longOpts.put(opt.getLongOpt(),  opt);  }        [BUGGY]  if(opt.hasLongOpt()  ||  longOpts.containsKey(key))  {  [BUGGY]      {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	163	164	1	replace	if(opt.hasLongOpt()  ||  longOpts.containsKey(key))  {	  if(opt.hasLongOpt())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
