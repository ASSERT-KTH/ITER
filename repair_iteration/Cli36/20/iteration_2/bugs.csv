bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  shortOpts.put(opt,  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  shortOpts.put(opt,  requiredOpts);  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	shortOpts.put(opt,  requiredOpts);	      shortOpts.put(opt,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
2	[BUG]  [BUGGY]  longOpts.put(opt,  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  longOpts.put(opt,  opt);  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	longOpts.put(opt,  opt);	      shortOpts.put(opt,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
3	[BUG]  [BUGGY]  shortOpts.put(opt,  preferred);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  shortOpts.put(opt,  preferred);  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	shortOpts.put(opt,  preferred);	      shortOpts.put(opt,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
4	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    shortOpts.add(entry.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
5	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.add(entry.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.add(entry.getKey());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.add(entry.getKey());  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    shortOpts.add(entry.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
6	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  iterator  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  iterator  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  iterator  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    shortOpts.add(entry.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
7	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  optGroups.get(optionGroups.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  optGroups.get(optionGroups.size());  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  optGroups.get(optionGroups.size());	  return(optionGroups    ==    null)?    null    :    optGroups.get(optionGroups.size()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
8	[BUG]  [BUGGY]  return(opt  ==  null)?  null  :  optGroups.get(optionGroups.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(opt  ==  null)?  null  :  optGroups.get(optionGroups.size());  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(opt  ==  null)?  null  :  optGroups.get(optionGroups.size());	  return(optionGroups    ==    null)?    null    :    optGroups.get(optionGroups.size()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
9	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.size());  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.size());	  return(optionGroups    ==    null)?    null    :    optGroups.get(optionGroups.size()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
10	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  options.get(optionGroups.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  options.get(optionGroups.size());  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  options.get(optionGroups.size());	  return(optionGroups    ==    null)?    null    :    optGroups.get(optionGroups.size()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
11	[BUG]  [BUGGY]  if(lengthOpts!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(lengthOpts!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(lengthOpts!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(lengthOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
12	[BUG]  [BUGGY]  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(lengthOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
13	[BUG]  [BUGGY]  Option  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  Option  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	Option  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(lengthOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
14	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(opt.getKey());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(opt.getKey());  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    shortOpts    :    shortOpts.entrySet())    {    shortOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
15	[BUG]  [BUGGY]  For(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  For(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(opt.getKey());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	For(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(opt.getKey());  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    shortOpts    :    shortOpts.entrySet())    {    shortOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
16	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.add(opt.getKey());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.add(opt.getKey());  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    shortOpts    :    shortOpts.entrySet())    {    shortOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
17	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.getOptionGroups())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  option  :  shortOpts.getOptionGroups())  {  requiredOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  option  :  shortOpts.getOptionGroups())  {  requiredOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
18	[BUG]  [BUGGY]  For(Option  option  :  opt.getOptionGroups())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  For(Option  option  :  opt.getOptionGroups())  {  requiredOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	For(Option  option  :  opt.getOptionGroups())  {  requiredOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
19	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.getOptionGroups())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  option  :  shortOpts.getOptionGroups())  {  requiredOpts.add(opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  option  :  shortOpts.getOptionGroups())  {  requiredOpts.add(opt);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
20	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  shortOpts.put(entry.getKey(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  shortOpts.put(entry.getKey(),  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  shortOpts.put(entry.getKey(),  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    shortOpts.put(entry.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
21	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    shortOpts.put(entry.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
22	[BUG]  [BUGGY]  For(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  For(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	For(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    shortOpts.put(entry.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
23	[BUG]  [BUGGY]  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	shortOpts  =  new  ArrayList  <  Option>(longOpts.size());	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(longOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
24	[BUG]  [BUGGY]  Option  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  Option  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	Option  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(longOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
25	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.getOptionGroups())  {  shortOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  option  :  shortOpts.getOptionGroups())  {  shortOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  option  :  shortOpts.getOptionGroups())  {  shortOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptionGroups())    {    shortOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
26	[BUG]  [BUGGY]  for(Option  option  :  opt.getOptionGroups())  {  shortOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  option  :  opt.getOptionGroups())  {  shortOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  option  :  opt.getOptionGroups())  {  shortOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptionGroups())    {    shortOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
27	[BUG]  [BUGGY]  for(Option  option  :  opt.getOptionGroups())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  option  :  opt.getOptionGroups())  {  requiredOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  option  :  opt.getOptionGroups())  {  requiredOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptionGroups())    {    shortOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
28	[BUG]  [BUGGY]  for(Option  option  :  longOpts.getOptionGroups())  {  shortOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  option  :  longOpts.getOptionGroups())  {  shortOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  option  :  longOpts.getOptionGroups())  {  shortOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptionGroups())    {    shortOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
29	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt),  shortOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt),  shortOpts);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt),  shortOpts);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroups.indexOf(opt));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
30	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt)+  1);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt)+  1);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroups.indexOf(opt));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
31	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  options.get(optionGroups.indexOf(opt));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  options.get(optionGroups.indexOf(opt));  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  options.get(optionGroups.indexOf(opt));	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroups.indexOf(opt));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
32	[BUG]  [BUGGY]  return(opt  ==  null)?  null  :  optGroups.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(opt  ==  null)?  null  :  optGroups.get(0);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(opt  ==  null)?  null  :  optGroups.get(0);	  return(optionGroups    ==    null)?    null    :    optGroups.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
33	[BUG]  [BUGGY]  return(opt!=  null)?  null  :  optGroups.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(opt!=  null)?  null  :  optGroups.get(0);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(opt!=  null)?  null  :  optGroups.get(0);	  return(optionGroups    ==    null)?    null    :    optGroups.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
34	[BUG]  [BUGGY]  return(opt  ==  null)?  null  :  optGroups.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(opt  ==  null)?  null  :  optGroups.get(1);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(opt  ==  null)?  null  :  optGroups.get(1);	  return(optionGroups    ==    null)?    null    :    optGroups.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
35	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.put(key,  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.put(key,  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    shortOpts    :    shortOpts.entrySet())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
36	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.put(key,  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.put(key,  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    shortOpts    :    shortOpts.entrySet())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
37	[BUG]  [BUGGY]  For(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  For(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.put(key,  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	For(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.put(key,  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    shortOpts    :    shortOpts.entrySet())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
38	[BUG]  [BUGGY]  return(optionGroups!=  null)?  null  :  optionGroups.get(optionGroups.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups!=  null)?  null  :  optionGroups.get(optionGroups.size());  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups!=  null)?  null  :  optionGroups.get(optionGroups.size());	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroups.size()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
39	[BUG]  [BUGGY]  return  optionGroups  ==  null?  null  :  optionGroups.get(optionGroups.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return  optionGroups  ==  null?  null  :  optionGroups.get(optionGroups.size());  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return  optionGroups  ==  null?  null  :  optionGroups.get(optionGroups.size());	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroups.size()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
40	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.getOptions())  {  shortOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  option  :  shortOpts.getOptions())  {  shortOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  option  :  shortOpts.getOptions())  {  shortOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptions())    {    shortOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
41	[BUG]  [BUGGY]  for(Option  option  :  opt.getOptions())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  option  :  opt.getOptions())  {  requiredOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  option  :  opt.getOptions())  {  requiredOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptions())    {    shortOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
42	[BUG]  [BUGGY]  for(Option  option  :  opt.getOptions())  {  shortOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  option  :  opt.getOptions())  {  shortOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  option  :  opt.getOptions())  {  shortOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptions())    {    shortOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
43	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.getOptionGroups())  {  shortOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  opt  :  shortOpts.getOptionGroups())  {  shortOpts.add(opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  opt  :  shortOpts.getOptionGroups())  {  shortOpts.add(opt);  }	      if(opt!=    null)    {    for(Option    opt    :    opt.getOptionGroups())    {    shortOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
44	[BUG]  [BUGGY]  for(Option  opt  :  longOpts.getOptionGroups())  {  shortOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  opt  :  longOpts.getOptionGroups())  {  shortOpts.add(opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  opt  :  longOpts.getOptionGroups())  {  shortOpts.add(opt);  }	      if(opt!=    null)    {    for(Option    opt    :    opt.getOptionGroups())    {    shortOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
45	[BUG]  [BUGGY]  for(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(opt);  }	      if(opt!=    null)    {    for(Option    opt    :    opt.getOptionGroups())    {    shortOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
46	[BUG]  [BUGGY]  For(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  For(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	For(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(opt);  }	      if(opt!=    null)    {    for(Option    opt    :    opt.getOptionGroups())    {    shortOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
47	[BUG]  [BUGGY]  return(optionGroup  ==  null)?  null  :  optionGroups.get(optionGroup);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroup  ==  null)?  null  :  optionGroups.get(optionGroup);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroup  ==  null)?  null  :  optionGroups.get(optionGroup);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroup);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
48	[BUG]  [BUGGY]  return(optionGroup  ==  null)?  null  :  optionGroups.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroup  ==  null)?  null  :  optionGroups.get(opt);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroup  ==  null)?  null  :  optionGroups.get(opt);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroup);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
49	[BUG]  [BUGGY]  return(optionGroup  ==  null)?  null  :  optionGroups.get(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroup  ==  null)?  null  :  optionGroups.get(option);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroup  ==  null)?  null  :  optionGroups.get(option);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroup);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
50	[BUG]  [BUGGY]  shortOpts.put(opt,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  shortOpts.put(opt,  key);  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	shortOpts.put(opt,  key);	      shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
51	[BUG]  [BUGGY]  shortOpts.put(option,  key);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  shortOpts.put(option,  key);  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	shortOpts.put(option,  key);	      shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
52	[BUG]  [BUGGY]  if(opt!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(requiredOpts.size());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(requiredOpts.size());  }  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(requiredOpts.size());  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
53	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  opt  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  opt  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  opt  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    requiredOpts.put(entry.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
54	[BUG]  [BUGGY]  while(opt!=  null)  {  shortOpts.put(opt.getKey(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  while(opt!=  null)  {  shortOpts.put(opt.getKey(),  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	while(opt!=  null)  {  shortOpts.put(opt.getKey(),  opt);  }	      if(opt!=    null)    {    shortOpts.put(opt.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
55	[BUG]  [BUGGY]  while(opt!=  null)  {  shortOpts.put(opt.getKey(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  while(opt!=  null)  {  shortOpts.put(opt.getKey(),  opt);  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	while(opt!=  null)  {  shortOpts.put(opt.getKey(),  opt);	      if(opt!=    null)    {    shortOpts.put(opt.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
56	[BUG]  [BUGGY]  shortOpts.put(opt.getKey(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  shortOpts.put(opt.getKey(),  opt);  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	shortOpts.put(opt.getKey(),  opt);	      if(opt!=    null)    {    shortOpts.put(opt.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
57	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(1);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  optionGroups.get(1);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
58	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  options.get(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  options.get(0);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  options.get(0);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
59	[BUG]  [BUGGY]  return(optionGroups!=  null)?  null  :  options.get(optionGroups.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups!=  null)?  null  :  options.get(optionGroups.size());  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups!=  null)?  null  :  options.get(optionGroups.size());	  return(optionGroups!=    null)?    null    :    optionGroups.get(optionGroups.size()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
60	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(opt.getOptions().contains(opt))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  opt  :  shortOpts.values())  {  if(opt.getOptions().contains(opt))  {  requiredOpts.add(opt);  }  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  opt  :  shortOpts.values())  {  if(opt.getOptions().contains(opt))  {  requiredOpts.add(opt);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
61	[BUG]  [BUGGY]  if(opt!=  null)  {  shortOpts  =  new  ArrayList  <  Option>();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  shortOpts  =  new  ArrayList  <  Option>();  }  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  shortOpts  =  new  ArrayList  <  Option>();  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
62	[BUG]  [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.getOptions().contains(option))  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  option  :  shortOpts.values())  {  if(opt.getOptions().contains(option))  {  requiredOpts.add(opt);  }  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  option  :  shortOpts.values())  {  if(opt.getOptions().contains(option))  {  requiredOpts.add(opt);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
63	[BUG]  [BUGGY]  return(optionGroup  ==  null)?  null  :  optionGroups.get(optionName);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroup  ==  null)?  null  :  optionGroups.get(optionName);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroup  ==  null)?  null  :  optionGroups.get(optionName);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroup);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
64	[BUG]  [BUGGY]  return(optionGroup  ==  null)?  null  :  optionGroups.get(optionOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroup  ==  null)?  null  :  optionGroups.get(optionOpts);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroup  ==  null)?  null  :  optionGroups.get(optionOpts);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroup);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
65	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptionGroups())    {    shortOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
66	[BUG]  [BUGGY]  if(opt  ==  null)  {  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt  ==  null)  {  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt  ==  null)  {  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  }	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(longOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
67	[BUG]  [BUGGY]  Option  opt  =(Option)longOpts.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  Option  opt  =(Option)longOpts.get(opt);  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	Option  opt  =(Option)longOpts.get(opt);	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(longOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
68	[BUG]  [BUGGY]  if(opt!=  null)  {  shortOpts.put(opt,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  shortOpts.put(opt,  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  shortOpts.put(opt,  opt);  }	      shortOpts.put(opt,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
69	[BUG]  [BUGGY]  if(opt!=  null)  {  shortOpts.put(opt,  opt);  }  else  {  longOpts.put(opt,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  shortOpts.put(opt,  opt);  }  else  {  longOpts.put(opt,  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  shortOpts.put(opt,  opt);  }  else  {  longOpts.put(opt,  opt);  }	      shortOpts.put(opt,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
70	[BUG]  [BUGGY]  if(opt  ==  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt  ==  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt  ==  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(lengthOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
71	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(shortOpts!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(shortOpts!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(lengthOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
72	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getOptions())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getOptions())  {  requiredOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  for(Option  option  :  opt.getOptions())  {  requiredOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptions())    {    shortOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
73	[BUG]  [BUGGY]  return(opt  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(opt  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt));  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(opt  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt));	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroups.indexOf(opt));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
74	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  opt.entrySet())  {  shortOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  opt.entrySet())  {  shortOpts.add(opt.getKey());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  shortOpts  :  opt.entrySet())  {  shortOpts.add(opt.getKey());  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    shortOpts    :    shortOpts.entrySet())    {    shortOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
75	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Map.Entry  <  String,  Option>  key  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  for(Map.Entry  <  String,  Option>  key  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  for(Map.Entry  <  String,  Option>  key  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    requiredOpts.put(entry.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
76	[BUG]  [BUGGY]  if(opt!=  null)  {  requiredOpts.put(opt.getKey(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  requiredOpts.put(opt.getKey(),  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  requiredOpts.put(opt.getKey(),  opt);  }	      if(opt!=    null)    {    shortOpts.put(opt.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
77	[BUG]  [BUGGY]  optionGroups.put(opt.getKey(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  optionGroups.put(opt.getKey(),  opt);  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	optionGroups.put(opt.getKey(),  opt);	      if(opt!=    null)    {    shortOpts.put(opt.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
78	[BUG]  [BUGGY]  if(opt!=  null)  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  shortOpts.put(key,  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  shortOpts.put(key,  opt);  }	      shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
79	[BUG]  [BUGGY]  if(opt!=  null)  {  shortOpts.put(key,  opt);  }  else  {  longOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  shortOpts.put(key,  opt);  }  else  {  longOpts.put(key,  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  shortOpts.put(key,  opt);  }  else  {  longOpts.put(key,  opt);  }	      shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
80	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.size()  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.size()  +  1);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.size()  +  1);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroups.size()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
81	[BUG]  [BUGGY]  while(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  while(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	while(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  shortOpts.add(opt);  }	      if(opt!=    null)    {    for(Option    opt    :    opt.getOptionGroups())    {    shortOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
82	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  requiredOpts.add(opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  requiredOpts.add(opt);  }	      if(opt!=    null)    {    for(Option    opt    :    opt.getOptionGroups())    {    shortOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
83	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  opt  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  opt  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  opt  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    shortOpts.add(entry.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
84	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    shortOpts.add(entry.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
85	[BUG]  [BUGGY]  for(Option  opt  :  shortOpts.getOptionGroups())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  opt  :  shortOpts.getOptionGroups())  {  requiredOpts.add(opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  opt  :  shortOpts.getOptionGroups())  {  requiredOpts.add(opt);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
86	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  requiredOpts.add(option);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  requiredOpts.add(option);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  for(Option  opt  :  opt.getOptionGroups())  {  requiredOpts.add(option);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
87	[BUG]  [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.put(opt,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.put(opt,  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.put(opt,  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    shortOpts    :    shortOpts.entrySet())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
88	[BUG]  [BUGGY]  return(opt!=  null)?  null  :  optGroups.get(optionGroups.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(opt!=  null)?  null  :  optGroups.get(optionGroups.size());  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(opt!=  null)?  null  :  optGroups.get(optionGroups.size());	  return(optionGroups    ==    null)?    null    :    optGroups.get(optionGroups.size()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
89	[BUG]  [BUGGY]  opt!=  null  &&  shortOpts.contains(opt))  {  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  opt!=  null  &&  shortOpts.contains(opt))  {  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	opt!=  null  &&  shortOpts.contains(opt))  {  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    requiredOpts.put(entry.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
90	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Map.Entry  <  String,  Option>  entry  :  longOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  for(Map.Entry  <  String,  Option>  entry  :  longOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  for(Map.Entry  <  String,  Option>  entry  :  longOpts.entrySet())  {  requiredOpts.put(entry.getKey(),  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    requiredOpts.put(entry.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
91	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getOptionGroups())  {  requiredOpts.add(option,  shortOpts);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getOptionGroups())  {  requiredOpts.add(option,  shortOpts);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  for(Option  option  :  opt.getOptionGroups())  {  requiredOpts.add(option,  shortOpts);  }	      if(opt!=    null)    {    for(Option    option    :    opt.getOptionGroups())    {    requiredOpts.add(option);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
92	[BUG]  [BUGGY]  if(opt!=  null)  {  shortOpts.put(key,  opt);  }  else  {  shortOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  shortOpts.put(key,  opt);  }  else  {  shortOpts.put(key,  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  shortOpts.put(key,  opt);  }  else  {  shortOpts.put(key,  opt);  }	      shortOpts.put(key,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
93	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  options.get(optionGroups.size()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  options.get(optionGroups.size()  -  1);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  options.get(optionGroups.size()  -  1);	  return(optionGroups!=    null)?    null    :    optionGroups.get(optionGroups.size()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
94	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(shortOpts!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(shortOpts!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  }	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(longOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
95	[BUG]  [BUGGY]  if(optionGroups!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(optionGroups!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(optionGroups!=  null)  {  shortOpts  =  new  ArrayList  <  Option>(longOpts.size());  }	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(longOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
96	[BUG]  [BUGGY]  if(opt!=  null)  {  shortOpts.put(opt,  opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  shortOpts.put(opt,  opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  shortOpts.put(opt,  opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      shortOpts.put(opt,    opt);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
97	[BUG]  [BUGGY]  opt!=  null  &&  shortOpts.put(opt.getKey(),  opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  opt!=  null  &&  shortOpts.put(opt.getKey(),  opt);  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	opt!=  null  &&  shortOpts.put(opt.getKey(),  opt);	      if(opt!=    null)    {    shortOpts.put(opt.getKey(),    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
98	[BUG]  [BUGGY]  return(shortOpts  ==  null)?  null  :  shortOpts.get(shortOpts.indexOf(opt));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(shortOpts  ==  null)?  null  :  shortOpts.get(shortOpts.indexOf(opt));  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(shortOpts  ==  null)?  null  :  shortOpts.get(shortOpts.indexOf(opt));	  return    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
99	[BUG]  [BUGGY]  return(shortOpts  ==  null)?  null  :  shortOpts.get(shortOpts.size());  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(shortOpts  ==  null)?  null  :  shortOpts.get(shortOpts.size());  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(shortOpts  ==  null)?  null  :  shortOpts.get(shortOpts.size());	  return    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
100	[BUG]  [BUGGY]  return(shortOpts  ==  null)?  null  :  shortOpts.toArray(new  Option[shortOpts.size()  ]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(shortOpts  ==  null)?  null  :  shortOpts.toArray(new  Option[shortOpts.size()  ]);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(shortOpts  ==  null)?  null  :  shortOpts.toArray(new  Option[shortOpts.size()  ]);	  return    null;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
101	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getOptions())  {  shortOpts.put(option.getKey(),  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  for(Option  option  :  opt.getOptions())  {  shortOpts.put(option.getKey(),  opt);  }  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  for(Option  option  :  opt.getOptions())  {  shortOpts.put(option.getKey(),  opt);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
102	[BUG]  [BUGGY]  return(optionGroup!=  null)?  null  :  optionGroups.get(optionGroup);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroup!=  null)?  null  :  optionGroups.get(optionGroup);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroup!=  null)?  null  :  optionGroups.get(optionGroup);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroup);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
103	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(opt);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(opt);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  optionGroups.get(opt);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroup);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
104	[BUG]  [BUGGY]  if(opt!=  null)  {  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.put(key,  opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(opt!=  null)  {  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.put(key,  opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(opt!=  null)  {  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  requiredOpts.put(key,  opt);  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    shortOpts    :    shortOpts.entrySet())    {    shortOpts.put(key,    opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
105	[BUG]  [BUGGY]  for(Option  opt  :  opt.getOptionGroups())  {  requiredOpts.add(opt);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  for(Option  opt  :  opt.getOptionGroups())  {  requiredOpts.add(opt);  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	for(Option  opt  :  opt.getOptionGroups())  {  requiredOpts.add(opt);  }	      if(opt!=    null)    {    for(Option    opt    :    opt.getOptionGroups())    {    shortOpts.add(opt);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
106	[BUG]  [BUGGY]  if(shortOpts  ==  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(shortOpts  ==  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(shortOpts  ==  null)  {  shortOpts  =  new  ArrayList  <  Option>(lengthOpts.size());  }	      if(opt!=    null)    {    shortOpts    =    new    ArrayList    <    Option>(lengthOpts.size());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
107	[BUG]  [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt),  requiredOpts);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt),  requiredOpts);  [BUGGY]    }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	return(optionGroups  ==  null)?  null  :  optionGroups.get(optionGroups.indexOf(opt),  requiredOpts);	  return(optionGroups    ==    null)?    null    :    optionGroups.get(optionGroups.indexOf(opt));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
108	[BUG]  [BUGGY]  opt!=  null  &&  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  opt!=  null  &&  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	opt!=  null  &&  for(Map.Entry  <  String,  Option>  entry  :  shortOpts.entrySet())  {  shortOpts.add(entry.getKey());  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    entry    :    shortOpts.entrySet())    {    shortOpts.add(entry.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
109	[BUG]  [BUGGY]  if(shortOpts!=  null)  {  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(opt.getKey());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    {  if  (requiredOpts.contains(key))  {  requiredOpts.remove(requiredOpts.indexOf(key));  }  requiredOpts.add(key);  }  shortOpts.put(key,  opt);    [BUGGY]  if(shortOpts!=  null)  {  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(opt.getKey());  }  [BUGGY]    return  this;  }  [CLASS]  Options  [METHOD]  addOption  [RETURN_TYPE]  Options  Option  opt  [VARIABLES]  List  requiredOpts  Option  opt  String  key  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli36/src/main/java/org/apache/commons/cli/Options.java	0.7071067811865475	174	174	1	replace	if(shortOpts!=  null)  {  for(Map.Entry  <  String,  Option>  shortOpts  :  shortOpts.entrySet())  {  shortOpts.add(opt.getKey());  }	      if(opt!=    null)    {    for(Map.Entry    <    String,    Option>    shortOpts    :    shortOpts.entrySet())    {    shortOpts.add(opt.getKey());    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
