bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(other  ==  null)ret  =  true;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  null)ret  =  true;  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  null)ret  =  true;	  if(other    ==    null)ret    =    false;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
2	[BUG]  [BUGGY]  if(other!=  null)ret  =  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other!=  null)ret  =  false;  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other!=  null)ret  =  false;	  if(other    ==    null)ret    =    false;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
3	[BUG]  [BUGGY]  if(other  ==  this)ret  =  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  this)ret  =  false;  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  this)ret  =  false;	  if(other    ==    null)ret    =    false;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
4	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs.getReal())  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs.getReal())  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(rhs.getReal())  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary())	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(real)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(rhs.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
5	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())  &&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())  &&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())  &&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(real)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(rhs.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
6	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(real)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(rhs.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
7	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal())  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal())  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal())	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(real)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(rhs.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
8	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  if(this  ==  other)ret  =  true;  if(other.getClass()!=  getClass())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(this  ==  other)ret  =  true;  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(this  ==  other)ret  =  true;  if(other.getClass()!=  getClass())  {  return  false;  }	  if(other    ==    this)ret    =    true;    if(other.getClass()!=    getClass())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
12	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
13	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
14	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
15	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
16	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
17	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
18	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
19	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary));	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
20	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real));	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
21	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator));	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
22	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
23	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
24	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
25	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs.getReal()));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
26	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getDenominator()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getDenominator()));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getDenominator()));	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs.getReal()));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
27	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs.getReal()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs.getReal()));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs.getReal()));	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs.getReal()));    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
28	[BUG]  [BUGGY]  if(this  ==  other)  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(this  ==  other)  {  ret  =  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(this  ==  other)  {  ret  =  false;  }	  if(other    ==    this)    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
29	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)||    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
30	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)||    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
31	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)||    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
32	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)||    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
33	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
34	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
35	[BUG]  [BUGGY]  if(other  ==  null)ret  =  false;  if(other.getClass()  <  getClass())  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  null)ret  =  false;  if(other.getClass()  <  getClass())  {  ret  =  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  null)ret  =  false;  if(other.getClass()  <  getClass())  {  ret  =  false;  }	  if(other    ==    null)ret    =    false;    if(other.getClass()    >=    getClass())    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
36	[BUG]  [BUGGY]  if(other!=  null)ret  =  false;  if(other.getClass()  >=  getClass())  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other!=  null)ret  =  false;  if(other.getClass()  >=  getClass())  {  ret  =  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other!=  null)ret  =  false;  if(other.getClass()  >=  getClass())  {  ret  =  false;  }	  if(other    ==    null)ret    =    false;    if(other.getClass()    >=    getClass())    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
37	[BUG]  [BUGGY]  }  else  if(other  ==  this  ||  other.getClass()  ==  getClass())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  ==  this  ||  other.getClass()  ==  getClass())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  this  ||  other.getClass()  ==  getClass())  {	  }    else    if(other!=    null    ||    other.getClass()    ==    getClass())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
38	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
39	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
40	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  ret  =  super.equalsIgnoreCase(other.getClass());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equalsIgnoreCase(other.getClass());  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equalsIgnoreCase(other.getClass());	  ret    =    super.equals(other.getClass());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
44	[BUG]  [BUGGY]  ret  =  super.equals(other.getClass())&&  this.isNaN();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equals(other.getClass())&&  this.isNaN();  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equals(other.getClass())&&  this.isNaN();	  ret    =    super.equals(other.getClass());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
45	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d));	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
46	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real));	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
47	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d));	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
48	[BUG]  [BUGGY]  }  else  if(other!=  null  ||  other.isNaN())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other!=  null  ||  other.isNaN())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other!=  null  ||  other.isNaN())  {	  }    else    if(other    ==    null    ||    other.isNaN())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
49	[BUG]  [BUGGY]  }  else  if(other  ==  this  ||  other.isNaN())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  ==  this  ||  other.isNaN())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  this  ||  other.isNaN())  {	  }    else    if(other    ==    null    ||    other.isNaN())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  }  else  if(other  ==  null  ||  other.isNaN()  ||  this.isNaN())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  ==  null  ||  other.isNaN()  ||  this.isNaN())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  ||  other.isNaN()  ||  this.isNaN())  {	  }    else    if(other    ==    null    ||    other.isNaN())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
52	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
53	[BUG]  [BUGGY]  ret  =  super.equalsIgnoreCase(other.iNF);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equalsIgnoreCase(other.iNF);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equalsIgnoreCase(other.iNF);	  ret    =    super.equalsIgnoreCase(other);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
54	[BUG]  [BUGGY]  ret  =  super.equalsIgnoreCase(other.denominator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equalsIgnoreCase(other.denominator);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equalsIgnoreCase(other.denominator);	  ret    =    super.equalsIgnoreCase(other);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
55	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
56	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
57	[BUG]  [BUGGY]  if(other!=  null  ||!(other  instanceof  Complex))  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other!=  null  ||!(other  instanceof  Complex))  {  ret  =  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other!=  null  ||!(other  instanceof  Complex))  {  ret  =  false;  }	  if(other    ==    null    ||!(other    instanceof    Complex))    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
58	[BUG]  [BUGGY]  if(other  ==  this  ||!(other  instanceof  Complex))  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  this  ||!(other  instanceof  Complex))  {  ret  =  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  this  ||!(other  instanceof  Complex))  {  ret  =  false;  }	  if(other    ==    null    ||!(other    instanceof    Complex))    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
59	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex  &&  other  instanceof  Double)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex  &&  other  instanceof  Double)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex  &&  other  instanceof  Double)  {	  }    else    if(other    instanceof    Complex    ||    other    instanceof    Double)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
60	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex  ||  other  instanceof  Double  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex  ||  other  instanceof  Double  ==  false)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex  ||  other  instanceof  Double  ==  false)  {	  }    else    if(other    instanceof    Complex    ||    other    instanceof    Double)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
61	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex  ||  other  instanceof  Double  <?>)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex  ||  other  instanceof  Double  <?>)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex  ||  other  instanceof  Double  <?>)  {	  }    else    if(other    instanceof    Complex    ||    other    instanceof    Double)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
62	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
64	[BUG]  [BUGGY]  ret  =  true;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  true;  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  true;	  if(other    ==    null)    {    ret    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
65	[BUG]  [BUGGY]  if(other  ==  this)  {  ret  =  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  this)  {  ret  =  true;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  this)  {  ret  =  true;  }	  if(other    ==    null)    {    ret    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
66	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(c)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
67	[BUG]  [BUGGY]  if(other!=  null)ret  =  true;  if(other.getClass()!=  getClass())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other!=  null)ret  =  true;  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other!=  null)ret  =  true;  if(other.getClass()!=  getClass())  {  return  false;  }	  if(other    ==    null)ret    =    true;    if(other.getClass()!=    getClass())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
68	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
69	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
70	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
71	[BUG]  [BUGGY]  }  else  if(other.getClass()  ==  getClass())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other.getClass()  ==  getClass())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other.getClass()  ==  getClass())  {	  }    else    if(other.getClass()!=    getClass())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
72	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
73	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
74	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
75	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex  ==  false  ||  other  instanceof  Double.isNaN()!=  false)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex  ==  false  ||  other  instanceof  Double.isNaN()!=  false)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex  ==  false  ||  other  instanceof  Double.isNaN()!=  false)  {	  }    else    if(other    instanceof    Complex!=    false)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
76	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex  ==  false  ||  other  instanceof  Double.isNaN())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex  ==  false  ||  other  instanceof  Double.isNaN())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex  ==  false  ||  other  instanceof  Double.isNaN())  {	  }    else    if(other    instanceof    Complex!=    false)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
77	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex  ==  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex  ==  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex  ==	  }    else    if(other    instanceof    Complex    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
78	[BUG]  [BUGGY]  }  else  if(!(other  instanceof  Complex))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(!(other  instanceof  Complex))  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(!(other  instanceof  Complex))  {	  }    else    if(other    instanceof    Complex    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
79	[BUG]  [BUGGY]  if(other!=  null)ret  =  true;  if(other.getClass()!=  getClass())  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other!=  null)ret  =  true;  if(other.getClass()!=  getClass())  {  ret  =  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other!=  null)ret  =  true;  if(other.getClass()!=  getClass())  {  ret  =  false;  }	  if(other    ==    null)ret    =    true;    if(other.getClass()!=    getClass())    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
80	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  if(this  ==  other)ret  =  true;  if(other.getClass()!=  getClass())  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(this  ==  other)ret  =  true;  if(other.getClass()!=  getClass())  {  ret  =  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(this  ==  other)ret  =  true;  if(other.getClass()!=  getClass())  {  ret  =  false;  }	  if(this    ==    other)ret    =    false;    if(other.getClass()!=    getClass())    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
82	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
83	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
84	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
85	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(null)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(null)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(null)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
86	[BUG]  [BUGGY]  if(other  ==  null)ret  =  false;  if(other.getClass()!=  getClass())  {  ret  =  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  null)ret  =  false;  if(other.getClass()!=  getClass())  {  ret  =  true;  }  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  null)ret  =  false;  if(other.getClass()!=  getClass())  {  ret  =  true;  }	  ret    =    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
87	[BUG]  [BUGGY]  if(other  ==  null)ret  =  false;  else  if(other.getClass()!=  getClass())  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  null)ret  =  false;  else  if(other.getClass()!=  getClass())  {  ret  =  false;  }  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  null)ret  =  false;  else  if(other.getClass()!=  getClass())  {  ret  =  false;  }	  ret    =    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
88	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
89	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
90	[BUG]  [BUGGY]  if(other  ==  null)ret  =  false;  if(other.getClass()  <  getClass())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  null)ret  =  false;  if(other.getClass()  <  getClass())  {  return  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  null)ret  =  false;  if(other.getClass()  <  getClass())  {  return  false;  }	  if(other    ==    null)ret    =    false;    if(other.getClass()    >=    getClass())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
91	[BUG]  [BUGGY]  if(other!=  null)ret  =  false;  if(other.getClass()  >=  getClass())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other!=  null)ret  =  false;  if(other.getClass()  >=  getClass())  {  return  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other!=  null)ret  =  false;  if(other.getClass()  >=  getClass())  {  return  false;  }	  if(other    ==    null)ret    =    false;    if(other.getClass()    >=    getClass())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
92	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
93	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
94	[BUG]  [BUGGY]  }  else  if(other  ==  null  &&  other.getClass()  ==  getClass())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  ==  null  &&  other.getClass()  ==  getClass())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  &&  other.getClass()  ==  getClass())  {	  }    else    if(other!=    null    &&    other.getClass()    ==    getClass())    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
95	[BUG]  [BUGGY]  }  else  if(this  ==  other  ||  other.getClass()!=  getClass())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(this  ==  other  ||  other.getClass()!=  getClass())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(this  ==  other  ||  other.getClass()!=  getClass())  {	  }    else    if(other    ==    this    ||    other.getClass()!=    getClass())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
96	[BUG]  [BUGGY]  }  else  if(other!=  this  ||  other.getClass()!=  getClass())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other!=  this  ||  other.getClass()!=  getClass())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other!=  this  ||  other.getClass()!=  getClass())  {	  }    else    if(other    ==    this    ||    other.getClass()!=    getClass())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
97	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
98	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
99	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
100	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
101	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
102	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
103	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex  ==  false  ||  other  instanceof  Double)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex  ==  false  ||  other  instanceof  Double)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex  ==  false  ||  other  instanceof  Double)  {	  }    else    if(other    instanceof    Complex    ==    false)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
104	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
105	[BUG]  [BUGGY]  if(this  ==  other)ret  =  true;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(this  ==  other)ret  =  true;  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(this  ==  other)ret  =  true;	  if(other    ==    this)ret    =    true;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
106	[BUG]  [BUGGY]  if(ret  ==  this)ret  =  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(ret  ==  this)ret  =  true;  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(ret  ==  this)ret  =  true;	  if(other    ==    this)ret    =    true;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
107	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
108	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
109	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
110	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
111	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
112	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
113	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
114	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
115	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
116	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
117	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)||    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
118	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)||    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
119	[BUG]  [BUGGY]  }  else  if(other  ==  null  &&  other.getClass()!=  getClass())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  ==  null  &&  other.getClass()!=  getClass())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  &&  other.getClass()!=  getClass())  {	  }    else    if(other!=    null    &&    other.getClass()!=    getClass())    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
120	[BUG]  [BUGGY]  if(other  ==  this)ret  =  true;  if(other.getClass()!=  getClass())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  this)ret  =  true;  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  this)ret  =  true;  if(other.getClass()!=  getClass())  {  return  true;  }	  if(other    ==    this)ret    =    false;    if(other.getClass()!=    getClass())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
121	[BUG]  [BUGGY]  if(other  ==  null)ret  =  false;  if(other.getClass()!=  getClass())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  null)ret  =  false;  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  null)ret  =  false;  if(other.getClass()!=  getClass())  {  return  true;  }	  if(other    ==    this)ret    =    false;    if(other.getClass()!=    getClass())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
122	[BUG]  [BUGGY]  if(this  ==  other)ret  =  false;  if(other.getClass()!=  getClass())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(this  ==  other)ret  =  false;  if(other.getClass()!=  getClass())  {  return  true;  }  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(this  ==  other)ret  =  false;  if(other.getClass()!=  getClass())  {  return  true;  }	  if(other    ==    this)ret    =    false;    if(other.getClass()!=    getClass())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
123	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
124	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
125	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
126	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex  <?>  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex  <?>  ==  false)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex  <?>  ==  false)  {	  }    else    if(other    instanceof    Complex    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
127	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex  >=  false)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex  >=  false)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex  >=  false)  {	  }    else    if(other    instanceof    Complex    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
128	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
129	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
130	[BUG]  [BUGGY]  ret  =  this.equals(other)&&  super.isNaN();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  this.equals(other)&&  super.isNaN();  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  this.equals(other)&&  super.isNaN();	  ret    =    super.equals(other)&&    this.isNaN();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
131	[BUG]  [BUGGY]  ret  =  super.equals(other)||  this.isNaN();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equals(other)||  this.isNaN();  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equals(other)||  this.isNaN();	  ret    =    super.equals(other)&&    this.isNaN();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
132	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
133	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
134	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
135	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
136	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
137	[BUG]  [BUGGY]  ret  =  other.isNaN();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  other.isNaN();  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  other.isNaN();	  ret    =    this.isNaN();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
138	[BUG]  [BUGGY]  ret  =  this.isNaN()  ||  this.isNaN();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  this.isNaN()  ||  this.isNaN();  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  this.isNaN()  ||  this.isNaN();	  ret    =    this.isNaN();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
139	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(real)&&    (Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
140	[BUG]  [BUGGY]  if(this  ==  other)ret  =  super.equals(other);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(this  ==  other)ret  =  super.equals(other);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(this  ==  other)ret  =  super.equals(other);	  if(other    ==    this)ret    =    super.equals(other);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
141	[BUG]  [BUGGY]  if(other  ==  null)ret  =  super.equals(other);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  null)ret  =  super.equals(other);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  null)ret  =  super.equals(other);	  if(other    ==    this)ret    =    super.equals(other);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
142	[BUG]  [BUGGY]  if(ret  ==  this)ret  =  super.equals(other);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(ret  ==  this)ret  =  super.equals(other);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(ret  ==  this)ret  =  super.equals(other);	  if(other    ==    this)ret    =    super.equals(other);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
143	[BUG]  [BUGGY]  }  else  if(this  ==  other  ||  other.isComplex())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(this  ==  other  ||  other.isComplex())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(this  ==  other  ||  other.isComplex())  {	  }    else    if(other    ==    this    ||    other.isComplex())    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
144	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
145	[BUG]  [BUGGY]  }  else  if(this  ==  other)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(this  ==  other)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(this  ==  other)  {	  }    else    if(other    ==    this)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
146	[BUG]  [BUGGY]  }  else  if(other!=  null  &&  other.isComplex())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other!=  null  &&  other.isComplex())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other!=  null  &&  other.isComplex())  {	  }    else    if(other!=    null    ||    other.isComplex())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
147	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(c)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
148	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(c)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
149	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(c)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
150	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(c)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(c)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(c)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(c)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
151	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
152	[BUG]  [BUGGY]  ret  =  super.equals(other.real);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equals(other.real);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equals(other.real);	  ret    =    super.equals(other.denominator);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
153	[BUG]  [BUGGY]  ret  =  super.equals(other.getDenominator());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equals(other.getDenominator());  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equals(other.getDenominator());	  ret    =    super.equals(other.denominator);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
154	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
155	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
156	[BUG]  [BUGGY]  }  else  if(!(other  instanceof  Complex  ||  other  instanceof  Double))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(!(other  instanceof  Complex  ||  other  instanceof  Double))  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(!(other  instanceof  Complex  ||  other  instanceof  Double))  {	  }    else    if(other    instanceof    Complex    ||    other    instanceof    Double)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
157	[BUG]  [BUGGY]  }  else  if(other  instanceof  Compiler  ||  other  instanceof  Double)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Compiler  ||  other  instanceof  Double)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Compiler  ||  other  instanceof  Double)  {	  }    else    if(other    instanceof    Complex    ||    other    instanceof    Double)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
158	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
159	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
160	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
161	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
162	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
163	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
164	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
165	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
166	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
167	[BUG]  [BUGGY]  ret  =  super.equalsINF(other.getClass());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equalsINF(other.getClass());  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equalsINF(other.getClass());	  ret    =    super.equals(other.getClass());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
168	[BUG]  [BUGGY]  ret  =  super.equals(other.getRawClass());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equals(other.getRawClass());  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equals(other.getRawClass());	  ret    =    super.equals(other.getClass());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
169	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
170	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
171	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary)||  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
172	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
173	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())||  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())||  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())||  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
174	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(c)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
175	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
176	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
177	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
178	[BUG]  [BUGGY]  ret  =  super.equals(other)&&  super.equals(other);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equals(other)&&  super.equals(other);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equals(other)&&  super.equals(other);	  ret    =    super.equalsINF(other);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
179	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
180	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())&&  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())&&  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())&&  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
181	[BUG]  [BUGGY]  ret  =  super.equals(other)&&  real.isNaN();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equals(other)&&  real.isNaN();  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equals(other)&&  real.isNaN();	  ret    =    super.equals(other)&&    this.isNaN();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
182	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
183	[BUG]  [BUGGY]  if(other!=  null)ret  =  true;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other!=  null)ret  =  true;  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other!=  null)ret  =  true;	  if(other    ==    null)ret    =    false;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
184	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
185	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
186	[BUG]  [BUGGY]  if(other!=  null)ret  =  false;  if(other.getClass()  ==  getClass())  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other!=  null)ret  =  false;  if(other.getClass()  ==  getClass())  {  ret  =  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other!=  null)ret  =  false;  if(other.getClass()  ==  getClass())  {  ret  =  false;  }	  if(other!=    null)ret    =    false;    if(other.getClass()!=    getClass())    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
187	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(c)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
188	[BUG]  [BUGGY]  }  else  if(other  instanceof  Compiler  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Compiler  ==  false)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Compiler  ==  false)  {	  }    else    if(other    instanceof    Complex    ==    false)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
189	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(denominator)&&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(denominator)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
190	[BUG]  [BUGGY]  if(other!=  this)ret  =  super.equals(other);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other!=  this)ret  =  super.equals(other);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other!=  this)ret  =  super.equals(other);	  if(other    ==    this)ret    =    super.equals(other);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
191	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
192	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
193	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
194	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
195	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
196	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
197	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
198	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex!=  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex!=  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex!=	  }    else    if(other    instanceof    Complex    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
199	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
200	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
201	[BUG]  [BUGGY]  ret  =  super.equals(other.number);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equals(other.number);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equals(other.number);	  ret    =    super.equals(other.denominator);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
202	[BUG]  [BUGGY]  if(other  instanceof  Complex)  {  ret  =  false;  }  else  {  try  {  Complex  rhs  =(Complex)other;  if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  instanceof  Complex)  {  ret  =  false;  }  else  {  try  {  Complex  rhs  =(Complex)other;  if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  true;  }  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  instanceof  Complex)  {  ret  =  false;  }  else  {  try  {  Complex  rhs  =(Complex)other;  if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  true;  }	  ret    =    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
203	[BUG]  [BUGGY]  if(other  instanceof  Complex)  {  ret  =  false;  }  else  {  try  {  Complex  rhs  =(Complex)other;  if(rhs.isNaN())  {  ret  =  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  instanceof  Complex)  {  ret  =  false;  }  else  {  try  {  Complex  rhs  =(Complex)other;  if(rhs.isNaN())  {  ret  =  true;  }  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  instanceof  Complex)  {  ret  =  false;  }  else  {  try  {  Complex  rhs  =(Complex)other;  if(rhs.isNaN())  {  ret  =  true;  }	  ret    =    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
204	[BUG]  [BUGGY]  if(other  ==  null)  {  ret  =  false;  }  else  {  try  {  Complex  rhs  =(Complex)other;  if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  null)  {  ret  =  false;  }  else  {  try  {  Complex  rhs  =(Complex)other;  if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  true;  }  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  null)  {  ret  =  false;  }  else  {  try  {  Complex  rhs  =(Complex)other;  if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  true;  }	  ret    =    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
205	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d));	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
206	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(c));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(c));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(c));	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
207	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
208	[BUG]  [BUGGY]  ret  =  this.isNaN()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  this.isNaN()  +  1;  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  this.isNaN()  +  1;	  ret    =    this.isNaN();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
209	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
210	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
211	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal()));  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal()));	  ret    =    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(real));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
212	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(denominator)||  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
213	[BUG]  [BUGGY]  }  else  if(other  ==  null  ||  other.isInfinity())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  ==  null  ||  other.isInfinity())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  ||  other.isInfinity())  {	  }    else    if(other    ==    null    ||    other.isNaN())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
214	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(real)&&    (Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
215	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(real)&&    (Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
216	[BUG]  [BUGGY]  }  else  if(other  >=  null  ||  other.getClass()  ==  getClass())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  >=  null  ||  other.getClass()  ==  getClass())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  >=  null  ||  other.getClass()  ==  getClass())  {	  }    else    if(other!=    null    ||    other.getClass()    ==    getClass())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
217	[BUG]  [BUGGY]  if(this  ==  other)ret  =  false;  if(other!=  null)ret  =  false;  if(other.getClass()!=  getClass())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(this  ==  other)ret  =  false;  if(other!=  null)ret  =  false;  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(this  ==  other)ret  =  false;  if(other!=  null)ret  =  false;  if(other.getClass()!=  getClass())  {  return  false;  }	  if(other!=    null)ret    =    false;    if(other.getClass()!=    getClass())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
218	[BUG]  [BUGGY]  if(other!=  null)ret  =  false;  if(other.getClass()  ==  getClass())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other!=  null)ret  =  false;  if(other.getClass()  ==  getClass())  {  return  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other!=  null)ret  =  false;  if(other.getClass()  ==  getClass())  {  return  false;  }	  if(other!=    null)ret    =    false;    if(other.getClass()!=    getClass())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
219	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)||  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
220	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(rhs)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
221	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(real)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(rhs.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
222	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal())  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal())  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal())	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(real)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(rhs.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
223	[BUG]  [BUGGY]  }  else  if(other  instanceof  Compiler!=  false)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Compiler!=  false)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Compiler!=  false)  {	  }    else    if(other    instanceof    Complex!=    false)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
224	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)||  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)||    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
225	[BUG]  [BUGGY]  if(other  ==  this)ret  =  false;  else  if(other.getClass()!=  getClass())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  this)ret  =  false;  else  if(other.getClass()!=  getClass())  {  return  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  this)ret  =  false;  else  if(other.getClass()!=  getClass())  {  return  false;  }	  if(other    ==    this)ret    =    true;    if(other.getClass()!=    getClass())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
226	[BUG]  [BUGGY]  try  ==  if(other  ==  null)  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  try  ==  if(other  ==  null)  {  ret  =  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	try  ==  if(other  ==  null)  {  ret  =  false;  }	  if(other!=    null)    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
227	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
228	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(imaginary)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
229	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(c)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(c)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(c)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(c)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
230	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  &&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  &&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  &&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
231	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  &&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  &&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  &&  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
232	[BUG]  [BUGGY]  if(other  ==  null  ||!(other  instanceof  Complex))  {  ret  =  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  null  ||!(other  instanceof  Complex))  {  ret  =  true;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  null  ||!(other  instanceof  Complex))  {  ret  =  true;  }	  if(other    ==    null    ||!(other    instanceof    Complex))    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
233	[BUG]  [BUGGY]  if(ret  ==  this)ret  =  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(ret  ==  this)ret  =  false;  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(ret  ==  this)ret  =  false;	  if(other    ==    this)ret    =    true;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
234	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(real)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
235	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  &&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  &&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  &&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(denominator)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
236	[BUG]  [BUGGY]  ret  =  super.equalsIgnoreCase(denominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equalsIgnoreCase(denominator);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equalsIgnoreCase(denominator);	  ret    =    super.equalsIgnoreCase(other);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
237	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex  ==  null)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex  ==  null)  {	  }    else    if(other    instanceof    Complex    ==    false)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
238	[BUG]  [BUGGY]  if(other  ==  this)ret  =  false;  if(other.getClass()!=  getClass())  {  ret  =  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  this)ret  =  false;  if(other.getClass()!=  getClass())  {  ret  =  true;  }  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  this)ret  =  false;  if(other.getClass()!=  getClass())  {  ret  =  true;  }	  ret    =    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
239	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
240	[BUG]  [BUGGY]  if(ret  ==  null)ret  =  super.equals(other);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(ret  ==  null)ret  =  super.equals(other);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(ret  ==  null)ret  =  super.equals(other);	  if(other    ==    this)ret    =    super.equals(other);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
241	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(c)  ==  Double.doubleToRawLongBits(real)&&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(c)    ==    Double.doubleToRawLongBits(c)&&    (Double.doubleToRawLongBits(real)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
242	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(imaginary)||    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
243	[BUG]  [BUGGY]  ret  =  this.isNaN()  ||  other.isNaN();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  this.isNaN()  ||  other.isNaN();  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  this.isNaN()  ||  other.isNaN();	  ret    =    this.isNaN();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
244	[BUG]  [BUGGY]  if(other  ==  null)ret  =  super.equals(other.getClass());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  null)ret  =  super.equals(other.getClass());  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  null)ret  =  super.equals(other.getClass());	  ret    =    super.equals(other.getClass());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
245	[BUG]  [BUGGY]  ret  =  super.equals(other)&&  imaginary.isNaN();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  super.equals(other)&&  imaginary.isNaN();  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  super.equals(other)&&  imaginary.isNaN();	  ret    =    super.equals(other)&&    this.isNaN();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
246	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
247	[BUG]  [BUGGY]  }  else  if(other.isComplex())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other.isComplex())  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other.isComplex())  {	  }    else    if(other!=    null    ||    other.isComplex())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
248	[BUG]  [BUGGY]  ret  =  this.isNaN()?  super.equals(other):  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  this.isNaN()?  super.equals(other):  null;  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  this.isNaN()?  super.equals(other):  null;	  ret    =    super.equalsINF(other);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
249	[BUG]  [BUGGY]  ret  =  this.isNaN()?  super.equals(other);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  this.isNaN()?  super.equals(other);  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  this.isNaN()?  super.equals(other);	  ret    =    super.equalsINF(other);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
250	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(rhs)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	  ret    =    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(rhs)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawL    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
251	[BUG]  [BUGGY]  }  else  if(other  instanceof  Complex  <?>!=  false)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(other  instanceof  Complex  <?>!=  false)  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  instanceof  Complex  <?>!=  false)  {	  }    else    if(other    instanceof    Complex    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
252	[BUG]  [BUGGY]  }  else  if(!(other  instanceof  Complex  <?>))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  }  else  if(!(other  instanceof  Complex  <?>))  {  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(!(other  instanceof  Complex  <?>))  {	  }    else    if(other    instanceof    Complex    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
253	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(d)&&  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d)&&    Double.doubleToRawLongBits(imaginary)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
254	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)  {  Double.doubleToRawLongBits(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)  {  Double.doubleToRawLongBits(  [BUGGY]      ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(denominator)  ==  Double.doubleToRawLongBits(real)  {  Double.doubleToRawLongBits(	  ret    =    Double.doubleToRawLongBits(denominator)    ==    Double.doubleToRawLongBits(denominator)&&    Double.doubleToRawLongBits(real)    ==    Double.doubleToRawLongBits(    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
255	[BUG]  [BUGGY]  if(other  ==  this)ret  =  false;  else  if(other.getClass()!=  getClass())  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  this)ret  =  false;  else  if(other.getClass()!=  getClass())  {  ret  =  false;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  this)ret  =  false;  else  if(other.getClass()!=  getClass())  {  ret  =  false;  }	  if(other    ==    this)ret    =    true;    if(other.getClass()!=    getClass())    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
256	[BUG]  [BUGGY]  if(other  ==  this)ret  =  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  if(other  ==  this)ret  =  true;  }  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	if(other  ==  this)ret  =  true;  }	  if(other    ==    this)    {    ret    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
257	[BUG]  [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;      [BUGGY]  ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&  [BUGGY]      }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	ret  =  Double.doubleToRawLongBits(d)  ==  Double.doubleToRawLongBits(d)&&	  ret    =    Double.doubleToRawLongBits(d)    ==    Double.doubleToRawLongBits(d));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
