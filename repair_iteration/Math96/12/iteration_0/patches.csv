bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]  if  (isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if  (isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {	if  (isNaN()  ||  rhs.isNaN())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2	[BUG]  [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||  rhs.isNaN())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||  rhs.isNaN())  {  [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if(isNaN()  ||  rhs.isNaN()  ||  rhs.isNaN())  {	if  (isNaN()  ||  rhs.isNaN())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    [BUGGY]  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	  	if  (isNaN()  ||  rhs.isNaN())  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
4	[BUG]  [BUGGY]    Real  rhs  =  getDenominator();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    Real  rhs  =  getDenominator();  [BUGGY]  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	    Real  rhs  =  getDenominator();		non-compiled	[CE]  illegal  start  of  expression	24	None	add
5	[BUG]  [BUGGY]    Real  rhs  =  Complex.getInstance(rhs);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    Real  rhs  =  Complex.getInstance(rhs);  [BUGGY]  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	    Real  rhs  =  Complex.getInstance(rhs);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
6	[BUG]  [BUGGY]    Real  rhs  =  getDenominator(rhs);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    Real  rhs  =  getDenominator(rhs);  [BUGGY]  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	    Real  rhs  =  getDenominator(rhs);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
7	[BUG]  [BUGGY]    Real  rhs  =  Complex.create(rhs);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    Real  rhs  =  Complex.create(rhs);  [BUGGY]  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	    Real  rhs  =  Complex.create(rhs);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
8	[BUG]  [BUGGY]    Real  rhs  =  rhs.get(rhs.getType());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    Real  rhs  =  rhs.get(rhs.getType());  [BUGGY]  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	    Real  rhs  =  rhs.get(rhs.getType());		non-compiled	[CE]  illegal  start  of  expression	24	None	add
9	[BUG]  [BUGGY]    Real  rhs  =  rhs.getINF();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    Real  rhs  =  rhs.getINF();  [BUGGY]  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	    Real  rhs  =  rhs.getINF();		non-compiled	[CE]  illegal  start  of  expression	24	None	add
10	[BUG]  [BUGGY]    Complex  rhs  =  getDenominator();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    Complex  rhs  =  getDenominator();  [BUGGY]  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	    Complex  rhs  =  getDenominator();		non-compiled	[CE]  illegal  start  of  expression	24	None	add
11	[BUG]  [BUGGY]    Complex  rhs  =  getDenominator(rhs);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    Complex  rhs  =  getDenominator(rhs);  [BUGGY]  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	    Complex  rhs  =  getDenominator(rhs);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
12	[BUG]  [BUGGY]    Real  rhs  =  rhs.getRaw();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    Real  rhs  =  rhs.getRaw();  [BUGGY]  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	    Real  rhs  =  rhs.getRaw();		non-compiled	[CE]  illegal  start  of  expression	24	None	add
13	[BUG]  [BUGGY]    Real  rhs  =  rhs.getRawClass();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    Real  rhs  =  rhs.getRawClass();  [BUGGY]  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	    Real  rhs  =  rhs.getRawClass();		non-compiled	[CE]  illegal  start  of  expression	24	None	add
14	[BUG]  [BUGGY]    Real  rhs  =  rhs.getRawParent();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  [BUGGY]    Real  rhs  =  rhs.getRawParent();  [BUGGY]  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	    Real  rhs  =  rhs.getRawParent();		non-compiled	[CE]  illegal  start  of  expression	24	None	add
