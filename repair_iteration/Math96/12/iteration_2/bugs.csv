bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Real  rhs  =  Complex.create(rhs.getDenominator());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.create(rhs.getDenominator());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.create(rhs.getDenominator());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  Real  rhs  =  Complex.create(rhs.getMask());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.create(rhs.getMask());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.create(rhs.getMask());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  Real  rhs  =  getDenominator(rhs,  c);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  getDenominator(rhs,  c);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  getDenominator(rhs,  c);	      Real    rhs    =    getDenominator(rhs);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  Real  rhs  =  getDenominator(rhs.real);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  getDenominator(rhs.real);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  getDenominator(rhs.real);	      Real    rhs    =    getDenominator(rhs);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  Real  rhs  =  getDenominator(rhs.getMask());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  getDenominator(rhs.getMask());  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  getDenominator(rhs.getMask());	      Real    rhs    =    getDenominator(rhs);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  Complex  rhs  =  getDenominator().multiply(rhs);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  getDenominator().multiply(rhs);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  getDenominator().multiply(rhs);	      Complex    rhs    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  Complex  rhs  =  getMask();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  getMask();  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  getMask();	      Complex    rhs    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  Complex  rhs  =  getDenominator(rhs.denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  getDenominator(rhs.denominator);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  getDenominator(rhs.denominator);	      Complex    rhs    =    getDenominator(rhs);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  Complex  rhs  =  getDenominator(rhs.getMask());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  getDenominator(rhs.getMask());  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  getDenominator(rhs.getMask());	      Complex    rhs    =    getDenominator(rhs);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  Complex  rhs  =  getDenominator(rhs,  c);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  getDenominator(rhs,  c);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  getDenominator(rhs,  c);	      Complex    rhs    =    getDenominator(rhs);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  Real  rhs  =  rhs.getINFParent();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.getINFParent();  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.getINFParent();	      Real    rhs    =    rhs.getRawParent();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
12	[BUG]  [BUGGY]  Real  rhs  =  rhs.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.getLastChild();  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.getLastChild();	      Real    rhs    =    rhs.getRawParent();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
13	[BUG]  [BUGGY]  Real  rhs  =  rhs.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.getParent();  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.getParent();	      Real    rhs    =    rhs.getRawParent();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
14	[BUG]  [BUGGY]  Real  rhs  =  rhs.getRootClass();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.getRootClass();  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.getRootClass();	      Real    rhs    =    rhs.getRawClass();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
15	[BUG]  [BUGGY]  Real  rhs  =  rhs.getNaN();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.getNaN();  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.getNaN();	      Real    rhs    =    rhs.getRawClass();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
16	[BUG]  [BUGGY]  Real  rhs  =  rhs.get(rhs.getMask());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.get(rhs.getMask());  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.get(rhs.getMask());	      Real    rhs    =    rhs.get(rhs.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  Real  rhs  =  rhs.get(rhs.getType()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.get(rhs.getType()  -  1);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.get(rhs.getType()  -  1);	      Real    rhs    =    rhs.get(rhs.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  Real  rhs  =  rhs.get(real.getType());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.get(real.getType());  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.get(real.getType());	      Real    rhs    =    rhs.get(rhs.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
19	[BUG]  [BUGGY]  Real  rhs  =  rhs.get(rhs.getMaxType());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.get(rhs.getMaxType());  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.get(rhs.getMaxType());	      Real    rhs    =    rhs.get(rhs.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  Real  rhs  =  Complex.create(rhs,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.create(rhs,  denominator);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.create(rhs,  denominator);	      Real    rhs    =    Complex.create(rhs);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
21	[BUG]  [BUGGY]  Real  rhs  =  Complex.create(real);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.create(real);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.create(real);	      Real    rhs    =    Complex.create(rhs);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  Real  rhs  =  Complex.create(rhs,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.create(rhs,  false);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.create(rhs,  false);	      Real    rhs    =    Complex.create(rhs);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
23	[BUG]  [BUGGY]  Real  rhs  =  rhs.getN();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.getN();  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.getN();	      Real    rhs    =    rhs.getINF();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
24	[BUG]  [BUGGY]  Real  rhs  =  rhs.getDestination();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.getDestination();  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.getDestination();	      Real    rhs    =    rhs.getINF();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]  Real  rhs  =  getDenominator().multiply(rhs);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  getDenominator().multiply(rhs);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  getDenominator().multiply(rhs);	      Real    rhs    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  Real  rhs  =  getDenominator(rhs.getModule());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  getDenominator(rhs.getModule());  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  getDenominator(rhs.getModule());	      Real    rhs    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  if(!isNaN()  ||  rhs.isNaN()  ||  rhs.isNaN())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  if(!isNaN()  ||  rhs.isNaN()  ||  rhs.isNaN())  {  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if(!isNaN()  ||  rhs.isNaN()  ||  rhs.isNaN())  {	  if(isNaN()    ||    rhs.isNaN()    ||    rhs.isNaN())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
28	[BUG]  [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||  rhs.isUnknown())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||  rhs.isUnknown())  {  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if(isNaN()  ||  rhs.isNaN()  ||  rhs.isUnknown())  {	  if(isNaN()    ||    rhs.isNaN()    ||    rhs.isNaN())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
29	[BUG]  [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||  rhs.isInfinity())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||  rhs.isInfinity())  {  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if(isNaN()  ||  rhs.isNaN()  ||  rhs.isInfinity())  {	  if(isNaN()    ||    rhs.isNaN()    ||    rhs.isNaN())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  if(rhs.isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  if(rhs.isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if(rhs.isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {	  if    (isNaN()    ||    rhs.isNaN()    ||    isDenominator())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  if  (isNaN()  ||  rhs.isNaN()  ||  isDenominator()  ||  denominator)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  if  (isNaN()  ||  rhs.isNaN()  ||  isDenominator()  ||  denominator)  {  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if  (isNaN()  ||  rhs.isNaN()  ||  isDenominator()  ||  denominator)  {	  if    (isNaN()    ||    rhs.isNaN()    ||    isDenominator())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
32	[BUG]  [BUGGY]  Real  rhs  =  rhs.getRoot();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.getRoot();  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.getRoot();	      Real    rhs    =    rhs.getRaw();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  Real  rhs  =  Complex.getInstance(real);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.getInstance(real);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.getInstance(real);	      Real    rhs    =    Complex.getInstance(rhs);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  Real  rhs  =  Complex.getInstance(d,  rhs);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.getInstance(d,  rhs);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.getInstance(d,  rhs);	      Real    rhs    =    Complex.getInstance(rhs);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  Real  rhs  =  Complex.getInstance(null,  rhs);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.getInstance(null,  rhs);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.getInstance(null,  rhs);	      Real    rhs    =    Complex.getInstance(rhs);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
36	[BUG]  [BUGGY]  Real  rhs  =  Complex.getInstance(null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.getInstance(null);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.getInstance(null);	      Real    rhs    =    Complex.getInstance(rhs);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  Real  rhs  =  getDenominator(rhs,  ZERO);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  getDenominator(rhs,  ZERO);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  getDenominator(rhs,  ZERO);	      Real    rhs    =    getDenominator(rhs);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  Real  rhs  =  getDenominator(rhs.getINF());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  getDenominator(rhs.getINF());  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  getDenominator(rhs.getINF());	      Real    rhs    =    getDenominator(rhs);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  Real  rhs  =  rhs.get(null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.get(null);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.get(null);	      Real    rhs    =    rhs.get(rhs.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  if(rhs  ==  null  ||  isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  if(rhs  ==  null  ||  isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if(rhs  ==  null  ||  isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {	  if    (isNaN()    ||    rhs.isNaN()    ||    isDenominator())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  if(rhs  ==  null  ||  rhs.isNaN()  ||  isDenominator())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  if(rhs  ==  null  ||  rhs.isNaN()  ||  isDenominator())  {  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if(rhs  ==  null  ||  rhs.isNaN()  ||  isDenominator())  {	  if    (isNaN()    ||    rhs.isNaN()    ||    isDenominator())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
42	[BUG]  [BUGGY]  Real  rhs  =  Complex.create(rhs,  ZERO);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.create(rhs,  ZERO);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.create(rhs,  ZERO);	      Real    rhs    =    Complex.create(rhs);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  Complex  rhs  =  getDenominator(rhs.getModule());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  getDenominator(rhs.getModule());  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  getDenominator(rhs.getModule());	      Complex    rhs    =    getDenominator();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
44	[BUG]  [BUGGY]  Complex  rhs  =  createComplex(rhs.getDenominator(),  rhs.getDenominator());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  createComplex(rhs.getDenominator(),  rhs.getDenominator());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  createComplex(rhs.getDenominator(),  rhs.getDenominator());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
45	[BUG]  [BUGGY]  Complex  rhs  =  createComplex(rhs.getMask(),  rhs.getDenominator());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  createComplex(rhs.getMask(),  rhs.getDenominator());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  createComplex(rhs.getMask(),  rhs.getDenominator());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
46	[BUG]  [BUGGY]  Complex  rhs  =  createComplex(rhs.getMask(),  rhs.getMask());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  createComplex(rhs.getMask(),  rhs.getMask());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  createComplex(rhs.getMask(),  rhs.getMask());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
47	[BUG]  [BUGGY]  Complex  rhs  =  createComplex(rhs.getDenominator(),  rhs.getDestinator());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  createComplex(rhs.getDenominator(),  rhs.getDestinator());  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  createComplex(rhs.getDenominator(),  rhs.getDestinator());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  Real  rhs  =  rhs  ==  null?  null  :  rhs.getRawClass();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs  ==  null?  null  :  rhs.getRawClass();  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs  ==  null?  null  :  rhs.getRawClass();	      Real    rhs    =    rhs.getRawClass();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
49	[BUG]  [BUGGY]  Complex  rhs  =  getDenominator(rhs,  ZERO);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  getDenominator(rhs,  ZERO);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  getDenominator(rhs,  ZERO);	      Complex    rhs    =    getDenominator(rhs);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  Complex  rhs  =  getDenominator(rhs.real);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  getDenominator(rhs.real);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  getDenominator(rhs.real);	      Complex    rhs    =    getDenominator(rhs);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
51	[BUG]  [BUGGY]  Real  rhs  =  Complex.getInstance(real,  rhs);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.getInstance(real,  rhs);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.getInstance(real,  rhs);	      Real    rhs    =    Complex.getInstance(rhs);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
52	[BUG]  [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||  rhs.isInfinite())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||  rhs.isInfinite())  {  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if(isNaN()  ||  rhs.isNaN()  ||  rhs.isInfinite())  {	  if(isNaN()    ||    rhs.isNaN()    ||    rhs.isNaN())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
53	[BUG]  [BUGGY]  if(!isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  if(!isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if(!isNaN()  ||  rhs.isNaN()  ||  isDenominator())  {	  if    (isNaN()    ||    rhs.isNaN()    ||    isDenominator())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
54	[BUG]  [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||  isVoid())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||  isVoid())  {  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if(isNaN()  ||  rhs.isNaN()  ||  isVoid())  {	  if    (isNaN()    ||    rhs.isNaN()    ||    isDenominator())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
55	[BUG]  [BUGGY]  Real  rhs  =  rhs  ==  null?  rhs.getRawClass()  :  null;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs  ==  null?  rhs.getRawClass()  :  null;  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs  ==  null?  rhs.getRawClass()  :  null;	      Real    rhs    =    rhs.getRawClass();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
56	[BUG]  [BUGGY]  Real  rhs  =  Complex.getInstance(denominator);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  Complex.getInstance(denominator);  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  Complex.getInstance(denominator);	      Real    rhs    =    Complex.getInstance(rhs);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
57	[BUG]  [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||!rhs.isNaN())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  if(isNaN()  ||  rhs.isNaN()  ||!rhs.isNaN())  {  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	if(isNaN()  ||  rhs.isNaN()  ||!rhs.isNaN())  {	  if(isNaN()    ||    rhs.isNaN()    ||    rhs.isNaN())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
58	[BUG]  [BUGGY]  Complex  rhs  =  getDenominator(rhs.getDenominator());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Complex  rhs  =  getDenominator(rhs.getDenominator());  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Complex  rhs  =  getDenominator(rhs.getDenominator());	      Complex    rhs    =    getDenominator(rhs);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  Real  rhs  =  rhs.get(rhs.getDenominator());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.get(rhs.getDenominator());  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.get(rhs.getDenominator());	      Real    rhs    =    rhs.get(rhs.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
60	[BUG]  [BUGGY]  Real  rhs  =  rhs.get(rhs.getDimension());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.get(rhs.getDimension());  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.get(rhs.getDimension());	      Real    rhs    =    rhs.get(rhs.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
61	[BUG]  [BUGGY]  Real  rhs  =  rhs.getInFactory();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.getInFactory();  [BUGGY]    if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.getInFactory();	      Real    rhs    =    rhs.getINF();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  rhs.setDenominator(denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  rhs.setDenominator(denominator);  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	rhs.setDenominator(denominator);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
63	[BUG]  [BUGGY]  Real  rhs  =  rhs.getNumber();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Complex  multiply(Complex  rhs)  {    [BUGGY]  Real  rhs  =  rhs.getNumber();  [BUGGY]    return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	Real  rhs  =  rhs.getNumber();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
