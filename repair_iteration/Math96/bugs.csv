bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (isNaN()) { [FE] AssertionFailedError [CONTEXT] public int hashCode() { [BUGGY] if (isNaN()) { [BUGGY] return 7; } return 37 * (17 * MathUtils.hash(imaginary) + MathUtils.hash(real)); } [CLASS] Complex [METHOD] hashCode [RETURN_TYPE] int  [VARIABLES] boolean double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int hashCode() { [BUGGY] [BUGGY] if (isNaN()) { return 7; } return 37 * (17 * MathUtils.hash(imaginary) + MathUtils.hash(real)); } [CLASS] Complex [METHOD] hashCode [RETURN_TYPE] int  [VARIABLES] boolean double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	add	
3	[BUG] [BUGGY] return 37 * (17 * MathUtils.hash(imaginary) + MathUtils.hash(real)); [FE] AssertionFailedError [CONTEXT] public int hashCode() { if (isNaN()) { return 7; } [BUGGY] return 37 * (17 * MathUtils.hash(imaginary) +   MathUtils.hash(real)); [BUGGY] MathUtils.hash(real)); } [CLASS] Complex [METHOD] hashCode [RETURN_TYPE] int  [VARIABLES] boolean double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int hashCode() { if (isNaN()) { return 7; } [BUGGY] [BUGGY] return 37 * (17 * MathUtils.hash(imaginary) +   MathUtils.hash(real)); MathUtils.hash(real)); } [CLASS] Complex [METHOD] hashCode [RETURN_TYPE] int  [VARIABLES] boolean double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	add	
5	[BUG] [BUGGY] ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); [FE] AssertionFailedError [CONTEXT] if (this == other) { ret = true; } else if (other == null) { ret = false; } else{ try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { [BUGGY] ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); [BUGGY] } } catch (ClassCastException ex) {  ret = false; } } return ret; } [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (this == other) { ret = true; } else if (other == null) { ret = false; } else{ try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { [BUGGY] [BUGGY] ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) {  ret = false; } } return ret; } [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	add	
7	[BUG] [BUGGY] if (rhs.isNaN()) { [FE] AssertionFailedError [CONTEXT] public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else{ try { Complex rhs = (Complex)other; [BUGGY] if (rhs.isNaN()) { [BUGGY] ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) {  ret = false; } }  [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else{ try { Complex rhs = (Complex)other; [BUGGY] [BUGGY] if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) {  ret = false; } }  [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	add	
9	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) {  ret = false; [BUGGY] } [BUGGY] } return ret; } [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) {  ret = false; [BUGGY] [BUGGY] } } return ret; } [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	add	
11	[BUG] [BUGGY] Complex rhs = (Complex)other; [FE] AssertionFailedError [CONTEXT] public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else{ try { [BUGGY] Complex rhs = (Complex)other; [BUGGY] if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) {  ret = false; } } [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else{ try { [BUGGY] [BUGGY] Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) {  ret = false; } } [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	add	
13	[BUG] [BUGGY] } else if (other == null) { [FE] AssertionFailedError [CONTEXT] public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; [BUGGY] } else if (other == null) { [BUGGY] ret = false; } else{ try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) { [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; [BUGGY] [BUGGY] } else if (other == null) { ret = false; } else{ try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) { [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	add	
15	[BUG] [BUGGY] return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real); [FE] AssertionFailedError [CONTEXT] public Complex multiply(Complex rhs) { if (isNaN() || rhs.isNaN()) { return NaN; } if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) {  return INF; } [BUGGY] return createComplex(real * rhs.real - imaginary * rhs.imaginary,    real * rhs.imaginary + imaginary * rhs.real); [BUGGY] real * rhs.imaginary + imaginary * rhs.real); } [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex rhs [VARIABLES] boolean double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Complex multiply(Complex rhs) { if (isNaN() || rhs.isNaN()) { return NaN; } if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) {  return INF; } [BUGGY] [BUGGY] return createComplex(real * rhs.real - imaginary * rhs.imaginary,    real * rhs.imaginary + imaginary * rhs.real); real * rhs.imaginary + imaginary * rhs.real); } [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex rhs [VARIABLES] boolean double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	add	
17	[BUG] [BUGGY] if (this == other) { [FE] AssertionFailedError [CONTEXT] public boolean equals(Object other) { boolean ret; [BUGGY] if (this == other) { [BUGGY] ret = true; } else if (other == null) { ret = false; } else{ try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean equals(Object other) { boolean ret; [BUGGY] [BUGGY] if (this == other) { ret = true; } else if (other == null) { ret = false; } else{ try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	add	
19	[BUG] [BUGGY] return ret; [FE] AssertionFailedError [CONTEXT] ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) {  ret = false; } } [BUGGY] return ret; [BUGGY] } [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] ret = this.isNaN(); } else { ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) {  ret = false; } } [BUGGY] [BUGGY] return ret; } [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean ret double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs ClassCastException ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	add	
21	[BUG] [BUGGY] if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) { [FE] AssertionFailedError [CONTEXT] public Complex multiply(Complex rhs) { if (isNaN() || rhs.isNaN()) { return NaN; } [BUGGY] if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||   Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) { [BUGGY] Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) {  return INF; } return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real); } [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex rhs [VARIABLES] boolean double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.2773500981126146	358	359	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Complex multiply(Complex rhs) { if (isNaN() || rhs.isNaN()) { return NaN; } [BUGGY] [BUGGY] if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||   Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) { Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) {  return INF; } return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real); } [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex rhs [VARIABLES] boolean double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.2773500981126146	358	359	1	add	
23	[BUG] [BUGGY] if (isNaN() || rhs.isNaN()) { [FE] AssertionFailedError [CONTEXT] public Complex multiply(Complex rhs) { [BUGGY] if (isNaN() || rhs.isNaN()) { [BUGGY] return NaN; } if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) {  return INF; } return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real); } [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex rhs [VARIABLES] boolean double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Complex multiply(Complex rhs) { [BUGGY] [BUGGY] if (isNaN() || rhs.isNaN()) { return NaN; } if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(rhs.real)|| Double.isInfinite(rhs.imaginary)) {  return INF; } return createComplex(real * rhs.real - imaginary * rhs.imaginary, real * rhs.imaginary + imaginary * rhs.real); } [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex rhs [VARIABLES] boolean double c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.22941573387056174	355	355	1	add	
