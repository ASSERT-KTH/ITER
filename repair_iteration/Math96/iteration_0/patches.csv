bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]  return  NaN;  [CE]  incompatible  types  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  NaN;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  NaN;	return  ret;  	non-compiled	[CE]  incompatible  types	19	None	replace
2	[BUG]  [BUGGY]  return  ret  ==  null?  NaN  :  ret;  [CE]  incomparable  types:  boolean  and  <null>  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  ret  ==  null?  NaN  :  ret;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  ret  ==  null?  NaN  :  ret;	return  ret;  	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	19	None	replace
3	[BUG]  [BUGGY]  return  ret  ==  null?  Double.NaN  :  Double.NaN;  [CE]  incomparable  types:  boolean  and  <null>  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  ret  ==  null?  Double.NaN  :  Double.NaN;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  ret  ==  null?  Double.NaN  :  Double.NaN;	return  ret;  	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	19	None	replace
4	[BUG]  [BUGGY]  return  ret!=  null?  NaN  :  ret;  [CE]  incomparable  types:  boolean  and  <null>  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  ret!=  null?  NaN  :  ret;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  ret!=  null?  NaN  :  ret;	return  ret;  	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	19	None	replace
5	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	  	return  ret;  	non-compiled	[CE]  missing  return  statement	19	None	replace
11	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [CE]  ';'  expected  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }		non-compiled	[CE]  ';'  expected	2	None	add
12	[BUG]  [BUGGY]    if(MathUtils.hash(real))  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [CE]  ';'  expected  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(MathUtils.hash(real))  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(MathUtils.hash(real))  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }		non-compiled	[CE]  ';'  expected	2	None	add
13	[BUG]  [BUGGY]    if(isNaN())  {  if(!isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [CE]  ';'  expected  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(isNaN())  {  if(!isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(isNaN())  {  if(!isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }		non-compiled	[CE]  ';'  expected	2	None	add
14	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real);  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
15	[BUG]  [BUGGY]    if(MathUtils.hash(real))  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(MathUtils.hash(real))  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real);  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(MathUtils.hash(real))  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]  return  37  *(37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  [BUGGY]  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	add	return  37  *(37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));	return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  	compilable	  [FE]  AssertionFailedError  testMath221	3	1
24	[BUG]  [BUGGY]  return  37  *(37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]  return  37  *(37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  [BUGGY]  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	return  37  *(37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));	return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  	compilable	  [FE]  AssertionFailedError  testMath221	3	1	replace
24	[BUG]  [BUGGY]  return  37  *  17  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  [CE]  ';'  expected  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]  return  37  *  17  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  [BUGGY]  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	return  37  *  17  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));	return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  	non-compiled	[CE]  ';'  expected	3	None	replace
25	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    [BUGGY]  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	  	return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  	non-compiled	[CE]  missing  return  statement	3	None	replace
31	[BUG]  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(other))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  [CE]  ')'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(other))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary())  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(other))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary())		non-compiled	[CE]  ')'  expected	14	None	add
32	[BUG]  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  ')'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL		non-compiled	[CE]  ')'  expected	14	None	add
33	[BUG]  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(other))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal())  [CE]  ')'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(other))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal())  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(other))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getReal())		non-compiled	[CE]  ')'  expected	14	None	add
34	[BUG]  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(other))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.get  [CE]  ')'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(other))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.get  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(other))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.get		non-compiled	[CE]  ')'  expected	14	None	add
45	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    [BUGGY]  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	  	return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  	non-compiled	[CE]  missing  return  statement	15	None	replace
52	[BUG]  [BUGGY]  if(rhs.isNaN()  ||  other.isNaN())  {  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]  if(rhs.isNaN()  ||  other.isNaN())  {  [BUGGY]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	if(rhs.isNaN()  ||  other.isNaN())  {	if  (rhs.isNaN())  {  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]  if(rhs.isNaN()  ||  rhs.isNaN())  {  [BUGGY]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	add	if(rhs.isNaN()  ||  rhs.isNaN())  {	if  (rhs.isNaN())  {  	compilable	  [FE]  AssertionFailedError  testMath221	7	1
55	[BUG]  [BUGGY]  if(rhs.isNaN()  ||  rhs.isNaN())  {  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]  if(rhs.isNaN()  ||  rhs.isNaN())  {  [BUGGY]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	if(rhs.isNaN()  ||  rhs.isNaN())  {	if  (rhs.isNaN())  {  	compilable	  [FE]  AssertionFailedError  testMath221	7	1	replace
55	[BUG]  [BUGGY]    [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    [BUGGY]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	  	if  (rhs.isNaN())  {  	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	7	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  [BUGGY]  if(isNaN()  ||  Double.isNaN(real))  {  [BUGGY]  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	add	if(isNaN()  ||  Double.isNaN(real))  {	if  (isNaN())  {  	compilable	  [FE]  AssertionFailedError  testMath221	1	1
63	[BUG]  [BUGGY]  if(isNaN()  ||  Double.isNaN(real))  {  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  [BUGGY]  if(isNaN()  ||  Double.isNaN(real))  {  [BUGGY]  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	if(isNaN()  ||  Double.isNaN(real))  {	if  (isNaN())  {  	compilable	  [FE]  AssertionFailedError  testMath221	1	1	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  [BUGGY]  if(isNaN()  ||  isNaN())  {  [BUGGY]  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	add	if(isNaN()  ||  isNaN())  {	if  (isNaN())  {  	compilable	  [FE]  AssertionFailedError  testMath221	1	1
64	[BUG]  [BUGGY]  if(isNaN()  ||  isNaN())  {  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  [BUGGY]  if(isNaN()  ||  isNaN())  {  [BUGGY]  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	if(isNaN()  ||  isNaN())  {	if  (isNaN())  {  	compilable	  [FE]  AssertionFailedError  testMath221	1	1	replace
64	[BUG]  [BUGGY]  if(isNaN()  ||  double.hashCode()  ==  0)  {  [CE]  class  expected  [CONTEXT]  public  int  hashCode()  {  [BUGGY]  if(isNaN()  ||  double.hashCode()  ==  0)  {  [BUGGY]  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	if(isNaN()  ||  double.hashCode()  ==  0)  {	if  (isNaN())  {  	non-compiled	[CE]  class  expected	1	None	replace
71	[BUG]  [BUGGY]    MathUtils.hash(imaginary)+  MathUtils.hash(real));  [CE]  not  a  statement  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    MathUtils.hash(imaginary)+  MathUtils.hash(real));  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    MathUtils.hash(imaginary)+  MathUtils.hash(real));		non-compiled	[CE]  not  a  statement	4	None	add
72	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [CE]  ';'  expected  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }		non-compiled	[CE]  ';'  expected	4	None	add
73	[BUG]  [BUGGY]    if(isNaN())  {  double  d  =  getDenominator();  if(d  ==  0.0)  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [CE]  ';'  expected  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    if(isNaN())  {  double  d  =  getDenominator();  if(d  ==  0.0)  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    if(isNaN())  {  double  d  =  getDenominator();  if(d  ==  0.0)  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }		non-compiled	[CE]  ';'  expected	4	None	add
74	[BUG]  [BUGGY]    if(isNaN())  {  if(!isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [CE]  ';'  expected  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    if(isNaN())  {  if(!isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    if(isNaN())  {  if(!isNaN())  {  return  37  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }		non-compiled	[CE]  ';'  expected	4	None	add
75	[BUG]  [BUGGY]    if(isNaN())  {  double  d  =  getDenominator();  if(d  ==  0.0)  {  return  37  *  MathUtils.hash(imaginary);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    if(isNaN())  {  double  d  =  getDenominator();  if(d  ==  0.0)  {  return  37  *  MathUtils.hash(imaginary);  }  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    if(isNaN())  {  double  d  =  getDenominator();  if(d  ==  0.0)  {  return  37  *  MathUtils.hash(imaginary);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
81	[BUG]  [BUGGY]  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  ')'  expected  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	}  	non-compiled	[CE]  ')'  expected	9	None	replace
82	[BUG]  [BUGGY]  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  ')'  expected  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	}  	non-compiled	[CE]  ')'  expected	9	None	replace
85	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]    [BUGGY]  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
91	[BUG]  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  ')'  expected  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL		non-compiled	[CE]  ')'  expected	6	None	add
92	[BUG]  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  ')'  expected  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL		non-compiled	[CE]  ')'  expected	6	None	add
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]    ret  =  this.isNaN();  [BUGGY]  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	add	    ret  =  this.isNaN();		compilable	  [FE]  AssertionFailedError  testMath221	10	1
104	[BUG]  [BUGGY]    ret  =  this.isNaN();  [FE]  AssertionFailedError  testMath221  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]    ret  =  this.isNaN();  [BUGGY]  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	    ret  =  this.isNaN();		compilable	  [FE]  AssertionFailedError  testMath221	10	1	add
105	[BUG]  [BUGGY]    ret  =(Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(other)  ==  Double.doubleToRawL  [CE]  ')'  expected  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]    ret  =(Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(other)  ==  Double.doubleToRawL  [BUGGY]  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	    ret  =(Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(other)  ==  Double.doubleToRawL		non-compiled	[CE]  ')'  expected	10	None	add
113	[BUG]  [BUGGY]  Complex  rhs  =(Complex)other.complex;  [CE]  cannot  find  symbol  complex  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]  Complex  rhs  =(Complex)other.complex;  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	Complex  rhs  =(Complex)other.complex;	Complex  rhs  =  (Complex)other;  	non-compiled	[CE]  cannot  find  symbol  complex	11	None	replace
114	[BUG]  [BUGGY]  Complex  rhs  =(Complex)other.getComplex();  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]  Complex  rhs  =(Complex)other.getComplex();  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	Complex  rhs  =(Complex)other.getComplex();	Complex  rhs  =  (Complex)other;  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
115	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  rhs  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	  	Complex  rhs  =  (Complex)other;  	non-compiled	[CE]  cannot  find  symbol  rhs	11	None	replace
121	[BUG]  [BUGGY]    Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(other));  [CE]  not  a  statement  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(other));  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(other));		non-compiled	[CE]  not  a  statement	12	None	add
122	[BUG]  [BUGGY]    Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CE]  not  a  statement  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));		non-compiled	[CE]  not  a  statement	12	None	add
124	[BUG]  [BUGGY]    Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()));  [CE]  not  a  statement  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()));  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()));		non-compiled	[CE]  not  a  statement	12	None	add
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    ret  =  this.isNaN();  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	add	    ret  =  this.isNaN();		compilable	  [FE]  AssertionFailedError  testMath221	12	1
126	[BUG]  [BUGGY]    ret  =  this.isNaN();  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    ret  =  this.isNaN();  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    ret  =  this.isNaN();		compilable	  [FE]  AssertionFailedError  testMath221	12	1	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	add	    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }		compilable	  [FE]  AssertionFailedError  testMath221	16	1
132	[BUG]  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }		compilable	  [FE]  AssertionFailedError  testMath221	16	1	add
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	add	    if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }		compilable	  [FE]  AssertionFailedError  testMath221	16	1
133	[BUG]  [BUGGY]    if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }		compilable	  [FE]  AssertionFailedError  testMath221	16	1	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	add	    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }		compilable	  [FE]  AssertionFailedError  testMath221	16	1
134	[BUG]  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }		compilable	  [FE]  AssertionFailedError  testMath221	16	1	add
134	[BUG]  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  double  c  =  rhs.double;  if(c  ==  0.0)  {  return  NaN;  }  [CE]  <identifier>  expected  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  double  c  =  rhs.double;  if(c  ==  0.0)  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  double  c  =  rhs.double;  if(c  ==  0.0)  {  return  NaN;  }		non-compiled	[CE]  <identifier>  expected	16	None	add
135	[BUG]  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  double  c  =  rhs.double;  if(c!=  0.0)  {  return  NaN;  }  [CE]  <identifier>  expected  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  double  c  =  rhs.double;  if(c!=  0.0)  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  double  c  =  rhs.double;  if(c!=  0.0)  {  return  NaN;  }		non-compiled	[CE]  <identifier>  expected	16	None	add
142	[BUG]  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  0.0)  {  [CE]  incomparable  types:  Class<CAP#1>  and  double  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  0.0)  {  [BUGGY]  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  ||  other.getClass()!=  0.0)  {	}  else  if  (other  ==  null)  {  	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  double	13	None	replace
143	[BUG]  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  ret)  {  [CE]  incomparable  types:  Class<CAP#1>  and  boolean  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  ret)  {  [BUGGY]  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  ||  other.getClass()!=  ret)  {	}  else  if  (other  ==  null)  {  	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  boolean	13	None	replace
144	[BUG]  [BUGGY]  }  else  if(other  ==  null  ||  other.isComplex())  {  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]  }  else  if(other  ==  null  ||  other.isComplex())  {  [BUGGY]  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  ||  other.isComplex())  {	}  else  if  (other  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
154	[BUG]  [BUGGY]  ret  =(Double.doubleToRawLongBits(real)!=  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  ')'  expected  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]  ret  =(Double.doubleToRawLongBits(real)!=  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	ret  =(Double.doubleToRawLongBits(real)!=  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  	non-compiled	[CE]  ')'  expected	5	None	replace
161	[BUG]  [BUGGY]    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  ')'  expected  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL		non-compiled	[CE]  ')'  expected	20	None	add
162	[BUG]  [BUGGY]    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  ')'  expected  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL		non-compiled	[CE]  ')'  expected	20	None	add
163	[BUG]  [BUGGY]    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.double  [CE]  <identifier>  expected  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.double  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.double		non-compiled	[CE]  <identifier>  expected	20	None	add
164	[BUG]  [BUGGY]    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  ')'  expected  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL		non-compiled	[CE]  ')'  expected	20	None	add
165	[BUG]  [BUGGY]    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.double  [CE]  <identifier>  expected  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.double  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    ret  =  this.isNaN();  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  &&(Double.doubleToRawLongBits(imaginary)  ==  Double.double		non-compiled	[CE]  <identifier>  expected	20	None	add
171	[BUG]  [BUGGY]    if(other  instanceof  Complex)  {  if(this.isNaN())  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(other  instanceof  Complex)  {  if(this.isNaN())  {  ret  =  false;  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    if(other  instanceof  Complex)  {  if(this.isNaN())  {  ret  =  false;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
172	[BUG]  [BUGGY]    if(other  instanceof  Complex)  {  if(this.isNaN()  ||  this.isNaN())  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(other  instanceof  Complex)  {  if(this.isNaN()  ||  this.isNaN())  {  ret  =  false;  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    if(other  instanceof  Complex)  {  if(this.isNaN()  ||  this.isNaN())  {  ret  =  false;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
173	[BUG]  [BUGGY]    if(other  instanceof  Complex)  {  if(this.isNaN()  ||  other.isNaN())  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(other  instanceof  Complex)  {  if(this.isNaN()  ||  other.isNaN())  {  ret  =  false;  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    if(other  instanceof  Complex)  {  if(this.isNaN()  ||  other.isNaN())  {  ret  =  false;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(this  ==  other)  {  ret  =  this.isNaN();  }  else  {  ret  =  this.isNaN();  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	add	    if(this  ==  other)  {  ret  =  this.isNaN();  }  else  {  ret  =  this.isNaN();  }		compilable	  [FE]  AssertionFailedError  testMath221	18	1
175	[BUG]  [BUGGY]    if(this  ==  other)  {  ret  =  this.isNaN();  }  else  {  ret  =  this.isNaN();  }  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(this  ==  other)  {  ret  =  this.isNaN();  }  else  {  ret  =  this.isNaN();  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    if(this  ==  other)  {  ret  =  this.isNaN();  }  else  {  ret  =  this.isNaN();  }		compilable	  [FE]  AssertionFailedError  testMath221	18	1	add
175	[BUG]  [BUGGY]    if(other  instanceof  Complex)  {  if(this.isNaN())  {  ret  =  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(other  instanceof  Complex)  {  if(this.isNaN())  {  ret  =  this;  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    if(other  instanceof  Complex)  {  if(this.isNaN())  {  ret  =  this;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]  if(other  ==  this)  {  [BUGGY]  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	add	if(other  ==  this)  {	if  (this  ==  other)  {  	compilable	  [FE]  AssertionFailedError  testMath221	17	1
185	[BUG]  [BUGGY]  if(other  ==  this)  {  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]  if(other  ==  this)  {  [BUGGY]  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	if(other  ==  this)  {	if  (this  ==  other)  {  	compilable	  [FE]  AssertionFailedError  testMath221	17	1	replace
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  false;  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	add	    if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  false;  }		compilable	  [FE]  AssertionFailedError  testMath221	8	1
192	[BUG]  [BUGGY]    if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  false;  }  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  false;  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  false;  }		compilable	  [FE]  AssertionFailedError  testMath221	8	1	add
192	[BUG]  [BUGGY]    if(rhs.isNaN())  {  if(Double.isNaN(real))  {  ret  =  this;  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(rhs.isNaN())  {  if(Double.isNaN(real))  {  ret  =  this;  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(rhs.isNaN())  {  if(Double.isNaN(real))  {  ret  =  this;  }		non-compiled	[CE]  'catch'  without  'try'	8	None	add
193	[BUG]  [BUGGY]    if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  this;  }  [CE]  incompatible  types  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  this;  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(rhs.isNaN()  ||  rhs.isNaN())  {  ret  =  this;  }		non-compiled	[CE]  incompatible  types	8	None	add
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(rhs.isNaN())  {  ret  =  this.isNaN();  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	add	    if(rhs.isNaN())  {  ret  =  this.isNaN();  }		compilable	  [FE]  AssertionFailedError  testMath221	8	1
195	[BUG]  [BUGGY]    if(rhs.isNaN())  {  ret  =  this.isNaN();  }  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(rhs.isNaN())  {  ret  =  this.isNaN();  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(rhs.isNaN())  {  ret  =  this.isNaN();  }		compilable	  [FE]  AssertionFailedError  testMath221	8	1	add
195	[BUG]  [BUGGY]    if(rhs.isNaN()  ||  rhs.isSingleton())  {  ret  =  this.isNaN();  }  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(rhs.isNaN()  ||  rhs.isSingleton())  {  ret  =  this.isNaN();  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(rhs.isNaN()  ||  rhs.isSingleton())  {  ret  =  this.isNaN();  }		non-compiled	[CE]  cannot  find  symbol	8	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]  if(this  ==  other  ||  this.isNaN())  {  [BUGGY]  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	add	if(this  ==  other  ||  this.isNaN())  {	if  (this  ==  other)  {  	compilable	  [FE]  AssertionFailedError  testMath221	17	1
4	[BUG]  [BUGGY]  if(this  ==  other  ||  this.isNaN())  {  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]  if(this  ==  other  ||  this.isNaN())  {  [BUGGY]  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	if(this  ==  other  ||  this.isNaN())  {	if  (this  ==  other)  {  	compilable	  [FE]  AssertionFailedError  testMath221	17	1	replace
4	[BUG]  [BUGGY]  if(this  ==  other  ||  this.isNaN)  {  [CE]  cannot  find  symbol  isNaN  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]  if(this  ==  other  ||  this.isNaN)  {  [BUGGY]  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	if(this  ==  other  ||  this.isNaN)  {	if  (this  ==  other)  {  	non-compiled	[CE]  cannot  find  symbol  isNaN	17	None	replace
21	[BUG]  [BUGGY]  }  else  if(other  ==  null  ||  other.isNaN())  {  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]  }  else  if(other  ==  null  ||  other.isNaN())  {  [BUGGY]  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  ||  other.isNaN())  {	}  else  if  (other  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  getClass())  {  [BUGGY]  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	add	}  else  if(other  ==  null  ||  other.getClass()!=  getClass())  {	}  else  if  (other  ==  null)  {  	compilable	  [FE]  AssertionFailedError  testMath221	13	1
23	[BUG]  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  getClass())  {  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  getClass())  {  [BUGGY]  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  ||  other.getClass()!=  getClass())  {	}  else  if  (other  ==  null)  {  	compilable	  [FE]  AssertionFailedError  testMath221	13	1	replace
23	[BUG]  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  this)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Complex  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  this)  {  [BUGGY]  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  ||  other.getClass()!=  this)  {	}  else  if  (other  ==  null)  {  	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Complex	13	None	replace
41	[BUG]  [BUGGY]    if(isNaN())  {  if(!isNaN())  {  return  37  *  MathUtils.hash(imaginary);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    if(isNaN())  {  if(!isNaN())  {  return  37  *  MathUtils.hash(imaginary);  }  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    if(isNaN())  {  if(!isNaN())  {  return  37  *  MathUtils.hash(imaginary);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
42	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  17;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  17;  }  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    if(isNaN())  {  if(isNaN())  {  return  17;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    int  denominator  =  MathUtils.hash(imaginary);  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	add	    int  denominator  =  MathUtils.hash(imaginary);		compilable	  [FE]  AssertionFailedError  testMath221	4	1
44	[BUG]  [BUGGY]    int  denominator  =  MathUtils.hash(imaginary);  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    int  denominator  =  MathUtils.hash(imaginary);  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    int  denominator  =  MathUtils.hash(imaginary);		compilable	  [FE]  AssertionFailedError  testMath221	4	1	add
44	[BUG]  [BUGGY]    if(isNaN())  {  if(d  ==  0.0)  {  return  37  *  hashCode();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    if(isNaN())  {  if(d  ==  0.0)  {  return  37  *  hashCode();  }  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    if(isNaN())  {  if(d  ==  0.0)  {  return  37  *  hashCode();  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
45	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  hashCode();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  hashCode();  }  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    if(isNaN())  {  if(isNaN())  {  return  37  *  hashCode();  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
61	[BUG]  [BUGGY]    if(this  ==  other)  {  if(other  ==  null)  {  ret  =  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(this  ==  other)  {  if(other  ==  null)  {  ret  =  this;  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    if(this  ==  other)  {  if(other  ==  null)  {  ret  =  this;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
62	[BUG]  [BUGGY]    if(this.isNaN())  {  if(other  ==  null)  {  ret  =  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(this.isNaN())  {  if(other  ==  null)  {  ret  =  this;  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    if(this.isNaN())  {  if(other  ==  null)  {  ret  =  this;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
63	[BUG]  [BUGGY]    if(this  ==  other)  {  ret  =  this.isNaN();  if(other  ==  null)  {  ret  =  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(this  ==  other)  {  ret  =  this.isNaN();  if(other  ==  null)  {  ret  =  this;  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    if(this  ==  other)  {  ret  =  this.isNaN();  if(other  ==  null)  {  ret  =  this;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
64	[BUG]  [BUGGY]    if(this  ==  other)  {  if(other  ==  this)  {  ret  =  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(this  ==  other)  {  if(other  ==  this)  {  ret  =  this;  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    if(this  ==  other)  {  if(other  ==  this)  {  ret  =  this;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
65	[BUG]  [BUGGY]    if(this  ==  other)  {  ret  =  this.isNaN();  if(other  ==  null)  {  ret  =  false;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(this  ==  other)  {  ret  =  this.isNaN();  if(other  ==  null)  {  ret  =  false;  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    if(this  ==  other)  {  ret  =  this.isNaN();  if(other  ==  null)  {  ret  =  false;  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
81	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  0;  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(isNaN())  {  if(isNaN())  {  return  0;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
82	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary);  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(isNaN())  {  if(isNaN())  {  return  37  *  MathUtils.hash(imaginary);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
83	[BUG]  [BUGGY]    Complex  INF  =  MathUtils.hash(getImplicitReturn());  [CE]  cannot  find  symbol  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    Complex  INF  =  MathUtils.hash(getImplicitReturn());  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    Complex  INF  =  MathUtils.hash(getImplicitReturn());		non-compiled	[CE]  cannot  find  symbol	2	None	add
84	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  20;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  20;  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(isNaN())  {  if(isNaN())  {  return  20;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
85	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  7;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  7;  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(isNaN())  {  if(isNaN())  {  return  7;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
102	[BUG]  [BUGGY]    if(Double.isNaN(real))  {  ret  =  Double.doubleToRawLongBits(imaginary)-  Double.doubleToRawLongBits(rhs.getImaginary())&&!Double.doubleToRawLongBits  [CE]  ';'  expected  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    if(Double.isNaN(real))  {  ret  =  Double.doubleToRawLongBits(imaginary)-  Double.doubleToRawLongBits(rhs.getImaginary())&&!Double.doubleToRawLongBits  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    if(Double.isNaN(real))  {  ret  =  Double.doubleToRawLongBits(imaginary)-  Double.doubleToRawLongBits(rhs.getImaginary())&&!Double.doubleToRawLongBits		non-compiled	[CE]  ';'  expected	20	None	add
103	[BUG]  [BUGGY]    if(Double.isNaN(real))  {  ret  =  Double.doubleToRawLongBits(imaginary)-  Double.doubleToRawLongBits(rhs.getImaginary()));  }  else  {  ret  =  NaN;  }  [CE]  ';'  expected  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    if(Double.isNaN(real))  {  ret  =  Double.doubleToRawLongBits(imaginary)-  Double.doubleToRawLongBits(rhs.getImaginary()));  }  else  {  ret  =  NaN;  }  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    if(Double.isNaN(real))  {  ret  =  Double.doubleToRawLongBits(imaginary)-  Double.doubleToRawLongBits(rhs.getImaginary()));  }  else  {  ret  =  NaN;  }		non-compiled	[CE]  ';'  expected	20	None	add
104	[BUG]  [BUGGY]    if(Double.isNaN(real))  {  ret  =  Double.doubleToRawLongBits(imaginary)-  Double.doubleToRawLongBits(rhs.getImaginary())&&!Double.doubleToRawL  [CE]  ';'  expected  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    if(Double.isNaN(real))  {  ret  =  Double.doubleToRawLongBits(imaginary)-  Double.doubleToRawLongBits(rhs.getImaginary())&&!Double.doubleToRawL  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    if(Double.isNaN(real))  {  ret  =  Double.doubleToRawLongBits(imaginary)-  Double.doubleToRawLongBits(rhs.getImaginary())&&!Double.doubleToRawL		non-compiled	[CE]  ';'  expected	20	None	add
105	[BUG]  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary))  {  ret  =  NaN;  }  [CE]  incompatible  types  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary))  {  ret  =  NaN;  }  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    if(Double.isNaN(real)||  Double.isInfinite(imaginary))  {  ret  =  NaN;  }		non-compiled	[CE]  incompatible  types	20	None	add
141	[BUG]  [BUGGY]  return  ret  *  denominator;  [CE]  cannot  find  symbol  denominator  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  ret  *  denominator;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  ret  *  denominator;	return  ret;  	non-compiled	[CE]  cannot  find  symbol  denominator	19	None	replace
142	[BUG]  [BUGGY]  return  ret  ==  NaN?  Double.doubleToRawLongBits(real):  NaN;  [CE]  incomparable  types:  boolean  and  Complex  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  ret  ==  NaN?  Double.doubleToRawLongBits(real):  NaN;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  ret  ==  NaN?  Double.doubleToRawLongBits(real):  NaN;	return  ret;  	non-compiled	[CE]  incomparable  types:  boolean  and  Complex	19	None	replace
143	[BUG]  [BUGGY]  return  ret  ==  NaN?  Double.parseDouble(real):  NaN;  [CE]  incomparable  types:  boolean  and  Complex  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  ret  ==  NaN?  Double.parseDouble(real):  NaN;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  ret  ==  NaN?  Double.parseDouble(real):  NaN;	return  ret;  	non-compiled	[CE]  incomparable  types:  boolean  and  Complex	19	None	replace
144	[BUG]  [BUGGY]  return  ret!=  NaN?  Double.parseDouble(real):  NaN;  [CE]  incomparable  types:  boolean  and  Complex  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  ret!=  NaN?  Double.parseDouble(real):  NaN;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  ret!=  NaN?  Double.parseDouble(real):  NaN;	return  ret;  	non-compiled	[CE]  incomparable  types:  boolean  and  Complex	19	None	replace
161	[BUG]  [BUGGY]    if(rhs.isNaN())  {  if(this.isNaN())  {  ret  =  this;  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(rhs.isNaN())  {  if(this.isNaN())  {  ret  =  this;  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(rhs.isNaN())  {  if(this.isNaN())  {  ret  =  this;  }		non-compiled	[CE]  'catch'  without  'try'	8	None	add
162	[BUG]  [BUGGY]    if(rhs.getReal()!=  null)  {  if(this.isNaN())  {  ret  =  this;  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(rhs.getReal()!=  null)  {  if(this.isNaN())  {  ret  =  this;  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(rhs.getReal()!=  null)  {  if(this.isNaN())  {  ret  =  this;  }		non-compiled	[CE]  'catch'  without  'try'	8	None	add
163	[BUG]  [BUGGY]    if(rhs.isNaN())  {  if(!rhs.isNaN())  {  ret  =  this;  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(rhs.isNaN())  {  if(!rhs.isNaN())  {  ret  =  this;  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(rhs.isNaN())  {  if(!rhs.isNaN())  {  ret  =  this;  }		non-compiled	[CE]  'catch'  without  'try'	8	None	add
164	[BUG]  [BUGGY]    if(rhs.getReal()!=  null)  {  if(!rhs.isNaN())  {  ret  =  this;  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(rhs.getReal()!=  null)  {  if(!rhs.isNaN())  {  ret  =  this;  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(rhs.getReal()!=  null)  {  if(!rhs.isNaN())  {  ret  =  this;  }		non-compiled	[CE]  'catch'  without  'try'	8	None	add
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    ret  =  this.isNaN();  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	add	    ret  =  this.isNaN();		compilable	  [FE]  AssertionFailedError  testMath221	8	1
166	[BUG]  [BUGGY]    ret  =  this.isNaN();  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    ret  =  this.isNaN();  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    ret  =  this.isNaN();		compilable	  [FE]  AssertionFailedError  testMath221	8	1	add
182	[BUG]  [BUGGY]    Double  c  =  Double.doubleToRawLongBits(other);  ret  =  this.isCase();  [CE]  method  doubleToRawLongBits  in  class  Double  cannot  be  applied  to  given  types;  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    Double  c  =  Double.doubleToRawLongBits(other);  ret  =  this.isCase();  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    Double  c  =  Double.doubleToRawLongBits(other);  ret  =  this.isCase();		non-compiled	[CE]  method  doubleToRawLongBits  in  class  Double  cannot  be  applied  to  given  types;	12	None	add
183	[BUG]  [BUGGY]    Double  c  =  Double.doubleToRawLongBits(other);  if(c  ==  null)  {  ret  =  c;  }  [CE]  method  doubleToRawLongBits  in  class  Double  cannot  be  applied  to  given  types;  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    Double  c  =  Double.doubleToRawLongBits(other);  if(c  ==  null)  {  ret  =  c;  }  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    Double  c  =  Double.doubleToRawLongBits(other);  if(c  ==  null)  {  ret  =  c;  }		non-compiled	[CE]  method  doubleToRawLongBits  in  class  Double  cannot  be  applied  to  given  types;	12	None	add
184	[BUG]  [BUGGY]    Double  c  =  Double.doubleToRawLongBits(getReal());  ret  =  this.isCase();  [CE]  incompatible  types  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    Double  c  =  Double.doubleToRawLongBits(getReal());  ret  =  this.isCase();  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    Double  c  =  Double.doubleToRawLongBits(getReal());  ret  =  this.isCase();		non-compiled	[CE]  incompatible  types	12	None	add
185	[BUG]  [BUGGY]    Double  c  =  Double.doubleToRawLongBits(other);  if(c  ==  null)  {  ret  =  this;  }  [CE]  method  doubleToRawLongBits  in  class  Double  cannot  be  applied  to  given  types;  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    Double  c  =  Double.doubleToRawLongBits(other);  if(c  ==  null)  {  ret  =  this;  }  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    Double  c  =  Double.doubleToRawLongBits(other);  if(c  ==  null)  {  ret  =  this;  }		non-compiled	[CE]  method  doubleToRawLongBits  in  class  Double  cannot  be  applied  to  given  types;	12	None	add
203	[BUG]  [BUGGY]    if(other  ==  null)  {  ret  =  this.isNaN();  if(other.isNaN())  {  ret  =  this.isNaN();  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]    if(other  ==  null)  {  ret  =  this.isNaN();  if(other.isNaN())  {  ret  =  this.isNaN();  }  [BUGGY]  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	    if(other  ==  null)  {  ret  =  this.isNaN();  if(other.isNaN())  {  ret  =  this.isNaN();  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
204	[BUG]  [BUGGY]    if(other  ==  null)  {  ret  =  this.equals(other);  }  else  {  ret  =  this;  ret  =  this;  }  [CE]  incompatible  types  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]    if(other  ==  null)  {  ret  =  this.equals(other);  }  else  {  ret  =  this;  ret  =  this;  }  [BUGGY]  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	    if(other  ==  null)  {  ret  =  this.equals(other);  }  else  {  ret  =  this;  ret  =  this;  }		non-compiled	[CE]  incompatible  types	10	None	add
205	[BUG]  [BUGGY]    if(other  ==  null)  {  ret  =  this.equals(other);  }  else  {  rhs  =  other;  ret  =  this;  }  [CE]  cannot  find  symbol  rhs  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]    if(other  ==  null)  {  ret  =  this.equals(other);  }  else  {  rhs  =  other;  ret  =  this;  }  [BUGGY]  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	    if(other  ==  null)  {  ret  =  this.equals(other);  }  else  {  rhs  =  other;  ret  =  this;  }		non-compiled	[CE]  cannot  find  symbol  rhs	10	None	add
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    if(other  ==  null)  {  ret  =  this.isNaN();  }  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	add	    if(other  ==  null)  {  ret  =  this.isNaN();  }		compilable	  [FE]  AssertionFailedError  testMath221	14	1
223	[BUG]  [BUGGY]    if(other  ==  null)  {  ret  =  this.isNaN();  }  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    if(other  ==  null)  {  ret  =  this.isNaN();  }  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	    if(other  ==  null)  {  ret  =  this.isNaN();  }		compilable	  [FE]  AssertionFailedError  testMath221	14	1	add
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    if(other  ==  null)  {  ret  =  this.equals(other);  }  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	add	    if(other  ==  null)  {  ret  =  this.equals(other);  }		compilable	  [FE]  AssertionFailedError  testMath221	14	1
226	[BUG]  [BUGGY]    if(other  ==  null)  {  ret  =  this.equals(other);  }  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    if(other  ==  null)  {  ret  =  this.equals(other);  }  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	    if(other  ==  null)  {  ret  =  this.equals(other);  }		compilable	  [FE]  AssertionFailedError  testMath221	14	1	add
241	[BUG]  [BUGGY]  if(isNaN()  ||  MathUtils.hash(imaginary))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [CONTEXT]  public  int  hashCode()  {  [BUGGY]  if(isNaN()  ||  MathUtils.hash(imaginary))  {  [BUGGY]  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	if(isNaN()  ||  MathUtils.hash(imaginary))  {	if  (isNaN())  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	1	None	replace
242	[BUG]  [BUGGY]  if(isNaN()  ||  MathUtils.hash(real))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [CONTEXT]  public  int  hashCode()  {  [BUGGY]  if(isNaN()  ||  MathUtils.hash(real))  {  [BUGGY]  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	if(isNaN()  ||  MathUtils.hash(real))  {	if  (isNaN())  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	1	None	replace
243	[BUG]  [BUGGY]  if(isNaN()  ||  isDynamic())  {  [CE]  cannot  find  symbol  [CONTEXT]  public  int  hashCode()  {  [BUGGY]  if(isNaN()  ||  isDynamic())  {  [BUGGY]  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	if(isNaN()  ||  isDynamic())  {	if  (isNaN())  {  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
282	[BUG]  [BUGGY]  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [CE]  ')'  expected  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]  ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL  [BUGGY]  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal())||(Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawL	ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  	non-compiled	[CE]  ')'  expected	5	None	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	add	    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));		compilable	  [FE]  AssertionFailedError  testMath221	6	1
302	[BUG]  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [FE]  AssertionFailedError  testMath221  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));		compilable	  [FE]  AssertionFailedError  testMath221	6	1	add
304	[BUG]  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs  [CE]  ')'  expected  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary())||  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs		non-compiled	[CE]  ')'  expected	6	None	add
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()));  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	add	    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()));		compilable	  [FE]  AssertionFailedError  testMath221	6	1
306	[BUG]  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()));  [FE]  AssertionFailedError  testMath221  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()));  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	    ret  =(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()));		compilable	  [FE]  AssertionFailedError  testMath221	6	1	add
322	[BUG]  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(!Double.isNaN(real))  {  return  NaN;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(!Double.isNaN(real))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(!Double.isNaN(real))  {  return  NaN;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
324	[BUG]  [BUGGY]    if(Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isNaN(real)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isNaN(real)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isNaN(real)||  Double.isInfinite(rhs.imaginary))  {  return  NaN;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
325	[BUG]  [BUGGY]    if(Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  return  NaN;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  return  NaN;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]  if(isNaN()  ||  rhs.isNaN())  {  [BUGGY]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	add	if(isNaN()  ||  rhs.isNaN())  {	if  (rhs.isNaN())  {  	compilable	  [FE]  AssertionFailedError  testMath221	7	1
345	[BUG]  [BUGGY]  if(isNaN()  ||  rhs.isNaN())  {  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]  if(isNaN()  ||  rhs.isNaN())  {  [BUGGY]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	if(isNaN()  ||  rhs.isNaN())  {	if  (rhs.isNaN())  {  	compilable	  [FE]  AssertionFailedError  testMath221	7	1	replace
362	[BUG]  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  actual  *  rhs.imaginary  +  imaginary  *  rhs.real);  [CE]  cannot  find  symbol  actual  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  actual  *  rhs.imaginary  +  imaginary  *  rhs.real);  [BUGGY]  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  actual  *  rhs.imaginary  +  imaginary  *  rhs.real);	return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  	non-compiled	[CE]  cannot  find  symbol  actual	15	None	replace
363	[BUG]  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  Real  *  rhs.imaginary  +  imaginary  *  rhs.real);  [CE]  cannot  find  symbol  Real  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  Real  *  rhs.imaginary  +  imaginary  *  rhs.real);  [BUGGY]  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  Real  *  rhs.imaginary  +  imaginary  *  rhs.real);	return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  	non-compiled	[CE]  cannot  find  symbol  Real	15	None	replace
364	[BUG]  [BUGGY]  return  createComplex(complex  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  [CE]  cannot  find  symbol  complex  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(complex  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  [BUGGY]  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	return  createComplex(complex  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);	return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  	non-compiled	[CE]  cannot  find  symbol  complex	15	None	replace
382	[BUG]  [BUGGY]  Complex  rhs  =(Complex)other.rhs;  [CE]  cannot  find  symbol  rhs  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]  Complex  rhs  =(Complex)other.rhs;  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	Complex  rhs  =(Complex)other.rhs;	Complex  rhs  =  (Complex)other;  	non-compiled	[CE]  cannot  find  symbol  rhs	11	None	replace
383	[BUG]  [BUGGY]  Complex  rhs  =  isNaN()?(Complex)other;  [CE]  :  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]  Complex  rhs  =  isNaN()?(Complex)other;  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	Complex  rhs  =  isNaN()?(Complex)other;	Complex  rhs  =  (Complex)other;  	non-compiled	[CE]  :  expected	11	None	replace
384	[BUG]  [BUGGY]  Complex  rhs  =  isComplex(other)?  (Complex)other  :  null;  [CE]  cannot  find  symbol  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]  Complex  rhs  =  isComplex(other)?  (Complex)other  :  null;  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	Complex  rhs  =  isComplex(other)?  (Complex)other  :  null;	Complex  rhs  =  (Complex)other;  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
1	[BUG]  [BUGGY]    ret  =  Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CE]  ';'  expected  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    ret  =  Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	    ret  =  Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));		non-compiled	[CE]  ';'  expected	6	None	add
2	[BUG]  [BUGGY]    if(rhs.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this.isNaN();  }  [CE]  'catch'  without  'try'  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    if(rhs.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this.isNaN();  }  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	    if(rhs.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this.isNaN();  }		non-compiled	[CE]  'catch'  without  'try'	6	None	add
3	[BUG]  [BUGGY]    if(rhs.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this;  }  [CE]  'catch'  without  'try'  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    if(rhs.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this;  }  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	    if(rhs.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this;  }		non-compiled	[CE]  'catch'  without  'try'	6	None	add
4	[BUG]  [BUGGY]    ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CE]  ';'  expected  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	    ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));		non-compiled	[CE]  ';'  expected	6	None	add
5	[BUG]  [BUGGY]    ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CE]  ';'  expected  [CONTEXT]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  [BUGGY]    ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [BUGGY]  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.5	258	258	1	replace	    ret  =  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));		non-compiled	[CE]  ';'  expected	6	None	add
31	[BUG]  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  real)  {  [CE]  incomparable  types:  Class<CAP#1>  and  double  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  real)  {  [BUGGY]  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  ||  other.getClass()!=  real)  {	}  else  if  (other  ==  null)  {  	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  double	13	None	replace
32	[BUG]  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  0)  {  [CE]  incomparable  types:  Class<CAP#1>  and  int  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  0)  {  [BUGGY]  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  ||  other.getClass()!=  0)  {	}  else  if  (other  ==  null)  {  	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  int	13	None	replace
33	[BUG]  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  ZERO)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Complex  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]  }  else  if(other  ==  null  ||  other.getClass()!=  ZERO)  {  [BUGGY]  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	}  else  if(other  ==  null  ||  other.getClass()!=  ZERO)  {	}  else  if  (other  ==  null)  {  	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Complex	13	None	replace
63	[BUG]  [BUGGY]  if(isNaN()  ||  double.isNaN())  {  [CE]  class  expected  [CONTEXT]  public  int  hashCode()  {  [BUGGY]  if(isNaN()  ||  double.isNaN())  {  [BUGGY]  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	if(isNaN()  ||  double.isNaN())  {	if  (isNaN())  {  	non-compiled	[CE]  class  expected	1	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  [BUGGY]  if(isNaN()  ||  Double.isNaN(imaginary))  {  [BUGGY]  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	add	if(isNaN()  ||  Double.isNaN(imaginary))  {	if  (isNaN())  {  	compilable	  [FE]  AssertionFailedError  testMath221	1	1
65	[BUG]  [BUGGY]  if(isNaN()  ||  Double.isNaN(imaginary))  {  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  [BUGGY]  if(isNaN()  ||  Double.isNaN(imaginary))  {  [BUGGY]  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	if(isNaN()  ||  Double.isNaN(imaginary))  {	if  (isNaN())  {  	compilable	  [FE]  AssertionFailedError  testMath221	1	1	replace
91	[BUG]  [BUGGY]    if(Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  return  NaN;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
92	[BUG]  [BUGGY]    if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  if(Double.isNaN(imaginary))  {  return  NaN;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  if(Double.isNaN(imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  if(Double.isNaN(imaginary))  {  return  NaN;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
93	[BUG]  [BUGGY]    if(Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  return  NaN;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  return  NaN;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  return  NaN;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
95	[BUG]  [BUGGY]    if(Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  return  INF;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]    if(Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,    real  *  rhs.imaginary  +  imaginary  *  rhs.real);  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	    if(Double.isInfinite(imaginary)||  Double.isInfinite(rhs.imaginary))  {  if(Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  return  INF;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
121	[BUG]  [BUGGY]  return  ret!=  0?  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary):  ret;  [CE]  incomparable  types:  boolean  and  int  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  ret!=  0?  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary):  ret;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  ret!=  0?  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary):  ret;	return  ret;  	non-compiled	[CE]  incomparable  types:  boolean  and  int	19	None	replace
122	[BUG]  [BUGGY]  return  ret  ==  null?  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary):  ret;  [CE]  incomparable  types:  boolean  and  <null>  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  ret  ==  null?  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary):  ret;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  ret  ==  null?  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary):  ret;	return  ret;  	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	19	None	replace
123	[BUG]  [BUGGY]  return  ret  ==  0?  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary):  ret;  [CE]  incomparable  types:  boolean  and  int  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  ret  ==  0?  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary):  ret;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  ret  ==  0?  Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(imaginary):  ret;	return  ret;  	non-compiled	[CE]  incomparable  types:  boolean  and  int	19	None	replace
124	[BUG]  [BUGGY]  return  ret  ==  null?  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()):  ret;  [CE]  incomparable  types:  boolean  and  <null>  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]  return  ret  ==  null?  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()):  ret;  [BUGGY]  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	return  ret  ==  null?  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()):  ret;	return  ret;  	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	19	None	replace
181	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  (17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  (17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(isNaN())  {  if(isNaN())  {  return  37  *  (17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
182	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  17  +  MathUtils.hash(imaginary);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  17  +  MathUtils.hash(imaginary);  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(isNaN())  {  if(isNaN())  {  return  37  *  17  +  MathUtils.hash(imaginary);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
184	[BUG]  [BUGGY]    Complex  INF  =  37  *  MathUtils.hash(imaginary);  [CE]  incompatible  types  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    Complex  INF  =  37  *  MathUtils.hash(imaginary);  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    Complex  INF  =  37  *  MathUtils.hash(imaginary);		non-compiled	[CE]  incompatible  types	2	None	add
185	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  17  +  MathUtils.hash(imaginary).hashCode();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  17  +  MathUtils.hash(imaginary).hashCode();  }  [BUGGY]  if  (isNaN())  {  return  7;  }  return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	277	277	1	replace	    if(isNaN())  {  if(isNaN())  {  return  37  *  17  +  MathUtils.hash(imaginary).hashCode();  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]  if(this  ==  null)  {  [BUGGY]  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	add	if(this  ==  null)  {	if  (this  ==  other)  {  	compilable	  [FE]  AssertionFailedError  testMath221	17	1
214	[BUG]  [BUGGY]  if(this  ==  null)  {  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]  if(this  ==  null)  {  [BUGGY]  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	if(this  ==  null)  {	if  (this  ==  other)  {  	compilable	  [FE]  AssertionFailedError  testMath221	17	1	replace
244	[BUG]  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.actual);  [CE]  cannot  find  symbol  actual  [CONTEXT]  public  Complex  multiply(Complex  rhs)  {  if  (isNaN()  ||  rhs.isNaN())  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(rhs.real)||  Double.isInfinite(rhs.imaginary))  {  return  INF;  }  [BUGGY]  return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.actual);  [BUGGY]  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  rhs  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3333333333333333	363	364	1	replace	return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.actual);	return  createComplex(real  *  rhs.real  -  imaginary  *  rhs.imaginary,  real  *  rhs.imaginary  +  imaginary  *  rhs.real);  	non-compiled	[CE]  cannot  find  symbol  actual	15	None	replace
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]  return  37  *  (17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));  [BUGGY]  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	add	return  37  *  (17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));	return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  	compilable	  [FE]  AssertionFailedError  testMath221	3	1
303	[BUG]  [BUGGY]  return  37  *  (17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]  return  37  *  (17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));  [BUGGY]  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	return  37  *  (17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));	return  37  *  (17  *  MathUtils.hash(imaginary)  +  MathUtils.hash(real));  	compilable	  [FE]  AssertionFailedError  testMath221	3	1	replace
332	[BUG]  [BUGGY]  if(other  ==  null)  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  ret  =  this.isNaN();  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]  if(other  ==  null)  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  ret  =  this.isNaN();  }  [BUGGY]  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	if(other  ==  null)  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  ret  =  this.isNaN();  }	}  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
333	[BUG]  [BUGGY]  if(other  ==  null)  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  ret  =  this;  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]  if(other  ==  null)  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  ret  =  this;  }  [BUGGY]  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	if(other  ==  null)  {  if(Double.isNaN(real)||  Double.isNaN(imaginary))  {  ret  =  this;  }	}  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
334	[BUG]  [BUGGY]  if(other  ==  null)  {  if(!isNaN())  {  ret  =  this.isNaN();  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]  if(other  ==  null)  {  if(!isNaN())  {  ret  =  this.isNaN();  }  [BUGGY]  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	if(other  ==  null)  {  if(!isNaN())  {  ret  =  this.isNaN();  }	}  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
361	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  (17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  (17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    if(isNaN())  {  if(isNaN())  {  return  37  *  (17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
362	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  (17  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  (17  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    if(isNaN())  {  if(isNaN())  {  return  37  *  (17  *  MathUtils.hash(imaginary)+  MathUtils.hash(real));  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
363	[BUG]  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  17  +  MathUtils.hash(imaginary);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    if(isNaN())  {  if(isNaN())  {  return  37  *  17  +  MathUtils.hash(imaginary);  }  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    if(isNaN())  {  if(isNaN())  {  return  37  *  17  +  MathUtils.hash(imaginary);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
365	[BUG]  [BUGGY]    return  37  *  17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));  [CE]  ';'  expected  [CONTEXT]  public  int  hashCode()  {  if  (isNaN())  {  return  7;  }  [BUGGY]    return  37  *  17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));  [BUGGY]  return  37  *  (17  *  MathUtils.hash(imaginary)  +    MathUtils.hash(real));  MathUtils.hash(real));  }  [CLASS]  Complex  [METHOD]  hashCode  [RETURN_TYPE]  int  [VARIABLES]  boolean  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	280	281	1	replace	    return  37  *  17  +  MathUtils.hash(imaginary)+  MathUtils.hash(real));		non-compiled	[CE]  ';'  expected	4	None	add
394	[BUG]  [BUGGY]    if(other  ==  null)  {  ret  =  this.isNaN();  if(denominator!=  null)  {  ret  =  this.isNaN();  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]    if(other  ==  null)  {  ret  =  this.isNaN();  if(denominator!=  null)  {  ret  =  this.isNaN();  }  [BUGGY]  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	    if(other  ==  null)  {  ret  =  this.isNaN();  if(denominator!=  null)  {  ret  =  this.isNaN();  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
395	[BUG]  [BUGGY]    if(other  ==  null)  {  ret  =  this.isNaN();  if(ex.isNaN())  {  ret  =  this.isNaN();  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  [BUGGY]    if(other  ==  null)  {  ret  =  this.isNaN();  if(ex.isNaN())  {  ret  =  this.isNaN();  }  [BUGGY]  }  }  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	263	263	1	replace	    if(other  ==  null)  {  ret  =  this.isNaN();  if(ex.isNaN())  {  ret  =  this.isNaN();  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
421	[BUG]  [BUGGY]    if(this.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this.isNaN();  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(this.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this.isNaN();  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(this.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this.isNaN();  }		non-compiled	[CE]  'catch'  without  'try'	8	None	add
422	[BUG]  [BUGGY]    if(this.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this;  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(this.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this;  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(this.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getImaginary()))  {  ret  =  this;  }		non-compiled	[CE]  'catch'  without  'try'	8	None	add
424	[BUG]  [BUGGY]    if(this.isNaN())  {  if(rhs.isNaN())  {  ret  =  this;  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(this.isNaN())  {  if(rhs.isNaN())  {  ret  =  this;  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(this.isNaN())  {  if(rhs.isNaN())  {  ret  =  this;  }		non-compiled	[CE]  'catch'  without  'try'	8	None	add
425	[BUG]  [BUGGY]    if(this.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  {  ret  =  this.isNaN();  }  [CE]  'catch'  without  'try'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  [BUGGY]    if(this.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  {  ret  =  this.isNaN();  }  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4472135954999579	255	255	1	replace	    if(this.isNaN())  {  if(Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  {  ret  =  this.isNaN();  }		non-compiled	[CE]  'catch'  without  'try'	8	None	add
451	[BUG]  [BUGGY]    ret  =  Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CE]  ';'  expected  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    ret  =  Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    ret  =  Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));		non-compiled	[CE]  ';'  expected	20	None	add
452	[BUG]  [BUGGY]    ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CE]  ';'  expected  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));		non-compiled	[CE]  ';'  expected	20	None	add
453	[BUG]  [BUGGY]    ret  =  Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary());  [CE]  method  doubleToRawLongBits  in  class  Double  cannot  be  applied  to  given  types;  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    ret  =  Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary());  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    ret  =  Double.doubleToRawLongBits(other)  ==  Double.doubleToRawLongBits(rhs.getImaginary());		non-compiled	[CE]  method  doubleToRawLongBits  in  class  Double  cannot  be  applied  to  given  types;	20	None	add
455	[BUG]  [BUGGY]    ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary());  [CE]  cannot  find  symbol  rhs  [CONTEXT]  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [BUGGY]    ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary());  [BUGGY]  return  ret;  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	266	266	1	replace	    ret  =  Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary());		non-compiled	[CE]  cannot  find  symbol  rhs	20	None	add
481	[BUG]  [BUGGY]    double  c  =  Double.doubleToRawLongBits(other);  [CE]  method  doubleToRawLongBits  in  class  Double  cannot  be  applied  to  given  types;  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    double  c  =  Double.doubleToRawLongBits(other);  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    double  c  =  Double.doubleToRawLongBits(other);		non-compiled	[CE]  method  doubleToRawLongBits  in  class  Double  cannot  be  applied  to  given  types;	18	None	add
482	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    super.equals(other);  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	add	    super.equals(other);		compilable	  [FE]  AssertionFailedError  testMath221	18	1
483	[BUG]  [BUGGY]    super.equals(other);  [FE]  AssertionFailedError  testMath221  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    super.equals(other);  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    super.equals(other);		compilable	  [FE]  AssertionFailedError  testMath221	18	1	add
483	[BUG]  [BUGGY]    boolean  ret  =  this.isNaN();  [CE]  variable  ret  is  already  defined  in  method  equals(Object)  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    boolean  ret  =  this.isNaN();  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    boolean  ret  =  this.isNaN();		non-compiled	[CE]  variable  ret  is  already  defined  in  method  equals(Object)	18	None	add
485	[BUG]  [BUGGY]    if(this  ==  other)  {  if(this.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  [BUGGY]    if(this  ==  other)  {  if(this.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.31622776601683794	248	248	1	replace	    if(this  ==  other)  {  if(this.isNaN())  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
513	[BUG]  [BUGGY]  Complex  rhs  =  isNaN()?(Complex)other  :  Complex);  [CE]  ';'  expected  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]  Complex  rhs  =  isNaN()?(Complex)other  :  Complex);  [BUGGY]  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	Complex  rhs  =  isNaN()?(Complex)other  :  Complex);	Complex  rhs  =  (Complex)other;  	non-compiled	[CE]  ';'  expected	11	None	replace
541	[BUG]  [BUGGY]    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  rhs  =  other.getComplex();  if(rhs.isNaN())  {  ret  =  this.isNaN();  }  [CE]  'else'  without  'if'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  rhs  =  other.getComplex();  if(rhs.isNaN())  {  ret  =  this.isNaN();  }  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  rhs  =  other.getComplex();  if(rhs.isNaN())  {  ret  =  this.isNaN();  }		non-compiled	[CE]  'else'  without  'if'	14	None	add
543	[BUG]  [BUGGY]    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  INF  =  other.getINF();  if(this.isNaN())  {  ret  =  this.isNaN();  }  [CE]  'else'  without  'if'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  INF  =  other.getINF();  if(this.isNaN())  {  ret  =  this.isNaN();  }  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  INF  =  other.getINF();  if(this.isNaN())  {  ret  =  this.isNaN();  }		non-compiled	[CE]  'else'  without  'if'	14	None	add
544	[BUG]  [BUGGY]    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  rhs  =  other.getComplex();  if(this.isNaN())  {  ret  =  this.isNaN();  }  [CE]  'else'  without  'if'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  rhs  =  other.getComplex();  if(this.isNaN())  {  ret  =  this.isNaN();  }  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  rhs  =  other.getComplex();  if(this.isNaN())  {  ret  =  this.isNaN();  }		non-compiled	[CE]  'else'  without  'if'	14	None	add
545	[BUG]  [BUGGY]    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  rhs  =  other.getComplex();  if(rhs.isInfinite())  {  ret  =  this.isInfinite();  }  [CE]  'else'  without  'if'  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  [BUGGY]    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  rhs  =  other.getComplex();  if(rhs.isInfinite())  {  ret  =  this.isInfinite();  }  [BUGGY]  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.3779644730092272	250	250	1	replace	    if(other  ==  null)  {  ret  =  false;  }  else  {  Complex  rhs  =  other.getComplex();  if(rhs.isInfinite())  {  ret  =  this.isInfinite();  }		non-compiled	[CE]  'else'  without  'if'	14	None	add
571	[BUG]  [BUGGY]    Double.doubleToRawLongBits(this.isNaN())  ==  Double.doubleToRawLongBits(other.getImaginary());  [CE]  not  a  statement  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    Double.doubleToRawLongBits(this.isNaN())  ==  Double.doubleToRawLongBits(other.getImaginary());  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    Double.doubleToRawLongBits(this.isNaN())  ==  Double.doubleToRawLongBits(other.getImaginary());		non-compiled	[CE]  not  a  statement	12	None	add
572	[BUG]  [BUGGY]    Double.doubleToRawLongBits(this.getImaginary())  ==  Double.doubleToRawLongBits(other.getImaginary());  [CE]  not  a  statement  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    Double.doubleToRawLongBits(this.getImaginary())  ==  Double.doubleToRawLongBits(other.getImaginary());  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    Double.doubleToRawLongBits(this.getImaginary())  ==  Double.doubleToRawLongBits(other.getImaginary());		non-compiled	[CE]  not  a  statement	12	None	add
573	[BUG]  [BUGGY]    Double.doubleToRawLongBits(this.getImaginary())  ==  Double.doubleToRawLongBits(other.getImaginary()));  [CE]  not  a  statement  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    Double.doubleToRawLongBits(this.getImaginary())  ==  Double.doubleToRawLongBits(other.getImaginary()));  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    Double.doubleToRawLongBits(this.getImaginary())  ==  Double.doubleToRawLongBits(other.getImaginary()));		non-compiled	[CE]  not  a  statement	12	None	add
575	[BUG]  [BUGGY]    Double.doubleToRawLongBits(this)  ==  Double.doubleToRawLongBits(other));  [CE]  not  a  statement  [CONTEXT]  public  boolean  equals(Object  other)  {  boolean  ret;  if  (this  ==  other)  {  ret  =  true;  }  else  if  (other  ==  null)  {  ret  =  false;  }  else{  try  {  [BUGGY]    Double.doubleToRawLongBits(this)  ==  Double.doubleToRawLongBits(other));  [BUGGY]  Complex  rhs  =  (Complex)other;  if  (rhs.isNaN())  {  ret  =  this.isNaN();  }  else  {  ret  =  (Double.doubleToRawLongBits(real)  ==  Double.doubleToRawLongBits(rhs.getReal()))  &&  (Double.doubleToRawLongBits(imaginary)  ==  Double.doubleToRawLongBits(rhs.getImaginary()));  }  }  catch  (ClassCastException  ex)  {  ret  =  false;  }  }  [CLASS]  Complex  [METHOD]  equals  [RETURN_TYPE]  boolean  Object  other  [VARIABLES]  Object  other  boolean  ret  double  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  rhs  ClassCastException  ex  	projects/Math96/src/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	254	254	1	replace	    Double.doubleToRawLongBits(this)  ==  Double.doubleToRawLongBits(other));		non-compiled	[CE]  not  a  statement	12	None	add
