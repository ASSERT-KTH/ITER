bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(tempC  >  x)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempC  >  x)  {  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempC  >  x)  {	  if(tempC    >    z)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2	[BUG]  [BUGGY]  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempA;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempA;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempB  =  intPartA  *  fracPartB  +  tempC  *  tempA;	  tempA    =    intPartA    *    fracPartB;    tempB    =    intPartA    *    tempPartB    +    fracPartB    *    tempC    *    tempB;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartA  +  tempC  *  tempB;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartA  +  tempC  *  tempB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartA  +  tempC  *  tempB;	  tempA    =    intPartA    *    fracPartB;    tempB    =    intPartA    *    tempPartB    +    fracPartB    *    tempC    *    tempB;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  if(tempC!=  null)  {  for(int  i  =  0;  i  <  tempC;  i++)  {  tempB[i]  =  x;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempC!=  null)  {  for(int  i  =  0;  i  <  tempC;  i++)  {  tempB[i]  =  x;  }  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempC!=  null)  {  for(int  i  =  0;  i  <  tempC;  i++)  {  tempB[i]  =  x;  }	  if(hiPrec!=    null)    {    for(int    i    =    0;    i    <    tempC;    i++)    {    tempB[i]    =    x;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  tempC;  i++)  {  tempB[i]  =  x;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  for(int  i  =  0;  i  <  tempC;  i++)  {  tempB[i]  =  x;  }  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	for(int  i  =  0;  i  <  tempC;  i++)  {  tempB[i]  =  x;  }	  if(hiPrec!=    null)    {    for(int    i    =    0;    i    <    tempC;    i++)    {    tempB[i]    =    x;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  intPartB  *  hiPrec  +  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  intPartB  *  hiPrec  +  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  intPartB  *  hiPrec  +  }	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    intPartB    *    hiPrec    +    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
7	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec  +  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec  +  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec  +  }	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    intPartB    *    hiPrec    +    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hiPrec.length;  ++i)  {  hiPrec[i]  =  x  *  extra;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  for(int  i  =  0;  i  <  hiPrec.length;  ++i)  {  hiPrec[i]  =  x  *  extra;  }  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	for(int  i  =  0;  i  <  hiPrec.length;  ++i)  {  hiPrec[i]  =  x  *  extra;  }	  if(hiPrec!=    null)    {    for(int    i    =    0;    i    <    tempC.length;    ++i)    {    hiPrec[i]    =    x    *    extra;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
9	[BUG]  [BUGGY]  fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  fracPartB;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  fracPartB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  fracPartB;  }	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;	  if(tempA!=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
12	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;	  if(tempA!=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
13	[BUG]  [BUGGY]  double  tempA  =  intPartA  *  fracPartB  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  tempA  =  intPartA  *  fracPartB  +  1;  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  tempA  =  intPartA  *  fracPartB  +  1;	  double    tempA    =    intPartA    *    fracPartA    +    1;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
14	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;	  tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    fracPartB;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;	  tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    fracPartB;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  intPartB  *  fracPartB;	  if(tempA    >=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  hiPrec.length;  ++i)  {  tempC  *=  x[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  for(int  i  =  0;  i  <  hiPrec.length;  ++i)  {  tempC  *=  x[i];  }  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	for(int  i  =  0;  i  <  hiPrec.length;  ++i)  {  tempC  *=  x[i];  }	  if(hiPrec!=    null)    {    for(int    i    =    0;    i    <    hiPrec.length;    ++i)    {    tempC    *=    x[i];    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
18	[BUG]  [BUGGY]  if(tempC!=  null)  {  for(int  i  =  0;  i  <  hiPrec.length;  ++i)  {  tempC  *=  x[i];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempC!=  null)  {  for(int  i  =  0;  i  <  hiPrec.length;  ++i)  {  tempC  *=  x[i];  }  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempC!=  null)  {  for(int  i  =  0;  i  <  hiPrec.length;  ++i)  {  tempC  *=  x[i];  }	  if(hiPrec!=    null)    {    for(int    i    =    0;    i    <    hiPrec.length;    ++i)    {    tempC    *=    x[i];    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA;  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA;	  double    tempB    =    intPartA    *    fracPartB    +    intPartB    *    fracPartB;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
20	[BUG]  [BUGGY]  double  extra  =  tempC  *  fracPartB  +  intPartA;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  extra  =  tempC  *  fracPartB  +  intPartA;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  extra  =  tempC  *  fracPartB  +  intPartA;	  double    extra    =    intPartA    *    fracPartB    +    tempC;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
21	[BUG]  [BUGGY]  double  extra  =  intPartA  *  fracPartA  +  tempC;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  extra  =  intPartA  *  fracPartA  +  tempC;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  extra  =  intPartA  *  fracPartA  +  tempC;	  double    extra    =    intPartA    *    fracPartB    +    tempC;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
22	[BUG]  [BUGGY]  fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    intPartB    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
23	[BUG]  [BUGGY]  fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  if(tempB  >  0.0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempB  >  0.0)  {  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempB  >  0.0)  {	  if(tempB    >=    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
25	[BUG]  [BUGGY]  tempB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec;	  fracPartB    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    hiPrec;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
26	[BUG]  [BUGGY]  fracPartB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  fracPartB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	fracPartB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec;	  fracPartB    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    hiPrec;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  if(tempA  >  0.0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempA  >  0.0)  {  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempA  >  0.0)  {	  if(tempA    >=    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  if(tempA  <  =  0.0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempA  <  =  0.0)  {  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempA  <  =  0.0)  {	  if(tempA    >=    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  double  tempA  =  intPartA  *  fracPartB  +  intPartA  *  fracPartA;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  tempA  =  intPartA  *  fracPartB  +  intPartA  *  fracPartA;  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  tempA  =  intPartA  *  fracPartB  +  intPartA  *  fracPartA;	  double    tempA    =    intPartA    *    fracPartA    +    intPartB    *    fracPartB;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
30	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;	  tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    tempB;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
31	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartA  +  tempC  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartA  +  tempC  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartA  +  tempC  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;	  tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    tempB;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  double  extra  =  tempC  *  intPartA;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  extra  =  tempC  *  intPartA;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  extra  =  tempC  *  intPartA;	  double    extra    =    x    *    intPartA;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
33	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  hiPrec;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  hiPrec;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  hiPrec;  }	  if(hiPrec!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
34	[BUG]  [BUGGY]  fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	fracPartA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
35	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;  }	  if(hiPrec!=    null)    {    tempA    =    intPartA    *    fracPartA;    tempB    =    intPartA    *    tempPartB    +    fracPartB    *    tempC    *    tempB;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
36	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartA  +  tempC  *  tempB;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartA  +  tempC  *  tempB;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartA  +  tempC  *  tempB;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;	  tempA    =    intPartA    *    fracPartA;    tempB    =    intPartA    *    tempPartB    +    fracPartB    *    tempC    *    tempB;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
37	[BUG]  [BUGGY]  if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  *  fracPartA  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  *  fracPartA  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  *  fracPartA  +	  if(tempA!=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    fracPartA    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
38	[BUG]  [BUGGY]  if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  *  fracPartA  +  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  *  fracPartA  +  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  *  fracPartA  +  }	  if(tempA!=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    fracPartA    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
39	[BUG]  [BUGGY]  double  extra  =  tempA  *  x;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  extra  =  tempA  *  x;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  extra  =  tempA  *  x;	  double    extra    =    tempC    *    x;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
40	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +  tempC  *  fracPartB;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +  tempC  *  fracPartB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +  tempC  *  fracPartB;  }	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempB    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
41	[BUG]  [BUGGY]  if(tempA  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempA  >  0)  {  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempA  >  0)  {	  if(tempC    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
42	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  }	  if(fracPartB!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    hiPrec;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  hiPrec;  }	  if(fracPartB!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    hiPrec;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
44	[BUG]  [BUGGY]  double  extra  =  tempC  *  fracPartA  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  extra  =  tempC  *  fracPartA  +  1;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  extra  =  tempC  *  fracPartA  +  1;	  double    extra    =    intPartA    *    fracPartA    +    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
45	[BUG]  [BUGGY]  if(tempC  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempC  >=  0)  {  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempC  >=  0)  {	  if(tempC    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
46	[BUG]  [BUGGY]  if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  fracPartA  *  fracPartA  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  fracPartA  *  fracPartA  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  fracPartA  *  fracPartA  +	  if(tempA!=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    fracPartA    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
47	[BUG]  [BUGGY]  if(fracPartA  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  fracPartA  *  fracPartA  +  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  fracPartA  *  fracPartA  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  fracPartA  *  fracPartA  +	  if(tempA!=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    fracPartA    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
48	[BUG]  [BUGGY]  if(x  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  hiPrec;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(x  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  hiPrec;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(x  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  hiPrec;  }	  if(tempA    >=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
49	[BUG]  [BUGGY]  double  extra  =  tempC  *  hiPrec;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  extra  =  tempC  *  hiPrec;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  extra  =  tempC  *  hiPrec;	  double    extra    =    tempC    *    x;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
50	[BUG]  [BUGGY]  if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  }	  if(tempA!=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
51	[BUG]  [BUGGY]  if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;  }	  if(tempA    >=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    tempPartB    +    fracPartB    *    tempC    *    tempB;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
52	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempB    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
53	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +  minC  *  fracPartB;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +  minC  *  fracPartB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +  minC  *  fracPartB;  }	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempB    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
54	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  hiPrec  *  fracPartB;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  hiPrec  *  fracPartB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  hiPrec  *  fracPartB;  }	  if(hiPrec!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
55	[BUG]  [BUGGY]  if(hiPrec!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  hiPrec  *  fracPartB;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(hiPrec!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  hiPrec  *  fracPartB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(hiPrec!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  hiPrec  *  fracPartB;  }	  if(hiPrec!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
56	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartB  +  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartB  +  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartB  +  }	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    intPartB    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
57	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;	  tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    fracPartB;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
58	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;	  tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    fracPartB;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
59	[BUG]  [BUGGY]  double  extra  =  intPartA  *  fracPartB  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  extra  =  intPartA  *  fracPartB  +  1;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  extra  =  intPartA  *  fracPartB  +  1;	  double    extra    =    intPartA    *    fracPartA    +    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
60	[BUG]  [BUGGY]  double  extra  =  tempA  *  fracPartA  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  extra  =  tempA  *  fracPartA  +  1;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  extra  =  tempA  *  fracPartA  +  1;	  double    extra    =    tempA    *    fracPartA;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
61	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  }	  if(fracPartA    ==    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
62	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +	  if(fracPartA    ==    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartB;  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;	  tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    tempB;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
64	[BUG]  [BUGGY]  if(x  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(x  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(x  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  }	  if(tempA    >=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
65	[BUG]  [BUGGY]  double  tempA  =  intPartA  *  fracPartA  +  intPartB  *  fracPartA;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  tempA  =  intPartA  *  fracPartA  +  intPartB  *  fracPartA;  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  tempA  =  intPartA  *  fracPartA  +  intPartB  *  fracPartA;	  double    tempA    =    intPartA    *    fracPartA    +    intPartB    *    fracPartB;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
66	[BUG]  [BUGGY]  if(hiPrec!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(hiPrec!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(hiPrec!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  }	  if(hiPrec    ==    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
67	[BUG]  [BUGGY]  double  extra  =  tempA  *  fracPartB  +  intPartA;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  extra  =  tempA  *  fracPartB  +  intPartA;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  extra  =  tempA  *  fracPartB  +  intPartA;	  double    extra    =    intPartA    *    fracPartB    +    tempC;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
68	[BUG]  [BUGGY]  double  extra  =  intPartA  *  fracPartA  +  tempB;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  extra  =  intPartA  *  fracPartA  +  tempB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  extra  =  intPartA  *  fracPartA  +  tempB;	  double    extra    =    intPartA    *    fracPartB    +    tempC;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  tempC.length;  ++i)  {  hiPrec[i]  =  x  *  extra;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  for(int  i  =  0;  i  <  tempC.length;  ++i)  {  hiPrec[i]  =  x  *  extra;  }  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	for(int  i  =  0;  i  <  tempC.length;  ++i)  {  hiPrec[i]  =  x  *  extra;  }	  if(hiPrec!=    null)    {    for(int    i    =    0;    i    <    tempC.length;    ++i)    {    hiPrec[i]    =    x    *    extra;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
70	[BUG]  [BUGGY]  if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +	  if(tempA!=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
71	[BUG]  [BUGGY]  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempB  =  intPartA  *  fracPartB  +  tempC  *  tempB;	  tempA    =    intPartA    *    fracPartB;    tempB    =    intPartA    *    tempPartB    +    fracPartB    *    tempC    *    tempB;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
72	[BUG]  [BUGGY]  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempC;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempB  =  intPartA  *  fracPartB  +  tempC  *  tempC;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempB  =  intPartA  *  fracPartB  +  tempC  *  tempC;	  tempA    =    intPartA    *    fracPartB;    tempB    =    intPartA    *    tempPartB    +    fracPartB    *    tempC    *    tempB;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
73	[BUG]  [BUGGY]  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;	  fracPartB    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    hiPrec;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
74	[BUG]  [BUGGY]  if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  fracPartB;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  fracPartB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  fracPartB;  }	  if(tempA!=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
75	[BUG]  [BUGGY]  tempA  =  intPartA  *  fracPartA  +  tempPartB  *  fracPartB  *  tempC;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  tempA  =  intPartA  *  fracPartA  +  tempPartB  *  fracPartB  *  tempC;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	tempA  =  intPartA  *  fracPartA  +  tempPartB  *  fracPartB  *  tempC;	  tempA    =    intPartA    *    fracPartA;    tempB    =    intPartA    *    tempPartB    +    fracPartB    *    tempC    *    tempB;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
76	[BUG]  [BUGGY]  if(tempA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  hiPrec;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  hiPrec;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  hiPrec;  }	  if(hiPrec!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
77	[BUG]  [BUGGY]  if(tempA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempA!=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +	  if(hiPrec!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
78	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  fracPartB;  }	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
79	[BUG]  [BUGGY]  if(tempA!=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempA!=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempA!=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  tempPartB  +  fracPartB  *  tempC  *  tempB;  }	  if(hiPrec!=    null)    {    tempA    =    intPartA    *    fracPartA;    tempB    =    intPartA    *    tempPartB    +    fracPartB    *    tempC    *    tempB;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
80	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  +	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    intPartB    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
82	[BUG]  [BUGGY]  if(tempC!=  null)  {  for(int  i  =  0;  i  <  tempC.length;  ++i)  {  hiPrec[i]  =  x  *  extra;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempC!=  null)  {  for(int  i  =  0;  i  <  tempC.length;  ++i)  {  hiPrec[i]  =  x  *  extra;  }  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempC!=  null)  {  for(int  i  =  0;  i  <  tempC.length;  ++i)  {  hiPrec[i]  =  x  *  extra;  }	  if(hiPrec!=    null)    {    for(int    i    =    0;    i    <    tempC.length;    ++i)    {    hiPrec[i]    =    x    *    extra;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
83	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  fracPartB;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  fracPartB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartA  +  fracPartB  *  fracPartB;  }	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
84	[BUG]  [BUGGY]  double  tempB  =  intPartA  *  fracPartB  +  intPartA  *  fracPartB;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  tempB  =  intPartA  *  fracPartB  +  intPartA  *  fracPartB;  [BUGGY]      result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  tempB  =  intPartA  *  fracPartB  +  intPartA  *  fracPartB;	  double    tempB    =    intPartA    *    fracPartB    +    intPartB    *    fracPartB;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
85	[BUG]  [BUGGY]  if(tempA  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempA  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempA  >=  0)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempC  *  fracPartB  *  hiPrec;  }	  if(hiPrec    ==    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempC    *    fracPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
86	[BUG]  [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +  fracPartB  *  fracPartB;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +  fracPartB  *  fracPartB;  }  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(fracPartA!=  null)  {  tempA  =  intPartA  *  x;  tempB  =  intPartA  *  fracPartB  +  tempB  *  fracPartA  +  fracPartB  *  fracPartB;  }	  if(fracPartA!=    null)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    tempB    *    fracPartA    +    intPartB    *    fracPartB;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
87	[BUG]  [BUGGY]  double  extra  =  tempA  *  intPartA;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  double  extra  =  tempA  *  intPartA;  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	double  extra  =  tempA  *  intPartA;	  double    extra    =    x    *    intPartA;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
88	[BUG]  [BUGGY]  if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  fracPartA  *  fracPartA  +  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        double  tempA  =  intPartA  *  fracPartA;  double  tempB  =  intPartA  *  fracPartB  +  intPartB  *  fracPartA  +  intPartB  *  fracPartB;  important.For  accuracy  add  by  increasing  size.tempA  is  exact  and  much  larger  than  the  others.If  there  are  extra  bits  specified  from  the  pow()  function,  use  them.  */  final  double  tempC  =  tempB  +  tempA;  final  double  result;      [BUGGY]  if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  fracPartA  *  fracPartA  +  [BUGGY]      if  (extra  !=  0.0)  {  result  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB  +  tempA;  }  else  {  result  =  tempC*z  +  tempB  +  tempA;  }  if  (hiPrec  !=  null)  {  hiPrec[0]  =  tempA;  hiPrec[1]  =  tempC*extra*z  +  tempC*extra  +  tempC*z  +  tempB;  }  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	922	922	2	replace	if(tempA  >=  0)  {  tempA  =  intPartA  *  fracPartA;  tempB  =  intPartA  *  fracPartB  +  fracPartA  *  fracPartA  +	  if(tempA!=    0)    {    tempA    =    intPartA    *    x;    tempB    =    intPartA    *    fracPartB    +    fracPartA    *    fracPartA    +    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
