bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  fracPartB  =  EXP_FRAC_TABLE_B[intFrac];  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  fracPartB  =  EXP_FRAC_TABLE_B[intFrac];  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  fracPartB  =  EXP_FRAC_TABLE_B[intFrac];	  final    double    fracPartB    =    ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[x];  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[x];  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[x];	  final    double    fracPartB    =    ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  1024.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  1024.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  *  1024.0);	  final    double    epsilon    =    fracPartA    -    (fracPartB    +    fracPartB    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
4	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  100.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  100.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  100.0);	  final    double    epsilon    =    fracPartA    -    (fracPartB    +    fracPartB    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
5	[BUG]  [BUGGY]  final  double  epsilon  =  z  -  (intVal  +  fracPartA  /  1024.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  z  -  (intVal  +  fracPartA  /  1024.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  z  -  (intVal  +  fracPartA  /  1024.0);	  final    double    epsilon    =    x    -    (intVal    +    fracPartA    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
6	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (intFrac  *  100.0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (intFrac  *  100.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (intFrac  *  100.0);	  final    double    epsilon    =    fracPartA    -    (intFrac    *    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartA  *  100.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartA  *  100.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartA  *  100.0);	  final    double    epsilon    =    fracPartA    -    (fracPartA    *    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
8	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  100.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  100.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  *  100.0);	  final    double    epsilon    =    fracPartA    -    (fracPartA    *    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
9	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  1000.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  1000.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  1000.0);	  final    double    epsilon    =    x    -    (intVal    +    intFrac    /    1000.0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  1000.0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  1000.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  1000.0);	  final    double    epsilon    =    x    -    (intVal    +    intFrac    /    1000.0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  1004.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  1004.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  1004.0);	  final    double    epsilon    =    x    -    (intVal    +    intFrac    /    1004.0);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
12	[BUG]  [BUGGY]  final  double  epsilon  =  z  -  (fracPartA  *  1024.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  z  -  (fracPartA  *  1024.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  z  -  (fracPartA  *  1024.0);	  final    double    epsilon    =    z    -    (fracPartA    +    fracPartB    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  final  double  epsilon  =  z  -  (fracPartA  +  fracPartB  /  100.0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  z  -  (fracPartA  +  fracPartB  /  100.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  z  -  (fracPartA  +  fracPartB  /  100.0);	  final    double    epsilon    =    z    -    (fracPartA    +    fracPartB    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  *  100.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  *  100.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (fracPartA  *  100.0);	  final    double    epsilon    =    x    -    (fracPartA    *    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartB  -  (intFrac  +  fracPartA  /  104.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartB  -  (intFrac  +  fracPartA  /  104.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartB  -  (intFrac  +  fracPartA  /  104.0);	  final    double    epsilon    =    fracPartA    -    (intFrac    +    fracPartB    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  104.0)+  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  104.0)+  1;  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  104.0)+  1;	  final    double    epsilon    =    fracPartA    -    (fracPartB    +    intFrac    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
17	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartB  -  (fracPartA  +  fracPartB  /  104.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartB  -  (fracPartA  +  fracPartB  /  104.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartB  -  (fracPartA  +  fracPartB  /  104.0);	  final    double    epsilon    =    fracPartA    -    (fracPartB    +    fracPartB    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
18	[BUG]  [BUGGY]  final  double  epsilon  =  z  -  (intVal  +  fracPartA  /  100.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  z  -  (intVal  +  fracPartA  /  100.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  z  -  (intVal  +  fracPartA  /  100.0);	  final    double    epsilon    =    x    -    (intVal    +    fracPartA    /    100.0);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  final  double  extra  =  ExpFracTable.EXP_FRAC_TABLE_B[fracPartA];  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  extra  =  ExpFracTable.EXP_FRAC_TABLE_B[fracPartA];  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  extra  =  ExpFracTable.EXP_FRAC_TABLE_B[fracPartA];	  final    double    extra    =    ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
20	[BUG]  [BUGGY]  final  double  extra  =  EXP_FRAC_TABLE_B[intFrac];  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  extra  =  EXP_FRAC_TABLE_B[intFrac];  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  extra  =  EXP_FRAC_TABLE_B[intFrac];	  final    double    extra    =    ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
21	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (intFrac  +  fracPartA  /  100.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (intFrac  +  fracPartA  /  100.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (intFrac  +  fracPartA  /  100.0);	  final    double    epsilon    =    x    -    (fracPartA    +    intFrac    /    100.0);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
22	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  ((  x  +  intVal  /  1024.0));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  ((  x  +  intVal  /  1024.0));  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  ((  x  +  intVal  /  1024.0));	  final    double    epsilon    =    fracPartA    -    ((    intFrac    +    intVal    /    1024.0));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
23	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  ((  intFrac  *  1024.0));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  ((  intFrac  *  1024.0));  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  ((  intFrac  *  1024.0));	  final    double    epsilon    =    fracPartA    -    ((    intFrac    +    intVal    /    1024.0));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
24	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  10240.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  10240.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  10240.0);	  final    double    epsilon    =    x    -    (intVal    +    intFrac    /    10240.0);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  10240.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  10240.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  10240.0);	  final    double    epsilon    =    x    -    (intVal    +    intFrac    /    10240.0);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  final  double  epsilon  =  z  -  (fracPartA  *  104.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  z  -  (fracPartA  *  104.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  z  -  (fracPartA  *  104.0);	  final    double    epsilon    =    x    -    (fracPartA    *    104.0);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (x  *  104.0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (x  *  104.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (x  *  104.0);	  final    double    epsilon    =    x    -    (fracPartA    *    104.0);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartA  +  fracPartB  /  104.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartA  +  fracPartB  /  104.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartA  +  fracPartB  /  104.0);	  final    double    epsilon    =    fracPartA    -    (fracPartA    +    intFrac    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
29	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartB  -  (intVal  +  fracPartA  /  104.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartB  -  (intVal  +  fracPartA  /  104.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartB  -  (intVal  +  fracPartA  /  104.0);	  final    double    epsilon    =    fracPartA    -    (intVal    +    fracPartB    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
30	[BUG]  [BUGGY]  final  double  epsilon  =  z  -  (fracPartA  +  fracPartB  /  104.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  z  -  (fracPartA  +  fracPartB  /  104.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  z  -  (fracPartA  +  fracPartB  /  104.0);	  final    double    epsilon    =    x    -    (fracPartA    +    fracPartB    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  104.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  104.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  *  104.0);	  final    double    epsilon    =    fracPartA    -    (intFrac    *    104.0);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
32	[BUG]  [BUGGY]  final  double  fracPartA  =  EXP_FRAC_TABLE_B[intFrac];  final  double  fracPartB  =  EXP_FRAC_TABLE_B[intFrac];  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  fracPartA  =  EXP_FRAC_TABLE_B[intFrac];  final  double  fracPartB  =  EXP_FRAC_TABLE_B[intFrac];  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  fracPartA  =  EXP_FRAC_TABLE_B[intFrac];  final  double  fracPartB  =  EXP_FRAC_TABLE_B[intFrac];	  final    double    fracPartA    =    ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    final    double    fracPartB    =    ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
33	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (x  +  intVal  /  1024.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (x  +  intVal  /  1024.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (x  +  intVal  /  1024.0);	  final    double    epsilon    =    fracPartA    -    (x    +    intFrac    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
34	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (x  +  intVal  /  100.0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (x  +  intVal  /  100.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (x  +  intVal  /  100.0);	  final    double    epsilon    =    fracPartA    -    (x    +    intFrac    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  ((  x  +  intVal  /  104.0));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  ((  x  +  intVal  /  104.0));  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  ((  x  +  intVal  /  104.0));	  final    double    epsilon    =    fracPartA    -    ((    intFrac    +    intVal    /    1024.0));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
36	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  fracPartB  /  104.0)+  10.0;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  fracPartB  /  104.0)+  10.0;  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (fracPartA  +  fracPartB  /  104.0)+  10.0;	  final    double    epsilon    =    x    -    (fracPartA    +    fracPartB    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartA  /  104.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartA  /  104.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartA  /  104.0);	  final    double    epsilon    =    fracPartA    -    (intVal    +    fracPartB    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
38	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  104.0)+  10.0;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  104.0)+  10.0;  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  104.0)+  10.0;	  final    double    epsilon    =    fracPartA    -    (fracPartB    +    intFrac    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
39	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  1000.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  1000.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  1000.0);	  final    double    epsilon    =    x    -    (intVal    +    intFrac    /    1000.0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  10240.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  10240.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  10240.0);	  final    double    epsilon    =    x    -    (intVal    +    intFrac    /    10240.0);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  *  1000.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  *  1000.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (fracPartA  *  1000.0);	  final    double    epsilon    =    x    -    (fracPartA    *    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
42	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intVal  /  1024.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intVal  /  1024.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (fracPartA  +  intVal  /  1024.0);	  final    double    epsilon    =    x    -    (intVal    +    fracPartA    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
43	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  104.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  104.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (intVal  +  fracPartA  /  104.0);	  final    double    epsilon    =    x    -    (intVal    +    fracPartA    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
44	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  1004.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  1004.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  1004.0);	  final    double    epsilon    =    x    -    (intVal    +    intFrac    /    1004.0);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
45	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  intFrac  /  104.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  intFrac  /  104.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  *  intFrac  /  104.0);	  final    double    epsilon    =    fracPartA    -    (fracPartA    *    intFrac    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
46	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  intFrac  /  100.0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  intFrac  /  100.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  *  intFrac  /  100.0);	  final    double    epsilon    =    fracPartA    -    (fracPartA    *    intFrac    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
47	[BUG]  [BUGGY]  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  104.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  104.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	double  epsilon  =  x  -  (fracPartA  +  intFrac  /  104.0);	  double    epsilon    =    x    -    (fracPartA    +    intFrac    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
48	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  1000.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  1000.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  *  1000.0);	  final    double    epsilon    =    fracPartA    -    (fracPartA    *    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intVal  /  100.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intVal  /  100.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (fracPartA  +  intVal  /  100.0);	  final    double    epsilon    =    x    -    (intVal    +    fracPartA    /    100.0);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
50	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (intVal  +  fracPartB  /  100.0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (intVal  +  fracPartB  /  100.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (intVal  +  fracPartB  /  100.0);	  final    double    epsilon    =    x    -    (intVal    +    fracPartA    /    100.0);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
51	[BUG]  [BUGGY]  double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  104.0)+  10.0;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  104.0)+  10.0;  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  104.0)+  10.0;	  double    epsilon    =    fracPartA    -    (intVal    +    intFrac    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
52	[BUG]  [BUGGY]  final  double  fracPartA  =  EXP_FRACTable.EXP_FRAC_TABLE_B[intFrac];  final  double  fracPartB  =  EXP_FRAC_TABLE_B[intFrac];  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  fracPartA  =  EXP_FRACTable.EXP_FRAC_TABLE_B[intFrac];  final  double  fracPartB  =  EXP_FRAC_TABLE_B[intFrac];  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  fracPartA  =  EXP_FRACTable.EXP_FRAC_TABLE_B[intFrac];  final  double  fracPartB  =  EXP_FRAC_TABLE_B[intFrac];	  final    double    fracPartA    =    ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    final    double    fracPartB    =    ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
53	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartB  -  (fracPartA  *  1024.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartB  -  (fracPartA  *  1024.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartB  -  (fracPartA  *  1024.0);	  final    double    epsilon    =    fracPartA    -    (fracPartB    +    fracPartB    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
54	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (x  *  intFrac  /  1024.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (x  *  intFrac  /  1024.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (x  *  intFrac  /  1024.0);	  final    double    epsilon    =    fracPartA    -    (x    +    intFrac    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
55	[BUG]  [BUGGY]  double  epsilon  =  fracPartA  -  (intVal  +  fracPartB  /  104.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  double  epsilon  =  fracPartA  -  (intVal  +  fracPartB  /  104.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	double  epsilon  =  fracPartA  -  (intVal  +  fracPartB  /  104.0);	  double    epsilon    =    fracPartA    -    (intVal    +    intFrac    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
56	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  2.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  2.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  +  fracPartB  /  2.0);	  final    double    epsilon    =    fracPartA    -    (fracPartB    +    fracPartB    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
57	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  fracPartB  /  104.0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  fracPartB  /  104.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  *  fracPartB  /  104.0);	  final    double    epsilon    =    fracPartA    -    (fracPartB    +    fracPartB    /    104.0);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
58	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  fracPartB  /  1024.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (fracPartB  *  fracPartB  /  1024.0);  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (fracPartB  *  fracPartB  /  1024.0);	  final    double    epsilon    =    fracPartA    -    (fracPartA    *    intFrac    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
59	[BUG]  [BUGGY]  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intVal];  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intVal];  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intVal];	  final    double    fracPartB    =    ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
60	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (intVal  +  fracPartB  /  100.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (intVal  +  fracPartB  /  100.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (intVal  +  fracPartB  /  100.0);	  final    double    epsilon    =    fracPartA    -    (intVal    +    intFrac    /    100.0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
61	[BUG]  [BUGGY]  double  epsilon  =  fracPartA  -  (intVal  +  fracPartB  /  1024.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  double  epsilon  =  fracPartA  -  (intVal  +  fracPartB  /  1024.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	double  epsilon  =  fracPartA  -  (intVal  +  fracPartB  /  1024.0);	  double    epsilon    =    fracPartA    -    (intVal    +    intFrac    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
62	[BUG]  [BUGGY]  final  double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  1004.0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  1004.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  fracPartA  -  (intVal  +  intFrac  /  1004.0);	  final    double    epsilon    =    x    -    (intVal    +    intFrac    /    1004.0);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
63	[BUG]  [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intVal  /  104.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  epsilon  =  x  -  (fracPartA  +  intVal  /  104.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  epsilon  =  x  -  (fracPartA  +  intVal  /  104.0);	  final    double    epsilon    =    x    -    (intVal    +    fracPartA    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
64	[BUG]  [BUGGY]  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];  [BUGGY]        full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];	  final    double    fracPartA    =    ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    final    double    fracPartB    =    ExpFracTable.EXP_FRAC_TABLE_B[intFrac];    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
65	[BUG]  [BUGGY]  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  1004.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  int  intFrac  =  (int)  ((x  -  intVal)  *  1024.0);  final  double  fracPartA  =  ExpFracTable.EXP_FRAC_TABLE_A[intFrac];  final  double  fracPartB  =  ExpFracTable.EXP_FRAC_TABLE_B[intFrac];          [BUGGY]  double  epsilon  =  x  -  (fracPartA  +  intFrac  /  1004.0);  [BUGGY]      final  double  epsilon  =  x  -  (intVal  +  intFrac  /  1024.0);  full  double  precision  (52  bits).Since  z  <  2^-10,  we  will  have  62  bits  of  precision  when  combined  with  the  contant  1.This  will  be  used  in  the  last  addition  below  to  get  proper  rounding.  */  is  less  than  0.5  ULP  */  double  z  =  0.04168701738764507;  z  =  z  *  epsilon  +  0.1666666505023083;  [CLASS]  FastMath  ExpIntTable  ExpFracTable  lnMant  CodyWaite  [METHOD]  exp  [RETURN_TYPE]  double  double  x  double  extra  double[]  hiPrec  [VARIABLES]  boolean  RECOMPUTE_TABLES_AT_RUNTIME  negate  negative  double[]  CBRTTWO  COSINE_TABLE_A  COSINE_TABLE_B  EIGHTHS  EXP_FRAC_TABLE_A  EXP_FRAC_TABLE_B  EXP_INT_TABLE_A  EXP_INT_TABLE_B  SINE_TABLE_A  SINE_TABLE_B  TANGENT_TABLE_A  TANGENT_TABLE_B  hiPrec  long[]  PI_O_4_BITS  RECIP_2PI  double  E  F_11_12  F_13_14  F_15_16  F_1_11  F_1_13  F_1_15  F_1_17  F_1_2  F_1_3  F_1_4  F_1_5  F_1_7  F_1_9  F_3_4  F_5_6  F_7_8  F_9_10  LN_2_A  LN_2_B  PI  TWO_POWER_52  a  a2  absAsinh  absAtanh  b  d  da  daa  dab  db  denom  denomb  denomr  epsilon  extra  finalRemA  finalRemB  fracPartA  fracPartB  intPartA  intPartB  na  nb  ra  ratio  ratioa  ratiob  rb  recip  recipa  recipb  remA  remB  result  temp  tempA  tempB  tempC  x  xa  xb  ya  yaa  yab  yb  z  za  zb  double[][]  LN_HI_PREC_COEF  LN_MANT  LN_QUICK_COEF  int  EXP_FRAC_TABLE_LEN  EXP_INT_TABLE_LEN  EXP_INT_TABLE_MAX_INDEX  LN_MANT_LEN  SINE_TABLE_LEN  finalK  intFrac  intVal  k  long  HEX_40000000  MASK_30BITS  xl  	projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java	0.4082482904638631	893	893	2	replace	double  epsilon  =  x  -  (fracPartA  +  intFrac  /  1004.0);	  double    epsilon    =    x    -    (fracPartA    +    intFrac    /    1024.0);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
