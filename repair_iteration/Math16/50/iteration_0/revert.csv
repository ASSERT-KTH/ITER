projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284if(lnMant==null){for(inti=0;i<lnMant.size();++i){returnEIGHTHS[i];}
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284if(lnMant==null){for(inti=0;i<lnMant;i++){ExpFracTable.this.removeChangeListener(this);}
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284if(lnMant==null){for(inti=0;i<lnMant;i++){ExpFracTable.this.remove(i);}
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284privatestaticfinaldoubleEIGHTHS[]={0,0.125,0.25,0.375,0.5,0.625,0.75,0.875,1.0,1.125,1.25,1.375,1.5,1.625};
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284privatestaticfinaldoubleEIGHTHS[]={0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.25,1.375,1.5,1.625};
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284privatestaticfinaldoubleEIGHTHS[]={0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.25,1.5,1.625};
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284if(lnMant==null){returnEIGHTHS[];}
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284if(lnMant==null){returnEIGHTHS[0];}
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284nan
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284privatestaticfinaldoubleEIGHTHS[]={0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.625,1.625};
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284privatestaticfinaldoubleEIGHTHS[]={0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.625,1.625};
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284if(ExpIntTable.class.isAssignableFrom("EIGHTHS")){returnEIGHTHS[];}else{for(inti=0;i<EIGHTHS.length;++i){returnEIGHTHS[i];}
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284if(ExpIntTable.class.isAssignableFrom("EIGHTHS")){returnEIGHTHS[];}else{for(inti=0;i<EIGHTHS.length;++i){returnEIGHTHS[i]*Math.
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284if(ExpIntTable.class.isAssignableFrom("EIGHTHS")){returnEIGHTHS[];}else{for(inti=0;i<EIGHTHS.length;++i){returnEIGHTHS[i]*2;}
projects/Math16/src/main/java/org/apache/commons/math3/util/FastMath.java284privatestaticfinaldoubleEIGHTHS[]={0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.625};
