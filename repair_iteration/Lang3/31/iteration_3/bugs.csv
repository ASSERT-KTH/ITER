bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('E')+  str.indexOf('E')-  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.lastIndexOf('E')+  str.indexOf('E')-  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.lastIndexOf('E')+  str.indexOf('E')-  1;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')-    1;    	non-compiled	[CE]  ')'  expected	53	None	replace
2	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e',  mant);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e',  mant);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e',  mant);	  final    int    decPos    =    str.indexOf('e',    lastChar);    	non-compiled	[CE]  ')'  expected	32	None	replace
3	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e',  'E');  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e',  'E');  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e',  'E');	  final    int    decPos    =    str.indexOf('e',    lastChar);    	non-compiled	[CE]  ')'  expected	32	None	replace
4	[BUG]  [BUGGY]  final  int  decPos  =  str.lastIndexOf('e',  lastChar);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.lastIndexOf('e',  lastChar);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.lastIndexOf('e',  lastChar);	  final    int    decPos    =    str.indexOf('e',    lastChar);    	non-compiled	[CE]  ')'  expected	32	None	replace
5	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  mant);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.',  mant);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.',  mant);	  final    int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	5	None	replace
6	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  descPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.',  descPos);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.',  descPos);	  final    int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	5	None	replace
7	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.')+  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.')+  2;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.')+  2;	  final    int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	6	None	replace
8	[BUG]  [BUGGY]  final  int  decPos  =  str.lastIndexOf('.')+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.lastIndexOf('.')+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.lastIndexOf('.')+  1;	  final    int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	6	None	replace
9	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')+  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')+  2;	  final    int    expPos    =    str.indexOf('e',    firstChar)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	47	None	replace
10	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')/  1;	  final    int    expPos    =    str.indexOf('e',    firstChar)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	47	None	replace
11	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  4;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  4;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  4;	  final    int    expPos    =    str.indexOf('e')/    2    +    str.indexOf('E')/    2;    	non-compiled	[CE]  ')'  expected	52	None	replace
12	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  3;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  3;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  3;	  final    int    expPos    =    str.indexOf('e')/    2    +    str.indexOf('E')/    2;    	non-compiled	[CE]  ')'  expected	52	None	replace
13	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E',  decPos)/  2;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E',  decPos)/  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E',  decPos)/  2;	  final    int    expPos    =    str.indexOf('e')/    2    +    str.indexOf('E')/    2;    	non-compiled	[CE]  ')'  expected	52	None	replace
14	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  1;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	14	None	replace
15	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  4;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  4;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  4;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	14	None	replace
16	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  3;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  3;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  3;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	14	None	replace
17	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e')+  2;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e')+  2;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e')+  2;	  final    int    decPos    =    str.indexOf('e')+    1;    	non-compiled	[CE]  ')'  expected	31	None	replace
18	[BUG]  [BUGGY]  final  int  decPos  =  str.lastIndexOf('e')+  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.lastIndexOf('e')+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.lastIndexOf('e')+  1;	  final    int    decPos    =    str.indexOf('e')+    1;    	non-compiled	[CE]  ')'  expected	31	None	replace
19	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  decPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  decPos);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.lastIndexOf('.',  decPos);	  final    int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	9	None	replace
20	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('.',  decPos  +  1);	  final    int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	9	None	replace
21	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos  -  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('.',  decPos  -  1);	  final    int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	9	None	replace
22	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  2;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  2;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('.')+  2;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	8	None	replace
23	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.')+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.')+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.lastIndexOf('.')+  1;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	8	None	replace
24	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e'  +  mant);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e'  +  mant);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e'  +  mant);	  final    int    decPos    =    str.indexOf('e'    +    lastChar);    	non-compiled	[CE]  ')'  expected	37	None	replace
25	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e')+  lastChar;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e')+  lastChar;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e')+  lastChar;	  final    int    decPos    =    str.indexOf('e'    +    lastChar);    	non-compiled	[CE]  ')'  expected	37	None	replace
26	[BUG]  [BUGGY]  final  int  numDecimals  =  str.lastIndexOf('-',  decPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.lastIndexOf('-',  decPos);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.lastIndexOf('-',  decPos);	  final    int    numDecimals    =    str.lastIndexOf('-');    	non-compiled	[CE]  ')'  expected	3	None	replace
27	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf(')',  decPos);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf(')',  decPos);  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf(')',  decPos);	  final    int    expPos    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	25	None	replace
28	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf(')');  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.lastIndexOf(')');  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.lastIndexOf(')');	  final    int    expPos    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	25	None	replace
29	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf(')'  -  1;  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf(')'  -  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf(')'  -  1;	  final    int    expPos    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	25	None	replace
30	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.charAt(str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.charAt(str.indexOf('E')/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')/  2  +  str.charAt(str.indexOf('E')/  1;	  final    int    expPos    =    str.indexOf('e')/    2    +    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	51	None	replace
31	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  2;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  2;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  ')'  expected	22	None	replace
32	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  lastChar)/  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  lastChar)/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  lastChar)/  1;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  ')'  expected	22	None	replace
33	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  2;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  2;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  ')'  expected	22	None	replace
34	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  lastChar)/  1;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  lastChar)/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  lastChar)/  1;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  ')'  expected	22	None	replace
35	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ',  decPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('  ',  decPos);  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf('  ',  decPos);	  int    expPos    =    str.indexOf('    ');    	non-compiled	[CE]  ')'  expected	34	None	replace
36	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('  ');  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('  ');  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('  ');	  int    expPos    =    str.indexOf('    ');    	non-compiled	[CE]  ')'  expected	34	None	replace
37	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('  ');  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.lastIndexOf('  ');  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.lastIndexOf('  ');	  int    expPos    =    str.indexOf('    ');    	non-compiled	[CE]  ')'  expected	34	None	replace
38	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ',  lastChar);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('  ',  lastChar);  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf('  ',  lastChar);	  int    expPos    =    str.indexOf('    ');    	non-compiled	[CE]  ')'  expected	34	None	replace
39	[BUG]  [BUGGY]  final  int  numDecimals  =  str.length()  +  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.length()  +  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.length()  +  1;	  final    int    numDecimals    =    str.length();    	non-compiled	[CE]  ')'  expected	18	None	replace
40	[BUG]  [BUGGY]  final  int  numDecimals  =  str.length()  -  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.length()  -  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.length()  -  1;	  final    int    numDecimals    =    str.length();    	non-compiled	[CE]  ')'  expected	18	None	replace
41	[BUG]  [BUGGY]  final  int  numDecimals  =  str.length()  +  2;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.length()  +  2;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.length()  +  2;	  final    int    numDecimals    =    str.length();    	non-compiled	[CE]  ')'  expected	18	None	replace
42	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('.')+  2;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('.')+  2;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('.')+  2;	  final    int    numDecimals    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	11	None	replace
43	[BUG]  [BUGGY]  final  int  numDecimals  =  str.lastIndexOf('.')+  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.lastIndexOf('.')+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.lastIndexOf('.')+  1;	  final    int    numDecimals    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	11	None	replace
44	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')+  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')+  2;	  final    int    expPos    =    str.indexOf('e',    'E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	27	None	replace
45	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')/  1;	  final    int    expPos    =    str.indexOf('e',    'E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	27	None	replace
46	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E',  'E')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E',  'E')+  str.indexOf('E')+  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E',  'E')+  str.indexOf('E')+  1;	  final    int    expPos    =    str.indexOf('e',    'E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	27	None	replace
47	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2  +  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2  +  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2  +  1;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    2;    	non-compiled	[CE]  ')'  expected	19	None	replace
48	[BUG]  [BUGGY]  final  int  decPos  =  str.lastIndexOf('.',  mant);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.lastIndexOf('.',  mant);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.lastIndexOf('.',  mant);	  final    int    decPos    =    str.lastIndexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	45	None	replace
49	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  lastChar)+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.',  lastChar)+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.',  lastChar)+  1;	  final    int    decPos    =    str.lastIndexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	45	None	replace
50	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  descPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.',  descPos  +  1);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.',  descPos  +  1);	  final    int    decPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	50	None	replace
51	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  DEC_POP);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.',  DEC_POP);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.',  DEC_POP);	  final    int    decPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	50	None	replace
52	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E',  decPos)+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E',  decPos)+  str.indexOf('E')+  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E',  decPos)+  str.indexOf('E')+  1;	  final    int    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	26	None	replace
53	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-'  +  mant);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-'  +  mant);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-'  +  mant);	  final    int    numDecimals    =    str.indexOf('-'    +    lastChar);    	non-compiled	[CE]  ')'  expected	41	None	replace
54	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-'  +  decPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-'  +  decPos);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-'  +  decPos);	  final    int    numDecimals    =    str.indexOf('-'    +    lastChar);    	non-compiled	[CE]  ')'  expected	41	None	replace
55	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-')+  lastChar;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-')+  lastChar;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-')+  lastChar;	  final    int    numDecimals    =    str.indexOf('-'    +    lastChar);    	non-compiled	[CE]  ')'  expected	41	None	replace
56	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf(')');  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf(')');  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf(')');	  final    int    numDecimals    =    str.size()    -    1;    	non-compiled	[CE]  ')'  expected	17	None	replace
57	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-')-  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-')-  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-')-  1;	  final    int    numDecimals    =    str.size()    -    1;    	non-compiled	[CE]  ')'  expected	17	None	replace
58	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos);  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf('.',  decPos);	  int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	24	None	replace
59	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.');  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.lastIndexOf('.');  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.lastIndexOf('.');	  int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	24	None	replace
60	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  lastChar);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.',  lastChar);  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf('.',  lastChar);	  int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	24	None	replace
61	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')/  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')/  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')/  2;	  final    int    expPos    =    str.indexOf('e',    lastChar)+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	48	None	replace
62	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')/  1;	  final    int    expPos    =    str.indexOf('e',    lastChar)+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	48	None	replace
63	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  lastChar)+  str.charAt(lastChar)/  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  lastChar)+  str.charAt(lastChar)/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  lastChar)+  str.charAt(lastChar)/  1;	  final    int    expPos    =    str.indexOf('e',    lastChar)+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	48	None	replace
64	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')/  2;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')/  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')/  2;	  final    int    expPos    =    str.indexOf('e',    lastChar)+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	48	None	replace
65	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2  +  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2  +  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2  +  1;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    2;    	non-compiled	[CE]  ')'  expected	20	None	replace
66	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('.',  mant);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('.',  mant);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('.',  mant);	  final    int    numDecimals    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	43	None	replace
67	[BUG]  [BUGGY]  final  int  numDecimals  =  str.lastIndexOf('.',  lastChar);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.lastIndexOf('.',  lastChar);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.lastIndexOf('.',  lastChar);	  final    int    numDecimals    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	43	None	replace
68	[BUG]  [BUGGY]  int  numDecimals  =  str.indexOf('.',  decPos);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  numDecimals  =  str.indexOf('.',  decPos);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  numDecimals  =  str.indexOf('.',  decPos);	  final    int    numDecimals    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	43	None	replace
69	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-',  decPos);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('-',  decPos);  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf('-',  decPos);	  int    expPos    =    str.indexOf('-');    	non-compiled	[CE]  ')'  expected	36	None	replace
70	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('-');  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('-');  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('-');	  int    expPos    =    str.indexOf('-');    	non-compiled	[CE]  ')'  expected	36	None	replace
71	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('-');  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.lastIndexOf('-');  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.lastIndexOf('-');	  int    expPos    =    str.indexOf('-');    	non-compiled	[CE]  ')'  expected	36	None	replace
72	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-',  lastChar);  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('-',  lastChar);  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf('-',  lastChar);	  int    expPos    =    str.indexOf('-');    	non-compiled	[CE]  ')'  expected	36	None	replace
73	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  mant);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('.',  mant);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('.',  mant);	  final    int    expPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	7	None	replace
74	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  lastChar);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  lastChar);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.lastIndexOf('.',  lastChar);	  final    int    expPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	7	None	replace
75	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-')+  2;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-')+  2;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-')+  2;	  final    int    numDecimals    =    str.indexOf('-')+    1;    	non-compiled	[CE]  ')'  expected	2	None	replace
76	[BUG]  [BUGGY]  int  numDecimals  =  str.indexOf('-')+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  numDecimals  =  str.indexOf('-')+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  numDecimals  =  str.indexOf('-')+  1;	  final    int    numDecimals    =    str.indexOf('-')+    1;    	non-compiled	[CE]  ')'  expected	2	None	replace
77	[BUG]  [BUGGY]  final  int  decPos  =  str.lastIndexOf('.',  decPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.lastIndexOf('.',  decPos  +  1);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.lastIndexOf('.',  decPos  +  1);	  final    int    decPos    =    str.lastIndexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	29	None	replace
78	[BUG]  [BUGGY]  int  expPos  =  str.indexOf(')',  decPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf(')',  decPos);  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf(')',  decPos);	  int    expPos    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	23	None	replace
79	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf(')');  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.lastIndexOf(')');  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.lastIndexOf(')');	  int    expPos    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	23	None	replace
80	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('.',  decPos  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('.',  decPos  +  1);	  final    int    numDecimals    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	10	None	replace
81	[BUG]  [BUGGY]  final  int  numDecimals  =  str.lastIndexOf('.',  decPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.lastIndexOf('.',  decPos);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.lastIndexOf('.',  decPos);	  final    int    numDecimals    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	10	None	replace
82	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('.',  decPos)+  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('.',  decPos)+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('.',  decPos)+  1;	  final    int    numDecimals    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	10	None	replace
83	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  2;	  final    int    decPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	33	None	replace
84	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	  final    int    decPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	33	None	replace
85	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	  final    int    decPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	33	None	replace
86	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf(')';  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf(')';  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf(')';	  int    expPos    =    str.indexOf(')';    	non-compiled	[CE]  ')'  expected	35	None	replace
87	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf(')';  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.lastIndexOf(')';  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.lastIndexOf(')';	  int    expPos    =    str.indexOf(')';    	non-compiled	[CE]  ')'  expected	35	None	replace
88	[BUG]  [BUGGY]  int  expPos  =  str.indexOf(')'  +  decPos;  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf(')'  +  decPos;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf(')'  +  decPos;	  int    expPos    =    str.indexOf(')';    	non-compiled	[CE]  ')'  expected	35	None	replace
89	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-',  mant);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-',  mant);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-',  mant);	  final    int    numDecimals    =    str.indexOf('-',    lastChar);    	non-compiled	[CE]  ')'  expected	4	None	replace
90	[BUG]  [BUGGY]  final  int  numDecimals  =  str.lastIndexOf('-',  lastChar);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.lastIndexOf('-',  lastChar);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.lastIndexOf('-',  lastChar);	  final    int    numDecimals    =    str.indexOf('-',    lastChar);    	non-compiled	[CE]  ')'  expected	4	None	replace
91	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-',  decPos  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-',  decPos  +  1);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-',  decPos  +  1);	  final    int    numDecimals    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  ')'  expected	1	None	replace
92	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-',  descPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-',  descPos  +  1);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-',  descPos  +  1);	  final    int    numDecimals    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  ')'  expected	1	None	replace
93	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf(')'  +  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf(')'  +  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf(')'  +  1;	  final    int    numDecimals    =    str.indexOf(')';    	non-compiled	[CE]  ')'  expected	40	None	replace
94	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf(')',  decPos;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf(')',  decPos;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf(')',  decPos;	  final    int    numDecimals    =    str.indexOf(')';    	non-compiled	[CE]  ')'  expected	40	None	replace
95	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf(')',  decPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf(')',  decPos);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf(')',  decPos);	  final    int    numDecimals    =    str.indexOf(')';    	non-compiled	[CE]  ')'  expected	40	None	replace
96	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.'  +  mant);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.'  +  mant);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.'  +  mant);	  final    int    decPos    =    str.indexOf('.'    +    lastChar);    	non-compiled	[CE]  ')'  expected	42	None	replace
97	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.')+  lastChar;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.')+  lastChar;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.')+  lastChar;	  final    int    decPos    =    str.indexOf('.'    +    lastChar);    	non-compiled	[CE]  ')'  expected	42	None	replace
98	[BUG]  [BUGGY]  final  int  decPos  =  str.lastIndexOf('.'  +  lastChar);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.lastIndexOf('.'  +  lastChar);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.lastIndexOf('.'  +  lastChar);	  final    int    decPos    =    str.indexOf('.'    +    lastChar);    	non-compiled	[CE]  ')'  expected	42	None	replace
99	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e')+  numDecimals;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e')+  numDecimals;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e')+  numDecimals;	  final    int    decPos    =    str.indexOf('e'    +    lastChar);    	non-compiled	[CE]  ')'  expected	37	None	replace
100	[BUG]  [BUGGY]  final  char  decPos  =  str.indexOf('.',  decPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  char  decPos  =  str.indexOf('.',  decPos);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  char  decPos  =  str.indexOf('.',  decPos);	  final    int    decPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	50	None	replace
101	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e',  len);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e',  len);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e',  len);	  final    int    decPos    =    str.indexOf('e',    lastChar);    	non-compiled	[CE]  ')'  expected	32	None	replace
102	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.')+  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf('.')+  1;	  int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	24	None	replace
103	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.')+  1  +  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.')+  1  +  1;	  final    int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	6	None	replace
104	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  2;	  final    int    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	26	None	replace
105	[BUG]  [BUGGY]  final  char  numDecimals  =  str.indexOf('.',  lastChar);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  char  numDecimals  =  str.indexOf('.',  lastChar);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  char  numDecimals  =  str.indexOf('.',  lastChar);	  final    int    numDecimals    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	43	None	replace
106	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('.')+  1  +  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('.')+  1  +  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('.')+  1  +  1;	  final    int    numDecimals    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	11	None	replace
107	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-')+  1;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('-')+  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf('-')+  1;	  int    expPos    =    str.indexOf('-');    	non-compiled	[CE]  ')'  expected	36	None	replace
108	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-',  DEC_MINUS_ONE);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-',  DEC_MINUS_ONE);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-',  DEC_MINUS_ONE);	  final    int    numDecimals    =    str.indexOf('-',    lastChar);    	non-compiled	[CE]  ')'  expected	4	None	replace
109	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  0)/  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  0)/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  0)/  1;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	14	None	replace
110	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  1  +  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('.')+  1  +  1;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	8	None	replace
111	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  firstChar)+  str.charAt(lastChar)+  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  firstChar)+  str.charAt(lastChar)+  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  firstChar)+  str.charAt(lastChar)+  1;	  final    int    expPos    =    str.indexOf('e',    firstChar)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	47	None	replace
112	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E',  decPos)/  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E',  decPos)/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E',  decPos)/  1;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  ')'  expected	22	None	replace
113	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  decPos)/  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  decPos)/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  decPos)/  1;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  ')'  expected	22	None	replace
114	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')-  2;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')-  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')-  2;	  final    int    expPos    =    str.indexOf('e',    lastChar)+    str.indexOf('E')+    2;    	non-compiled	[CE]  ')'  expected	28	None	replace
115	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  '_');  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.',  '_');  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.',  '_');	  final    int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	5	None	replace
116	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  4  +  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  4  +  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  4  +  1;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    4;    	non-compiled	[CE]  ')'  expected	21	None	replace
117	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf(')',  lastChar);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf(')',  lastChar);  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf(')',  lastChar);	  final    int    expPos    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	25	None	replace
118	[BUG]  [BUGGY]  int  expPos  =  str.indexOf(')'  -  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf(')'  -  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf(')'  -  1;	  int    expPos    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	23	None	replace
119	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-',  decPos)+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-',  decPos)+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-',  decPos)+  1;	  final    int    numDecimals    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  ')'  expected	1	None	replace
120	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  0)-  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  0)-  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  0)-  1;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E')-    1;    	non-compiled	[CE]  ')'  expected	39	None	replace
121	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  4;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  4;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  4;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    3;    	non-compiled	[CE]  ')'  expected	15	None	replace
122	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')+  3;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')+  3;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')+  3;	  final    int    expPos    =    str.indexOf('e',    'E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	27	None	replace
123	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.charAt(str.indexOf('E')/  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.charAt(str.indexOf('E')/  1);  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')/  2  +  str.charAt(str.indexOf('E')/  1);	  final    int    expPos    =    str.indexOf('e')/    2    +    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	51	None	replace
124	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e')+  1  +  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e')+  1  +  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e')+  1  +  1;	  final    int    decPos    =    str.indexOf('e')+    1;    	non-compiled	[CE]  ')'  expected	31	None	replace
125	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('  ')+  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('  ')+  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf('  ')+  1;	  int    expPos    =    str.indexOf('    ');    	non-compiled	[CE]  ')'  expected	34	None	replace
126	[BUG]  [BUGGY]  int  expPos  =  str.indexOf(')'  +  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf(')'  +  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  expPos  =  str.indexOf(')'  +  1;	  int    expPos    =    str.indexOf(')';    	non-compiled	[CE]  ')'  expected	35	None	replace
127	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-')+  1  +  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-')+  1  +  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-')+  1  +  1;	  final    int    numDecimals    =    str.indexOf('-')+    1;    	non-compiled	[CE]  ')'  expected	2	None	replace
128	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  2  -  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  2  -  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  2  -  1;	  final    int    expPos    =    str.indexOf('e')/    2    +    str.indexOf('E')/    2;    	non-compiled	[CE]  ')'  expected	52	None	replace
129	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  3;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  3;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  3;	  final    int    decPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	33	None	replace
130	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  0)-  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  0)-  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  0)-  1;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')-    1;    	non-compiled	[CE]  ')'  expected	53	None	replace
131	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')-  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')-  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')-  1;	  final    int    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	26	None	replace
132	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')-  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')-  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')-  1;	  final    int    expPos    =    str.indexOf('e',    firstChar)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	47	None	replace
133	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)-  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)-  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)-  1;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E')-    1;    	non-compiled	[CE]  ')'  expected	39	None	replace
134	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('.')-  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('.')-  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('.')-  1;	  final    int    numDecimals    =    str.size()    -    1;    	non-compiled	[CE]  ')'  expected	17	None	replace
135	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('_')-  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('_')-  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('_')-  1;	  final    int    numDecimals    =    str.size()    -    1;    	non-compiled	[CE]  ')'  expected	17	None	replace
136	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-')/  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-')/  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-')/  1;	  final    int    numDecimals    =    str.indexOf('-')+    1;    	non-compiled	[CE]  ')'  expected	2	None	replace
137	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  0;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  0;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  0;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    0;    	non-compiled	[CE]  ')'  expected	46	None	replace
138	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')-  4;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')-  4;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')-  4;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    4;    	non-compiled	[CE]  ')'  expected	44	None	replace
139	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2  -  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2  -  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2  -  1;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    2;    	non-compiled	[CE]  ')'  expected	20	None	replace
140	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('.')/  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('.')/  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('.')/  1;	  final    int    numDecimals    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	11	None	replace
141	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e',  decPos);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e',  decPos);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e',  decPos);	  final    int    decPos    =    str.indexOf('e',    lastChar);    	non-compiled	[CE]  ')'  expected	32	None	replace
142	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e',  DEC_POP);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e',  DEC_POP);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e',  DEC_POP);	  final    int    decPos    =    str.indexOf('e',    lastChar);    	non-compiled	[CE]  ')'  expected	32	None	replace
143	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E',  decPos)/  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E',  decPos)/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E',  decPos)/  1;	  final    int    expPos    =    str.indexOf('e')/    2    +    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	51	None	replace
144	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  decPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.',  decPos  +  1);	  final    int    decPos    =    str.lastIndexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	29	None	replace
145	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  dec);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('.',  dec);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('.',  dec);	  final    int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  ')'  expected	5	None	replace
146	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)-  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)-  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)-  1;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')-    1;    	non-compiled	[CE]  ')'  expected	53	None	replace
147	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E'),  decPos  -  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E'),  decPos  -  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E'),  decPos  -  1;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')-    1;    	non-compiled	[CE]  ')'  expected	53	None	replace
148	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')/  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')/  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  firstChar)+  str.indexOf('E')/  2;	  final    int    expPos    =    str.indexOf('e',    lastChar)+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	48	None	replace
149	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  DEC_POP)+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  DEC_POP)+  str.indexOf('E')/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  DEC_POP)+  str.indexOf('E')/  1;	  final    int    expPos    =    str.indexOf('e',    lastChar)+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	48	None	replace
150	[BUG]  [BUGGY]  int  numDecimals  =  str.indexOf(')';  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  numDecimals  =  str.indexOf(')';  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  numDecimals  =  str.indexOf(')';	  final    int    numDecimals    =    str.indexOf(')';    	non-compiled	[CE]  ')'  expected	40	None	replace
151	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  3;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  3;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  3;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    3;    	non-compiled	[CE]  ')'  expected	38	None	replace
152	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2  -  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2  -  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2  -  1;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    2;    	non-compiled	[CE]  ')'  expected	19	None	replace
153	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E'),  decPos  /  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E'),  decPos  /  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E'),  decPos  /  1;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	14	None	replace
154	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf(')',  dec);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf(')',  dec);  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf(')',  dec);	  final    int    expPos    =    str.indexOf(')');    	non-compiled	[CE]  ')'  expected	25	None	replace
155	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('e')+  str.indexOf('E');  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('e')+  str.indexOf('E');  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('e')+  str.indexOf('E');	  final    int    decPos    =    str.indexOf('e'    +    lastChar);    	non-compiled	[CE]  ')'  expected	37	None	replace
156	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  2;	  final    int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    2;    	non-compiled	[CE]  ')'  expected	13	None	replace
157	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('0')+  str.indexOf('0')+  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('0')+  str.indexOf('0')+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('0')+  str.indexOf('0')+  1;	  final    int    numDecimals    =    str.size()    +    1;    	non-compiled	[CE]  ')'  expected	16	None	replace
158	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('0')+  str.indexOf('9')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('0')+  str.indexOf('9')+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('0')+  str.indexOf('9')+  1;	  final    int    numDecimals    =    str.size()    +    1;    	non-compiled	[CE]  ')'  expected	16	None	replace
159	[BUG]  [BUGGY]  final  int  numDecimals  =  str.indexOf('-')+  str.indexOf('-')+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  numDecimals  =  str.indexOf('-')+  str.indexOf('-')+  1;  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  numDecimals  =  str.indexOf('-')+  str.indexOf('-')+  1;	  final    int    numDecimals    =    str.size()    +    1;    	non-compiled	[CE]  ')'  expected	16	None	replace
160	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')-  2;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')-  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')-  2;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E')-    2;    	non-compiled	[CE]  ')'  expected	49	None	replace
161	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)-  2;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)-  2;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)-  2;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E')-    2;    	non-compiled	[CE]  ')'  expected	49	None	replace
162	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('-',  decPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  decPos  =  str.indexOf('-',  decPos);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  decPos  =  str.indexOf('-',  decPos);	  final    int    numDecimals    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  ')'  expected	1	None	replace
163	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')-  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')-  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E')-  1;	  final    int    expPos    =    str.indexOf('e',    'E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	27	None	replace
164	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos  +  1)/  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos  +  1)/  1;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos  +  1)/  1;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  ')'  expected	22	None	replace
165	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  4;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  4;  [BUGGY]          int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  4;	  final    int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    4;    	non-compiled	[CE]  ')'  expected	21	None	replace
166	[BUG]  [BUGGY]  int  numDecimals  =  str.indexOf('-',  decPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');      [BUGGY]  int  numDecimals  =  str.indexOf('-',  decPos);  [BUGGY]      final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	int  numDecimals  =  str.indexOf('-',  decPos);	  final    int    numDecimals    =    str.indexOf('-',    lastChar);    	non-compiled	[CE]  ')'  expected	4	None	replace
