bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)  //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset  	non-compiled	[CE]  ')'  expected	61	None	replace
2	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]      int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)  //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset  	non-compiled	[CE]  ')'  expected	61	None	replace
3	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  //  assumes  both  not  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  //  assumes  both  not  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)  [BUGGY]      int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  //  assumes  both  not  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)	final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)  //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset  	non-compiled	[CE]  ')'  expected	61	None	replace
4	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [BUGGY]      int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;	final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)  //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset  	non-compiled	[CE]  ')'  expected	61	None	replace
5	[BUG]  [BUGGY]    [CE]  ')'  expected  [FE]            AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]    [BUGGY]      int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	  	final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)  //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset  	non-compiled	[CE]  ')'  expected	61	None	replace
6	[BUG]  [BUGGY]    final  int  decPos  =  str.indexOf('.');  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]    final  int  decPos  =  str.indexOf('.');  [BUGGY]  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	    final  int  decPos  =  str.indexOf('.');		non-compiled	[CE]  ')'  expected	62	None	add
7	[BUG]  [BUGGY]    final  int  expPos  =  str.indexOf('.');  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]    final  int  expPos  =  str.indexOf('.');  [BUGGY]  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	    final  int  expPos  =  str.indexOf('.');		non-compiled	[CE]  ')'  expected	62	None	add
8	[BUG]  [BUGGY]    final  int  decPos  =  str.lastIndexOf('.');  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]    final  int  decPos  =  str.lastIndexOf('.');  [BUGGY]  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	    final  int  decPos  =  str.lastIndexOf('.');		non-compiled	[CE]  ')'  expected	62	None	add
9	[BUG]  [BUGGY]    final  int  numDecimals  =  str.indexOf('.');  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]    final  int  numDecimals  =  str.indexOf('.');  [BUGGY]  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	    final  int  numDecimals  =  str.indexOf('.');		non-compiled	[CE]  ')'  expected	62	None	add
10	[BUG]  [BUGGY]    final  int  decPos  =  str.indexOf('e');  [CE]  ')'  expected  [FE]            AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]    final  int  decPos  =  str.indexOf('e');  [BUGGY]  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	    final  int  decPos  =  str.indexOf('e');		non-compiled	[CE]  ')'  expected	62	None	add
11	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]  final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')+  1;  [BUGGY]      int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')+  1;	final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)  //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset  	non-compiled	[CE]  ')'  expected	61	None	replace
12	[BUG]  [BUGGY]    final  int  numDecimals  =  str.size();  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]    final  int  numDecimals  =  str.size();  [BUGGY]  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	    final  int  numDecimals  =  str.size();		non-compiled	[CE]  ')'  expected	62	None	add
13	[BUG]  [BUGGY]    final  int  numDecimals  =  str.indexOf('-');  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]    final  int  numDecimals  =  str.indexOf('-');  [BUGGY]  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)    //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	    final  int  numDecimals  =  str.indexOf('-');		non-compiled	[CE]  ')'  expected	62	None	add
14	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  if  (hexDigits  >  8)  {  //  too  many  for  an  int  return  createLong(str);  }  return  createInteger(str);  }  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;  [BUGGY]      int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;	final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present  //  if  both  e  and  E  are  present,  this  is  caught  by  the  checks  on  expPos  (which  prevent  IOOBE)  //  and  the  parsing  which  will  detect  if  e  or  E  appear  in  a  number  due  to  using  the  wrong  offset  	non-compiled	[CE]  ')'  expected	61	None	replace
