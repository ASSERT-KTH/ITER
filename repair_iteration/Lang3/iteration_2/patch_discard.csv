increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  }  ,if(decPos > -1 && expPos < str.length()) {
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length());
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1  -  1);  dec  =  str.substring(decPos  +  1,  exPos);  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1, expPos);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() + 1); exp = str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length())+ 1; exp = str.substring(expPos + 1, str.length());
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, ==  ,return createBigDecimal(str);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  <  -1  &&  expPos  <  str.length()  -  1)  {  ,if(expPos > -1 && expPos < -1 && expPos < str.length()) {
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 2);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); str.substring(str.charAt(0));
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()).toLowerCase();  ,exp = str.substring(expPos + 1, str.length() - 4).toLowerCase();
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()).toLowerCase();  ,exp = str.substring(expPos + 1, str.length() - 3).toLowerCase();
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(exp);  ,return f > 0.0? Float.parseFloat(mant): Float.parseFloat(exp);
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,        dec    =    str.substring(0,    expPos);    if(dec  ==  null)  {  dec  =  str.substring(0,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1,  str.length());  }  dec = str.substring(decPos - 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1); dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos - 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos); dec = str.substring(decPos + 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  -=  str.substring(0,  expPos  +  1);  ,exp = str.substring(0, expPos + 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  dec  ==  str.length())  {  ,if(expPos > -1 && expPos < -1 && expPos >= str.length()) {
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,        exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  '9');  ,exp = str.substring(0, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  '9');  ,exp = str.substring(0, str.length() - 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  '9');  ,exp = str.substring(0, str.length() + 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f),  Float.parseFloat(f);  ,if(dec == null || expPos > -1) { dec = str.substring(0, decPos); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); str.substring(expPos, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); str.substring(0, str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,        str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  =  createLong(str);  ,if(expPos > -1 && expPos < str.length()) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  =  createLong(str);  ,if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  ,if(decPos > -1 && expPos < -1 && expPos < str.length()) {
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() + 1); str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length())+ 1; str.substring(expPos + 1, str.length());
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,        str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1  -  1);  dec  =  str.substring(decPos  +  1  -  1);  ,dec = str.substring(decPos + 1, expPos); dec = str.substring(decPos + 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1  -  1);  dec  =  str.substring(decPos  +  1  -  1);  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allocAllZeros)))  {  ,if(dec == null) { if(expPos > -1 && expPos < -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  ,if(decPos > -1 && expPos < -1 && expPos < str.length() - 1) {
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant);  ,dec = str.substring(0, decPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant);  ,dec = str.substring(1, decPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant);  ,dec = str.substring(0, decPos + 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant);  ,dec = str.substring(0, decPos - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1  -  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1  -  1);  dec = str.substring(decPos + 1); dec = str.substring(decPos + 1, expPos);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length()); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length() - 1); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() + 1); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); exp = str.substring(1, str.length());
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos  +  1);  ,dec = str.substring(expPos - 1, decPos + 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos);  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos);  dec = str.substring(decPos - 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos);  dec = str.substring(decPos, expPos);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  ,if(!allZeros) {
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber,     dec  =  str.substring(0,  expPos);  exp  =  str.substring(expPos  +  1,  str.length());  ,dec = str.substring(0, expPos); exp = str.substring(expPos + 1, str.length() - 2);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     dec  =  str.substring(0,  expPos);  exp  =  str.substring(expPos  +  1,  str.length());  ,dec = str.substring(0, expPos); exp = str.substring(expPos + 1, str.length() - 10);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1  -  1);  dec  =  str.substring(decPos  +  1,  nFemExpPos);  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 1, expPos);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,        exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(decPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  ,if(expPos > -1 && expPos < -1 && expPos < str.length() - 1) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  ,if(expPos > -1 && expPos < -1) {
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, if(!(f.isInfinite()  ||  (f.booleanValue()  ==  0.0F  &&!allZeros)))  {  ,return createBigInteger(str);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(expPos  +  1  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos / 2);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  if(f.length()  ==  0)  ,mant = str.substring(decPos + 1, expPos);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  if(f.length()  ==  0)  ,dec = str.substring(decPos + 1, expPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e')-  1;  ,int fPos = str.lastIndexOf('e')- 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  0  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  ,return 0;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =(str  ==  null?  -1  :  str.length());  ,int fPos =(str == null? -1 : str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,        str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,        str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 2, str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!  ,if(expPos > -1 && expPos < decPos) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!  ,if(expPos > -1 && expPos < 0) {
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length()).toLowerCase();  ,exp = str.substring(expPos + 1, str.length() - 2).toLowerCase();
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length() + 1); exp = str.substring(expPos + 1, str.length());
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  0)  {  if(expPos  ==  0)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > 0) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e',  '-');  ,int fPos = str.lastIndexOf('e', '-');
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e')+  1;  ,int fPos = str.lastIndexOf('e')+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.length()  -  1;  ,int fPos = str.length();
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, createInteger(decPos,  str.substring(decPos  +  1,  expPos));  ,createInteger(dec = str.substring(decPos + 1, expPos));
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =(str  ==  null)?  -1  :  str.length();  ,int fPos =(str == null)? -1 : str.length();
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,exp    =    str.substring(expPos    +    1,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  dec = str.substring(decPos + 1, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 2);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  *  1,  expPos  -  1);  ,dec = str.substring(decPos * 2, expPos - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1  -  1);  dec  =  str.substring(decPos  +  1);  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     str.substring(decPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(decPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     str.substring(decPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec  =  str.substring(decPos);  dec = str.substring(decPos - 1);
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,        dec    =    str.substring(0,    expPos);    if(dec  ==  null)  {  dec  =  str.substring(0,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1,  str.length());  }  dec = str.substring(expPos - 1, decPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1  -  1);  dec = str.substring(decPos - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1  -  1);  dec = str.substring(decPos - 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1  -  1);  dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e');  ,int fPos = str.lastIndexOf('e');
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e');  ,int e = str.lastIndexOf('e');
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  ,if(dec == null && expPos > -1 && expPos < -1 && expPos < str.length() - 1) {
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(f  ==  null)  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  [Delete]  ,if(expPos > -1) { if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,        str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); str.substring(decPos + 1, str.length() - 1);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber,     if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  if(f.isInfinite())  {  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  ,if(f.isInfinite()) { if(!(f.isInfinite() ||(f.floatValue() == 0.0F &&!allZeros))) { return f; }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  str.length()  -  1)  {  ,if(decPos > -1 && expPos > -1 && str.length() > 1) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  str.length()  -  1)  {  ,if(expPos > -1 && expPos < -1 && str.length() > 1) {
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant);  ,dec = str.substring(decPos + 1, decPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant);  ,dec = str.substring(0, decPos)+ 1;
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos); if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,        str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e',  '0');  ,int fPos = str.lastIndexOf('e', '0');
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,        str.substring(decPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,        str.substring(decPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allocAllZeros)))  {  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  '9');  ,exp = str.substring(0, str.length())+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.length();  ,int fpPos = str.length();
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,        exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 10);
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); exp = str.substring(expPos - 1, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() + 1); exp = str.substring(expPos + 1, str.length() - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos + 1); if(expPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos + 1); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length() - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  >  -1)  {  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos + 1); if(expPos > -1) if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  +  1)  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createDouble(str);  }  ,if(expPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1  -  1);  int  expPos  =  str.indexOf('E',  'E')+  1;  ,dec = str.substring(decPos + 1, expPos - 1); int exPos = str.indexOf('E', 'E')+ 1;
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1  -  1);  int  expPos  =  str.indexOf('E')+  1;  ,dec = str.substring(decPos + 1, expPos - 1); int exPos = str.indexOf('E')+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant);  ,dec = mant.substring(0, decPos);
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() + 1); str.substring(0, str.length() - 1);
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,        dec    =    str.substring(0,    expPos);    if(dec  ==  null)  {  dec  =  str.substring(0,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1,  str.length());  }  dec = str.substring(decPos - 1, expPos + 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,        str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 2, expPos);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  -1)  {  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  exp  ==  null)  {  int  expPos  =  str.length();  if(expPos  >  -1  &&  expPos  <  str.length())  {  ,if(dec == null && expPos < str.length()) {
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,     str.substring(decPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(decPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length() - expPos);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  ,if(expPos > -1 && expPos >= str.length()) {
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length())+  1;  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length())+ 1; exp = str.substring(expPos + 1, str.length() + 1)+ 1;
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  1);  ,dec = str.substring(decPos + 1, expPos + 1);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  dec  =  str.substring(decPos  +  1,  expPos  -  1);  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 1, expPos * 2);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  str.length()  +  1)  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(expPos > -1 && expPos < str.length()) { if(dec == null && expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  >  -1)  {  if(decPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos + 1); if(expPos > -1) if(decPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testIsNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(expPos  +  1  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos + 3);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length())+  1;  exp  =  str.substring(0,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length()) + 1; exp = str.substring(0, str.length() + 1)+ 1;
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber,     dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1) if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(expPos > -1 && expPos < str.length() - 1) { if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos); if(expPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  '9');  ,exp = str.substring(expPos + 1, str.length() - 1);
increase failing tests,571,add, [FE] NumberFormatException testCreateNumber, ,        dec    =    str.substring(0,    expPos);    dec  =  str.substring(0,  expPos);  if(dec == null) { dec = str.substring(expPos + 1); dec = str.substring(decPos + 1, str.length() - 1); } else { throw new NumberFormatException(""); }
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  expPoses);  ,exp = str.substring(0, str.indexOf('n', expPos));
