bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  2;  [CE]  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')/    1;    	non-compiled	[CE]  	89	None	replace
2	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [CE]  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')/    1;    	non-compiled	[CE]  	89	None	replace
3	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [CE]  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')/    1;    	non-compiled	[CE]  	89	None	replace
4	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(0,  exp);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  mant  =  str.substring(0,  exp);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  mant  =  str.substring(0,  exp);	  Exponent    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	57	None	replace
5	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(1,  decPos);  [CE]  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  mant  =  str.substring(1,  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  mant  =  str.substring(1,  decPos);	  Exponent    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  	57	None	replace
6	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  1  +  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  1  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  decPos)+  1  +  1;	  int    expPos    =    str.indexOf('.',    expPos)+    1    +    1;    	non-compiled	[CE]  ')'  expected	64	None	replace
7	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  decPos  +  1);	  final    int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	46	None	replace
8	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  numDecimals);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  numDecimals);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  numDecimals);	  final    int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	46	None	replace
9	[BUG]  [BUGGY]  FragmentDecimal  exp  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  exp  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  exp  =  str.substring(decPos  +  1,  expPos  +  1);	  FragmentDecimal    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	86	None	replace
10	[BUG]  [BUGGY]  FragmentDecimal  exp  =  str.substring(0,  expPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  exp  =  str.substring(0,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  exp  =  str.substring(0,  expPos);	  FragmentDecimal    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	86	None	replace
11	[BUG]  [BUGGY]  FragmentDecimal  exp  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  exp  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  exp  =  str.substring(decPos  +  1,  expPos  +  2);	  FragmentDecimal    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	86	None	replace
12	[BUG]  [BUGGY]  FragmentDecimal  exp  =  str.substring(decPos  +  1,  expPos  -  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  exp  =  str.substring(decPos  +  1,  expPos  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  exp  =  str.substring(decPos  +  1,  expPos  -  1);	  FragmentDecimal    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	86	None	replace
13	[BUG]  [BUGGY]  if(decPos  <  expPos  &&  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  expPos  &&  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  expPos  &&  expPos  >  str.length())  {	  if(decPos    <    expPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	42	None	replace
14	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  expPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  expPos  =  str.indexOf('.',  expPos);	  FragmentDecimal    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	85	None	replace
15	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  expPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  expPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  expPos  =  str.indexOf('.',  expPos  +  1);	  FragmentDecimal    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	85	None	replace
16	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.lastIndexOf('.',  decPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  expPos  =  str.lastIndexOf('.',  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  expPos  =  str.lastIndexOf('.',  decPos);	  FragmentDecimal    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	85	None	replace
17	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  expPos  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  expPos  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  expPos  =  str.indexOf('.',  expPos  -  1);	  FragmentDecimal    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	85	None	replace
18	[BUG]  [BUGGY]  if(expPos  <  decPos  +  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  decPos  +  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  decPos  +  expPos  >  str.length())  {	  if(decPos    >    -1)    {    if(expPos    <    decPos    +    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	72	None	replace
19	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(mant  ==  null)  {  if(decPos  >  -1)  {	  if(decPos    >    -1)    {    if(expPos    <    decPos    +    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	72	None	replace
20	[BUG]  [BUGGY]  if(str.charAt(decPos)  ==  '-')  {  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(str.charAt(decPos)  ==  '-')  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(str.charAt(decPos)  ==  '-')  {	  if(decPos    >    -1)    {    if(expPos    <    decPos    +    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	72	None	replace
21	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  numDecimals;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.')+  numDecimals;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.')+  numDecimals;	  int    expPos    =    str.indexOf('.')+    decPos;    	non-compiled	[CE]  ')'  expected	53	None	replace
22	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  decPos  +  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.')+  decPos  +  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.')+  decPos  +  1;	  int    expPos    =    str.indexOf('.')+    decPos;    	non-compiled	[CE]  ')'  expected	53	None	replace
23	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  decPos;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  decPos;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  decPos;	  int    expPos    =    str.indexOf('.')+    decPos;    	non-compiled	[CE]  ')'  expected	53	None	replace
24	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos)+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos)+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  decPos)+  1;	  final    int    expPos    =    str.indexOf('.',    expPos)+    1;    	non-compiled	[CE]  ')'  expected	2	None	replace
25	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  expPos)+  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  expPos)+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.lastIndexOf('.',  expPos)+  1;	  final    int    expPos    =    str.indexOf('.',    expPos)+    1;    	non-compiled	[CE]  ')'  expected	2	None	replace
26	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos)+  2;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos)+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  expPos)+  2;	  final    int    expPos    =    str.indexOf('.',    expPos)+    1;    	non-compiled	[CE]  ')'  expected	2	None	replace
27	[BUG]  [BUGGY]  nisipet  =  str.charAt(decPos  +  1,  expPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  nisipet  =  str.charAt(decPos  +  1,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	nisipet  =  str.charAt(decPos  +  1,  expPos);	  nisipet    =    str.charAt(decPos    +    1);    	non-compiled	[CE]  ')'  expected	48	None	replace
28	[BUG]  [BUGGY]  nisipet  =  str.charAt(decPos  +  2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  nisipet  =  str.charAt(decPos  +  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	nisipet  =  str.charAt(decPos  +  2);	  nisipet    =    str.charAt(decPos    +    1);    	non-compiled	[CE]  ')'  expected	48	None	replace
29	[BUG]  [BUGGY]  nisipet  =  str.charAt(decPos  +  1)+  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  nisipet  =  str.charAt(decPos  +  1)+  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	nisipet  =  str.charAt(decPos  +  1)+  1;	  nisipet    =    str.charAt(decPos    +    1);    	non-compiled	[CE]  ')'  expected	48	None	replace
30	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  expPos)+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  expPos)+  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  expPos  =  str.indexOf('.',  expPos)+  1;	  FragmentDecimal    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  ')'  expected	87	None	replace
31	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  expPos  +  1)+  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  expPos  +  1)+  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  expPos  =  str.indexOf('.',  expPos  +  1)+  1;	  FragmentDecimal    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  ')'  expected	87	None	replace
32	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.lastIndexOf('.',  expPos)+  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  expPos  =  str.lastIndexOf('.',  expPos)+  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  expPos  =  str.lastIndexOf('.',  expPos)+  1;	  FragmentDecimal    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  ')'  expected	87	None	replace
33	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(decPos  +  1,  expPos  +  1);	  String    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	32	None	replace
34	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(decPos  +  1,  expPos  +  2);	  String    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	32	None	replace
35	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  decPos  +  1,  expPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  decPos  +  1,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  decPos  +  1,  expPos);	  String    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	32	None	replace
36	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  1)+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  1)+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  str.length()  -  1)+  1;	  String    exp    =    str.substring(0,    str.length())+    1;    	non-compiled	[CE]  ')'  expected	67	None	replace
37	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  +  1)+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  str.length()  +  1)+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  str.length()  +  1)+  1;	  String    exp    =    str.substring(0,    str.length())+    1;    	non-compiled	[CE]  ')'  expected	67	None	replace
38	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  2;	  Integer    expPos    =    str.indexOf('.',    decPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	36	None	replace
39	[BUG]  [BUGGY]  Context.checkArgument(decPos  >  expPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  >  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  >  expPos);	  Context.checkArgument(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	82	None	replace
40	[BUG]  [BUGGY]  Context.checkArgument(decPos  <  numDecimals);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  <  numDecimals);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  <  numDecimals);	  Context.checkArgument(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	82	None	replace
41	[BUG]  [BUGGY]  Context.checkArgument(decPos  >=  expPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  >=  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  >=  expPos);	  Context.checkArgument(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	82	None	replace
42	[BUG]  [BUGGY]  Context.checkArgument(decPos  <  =  expPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  <  =  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  <  =  expPos);	  Context.checkArgument(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	82	None	replace
43	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.  [CE]  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  	78	None	replace
44	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  ')'  expected	78	None	replace
45	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  ')'  expected	78	None	replace
46	[BUG]  [BUGGY]  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  ')'  expected	78	None	replace
47	[BUG]  [BUGGY]  if(numDecimals  >  0)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(numDecimals  >  0)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(numDecimals  >  0)  {	  if(expPos    >    -1)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
48	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(numDecimals  ==  0)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(numDecimals  ==  0)  {	  if(expPos    >    -1)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
49	[BUG]  [BUGGY]  if(decPos  >  -1  ||  expPos  <  decPos)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  >  -1  ||  expPos  <  decPos)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  >  -1  ||  expPos  <  decPos)  {	  if(expPos    >    -1)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
50	[BUG]  [BUGGY]  (mant  + "  is  not  a  valid  number.   ");  [CE]  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  (mant  + "  is  not  a  valid  number.   ");  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	(mant  + "  is  not  a  valid  number.   ");	  (str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  	49	None	replace
51	[BUG]  [BUGGY]  (str  + "  is  not  a  valid  number. ",  exp);  [CE]  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  (str  + "  is  not  a  valid  number. ",  exp);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	(str  + "  is  not  a  valid  number. ",  exp);	  (str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  	49	None	replace
52	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  decPos  +  1);	  int    expPos    =    str.indexOf('.',    expPos    +    1);    	non-compiled	[CE]  ')'  expected	50	None	replace
53	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  expPos  +  1);	  int    expPos    =    str.indexOf('.',    expPos    +    1);    	non-compiled	[CE]  ')'  expected	50	None	replace
54	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.',  expPos  +  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.',  expPos  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.',  expPos  +  1);	  int    expPos    =    str.indexOf('.',    expPos    +    1);    	non-compiled	[CE]  ')'  expected	50	None	replace
55	[BUG]  [BUGGY]  String  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  char    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	63	None	replace
56	[BUG]  [BUGGY]  final  char  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  char  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  char  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  char    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	63	None	replace
57	[BUG]  [BUGGY]  if(decPos  <  0  ||  expPos  >  str.indexOf('.'))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  0  ||  expPos  >  str.indexOf('.'))  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  0  ||  expPos  >  str.indexOf('.'))  {	  if(expPos    <    0    ||    expPos    >    str.indexOf('.'))    {    	non-compiled	[CE]  ')'  expected	84	None	replace
58	[BUG]  [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.')+  1)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.')+  1)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  0  ||  expPos  >  str.indexOf('.')+  1)  {	  if(expPos    <    0    ||    expPos    >    str.indexOf('.'))    {    	non-compiled	[CE]  ')'  expected	84	None	replace
59	[BUG]  [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.',  expPos))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.',  expPos))  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  0  ||  expPos  >  str.indexOf('.',  expPos))  {	  if(expPos    <    0    ||    expPos    >    str.indexOf('.'))    {    	non-compiled	[CE]  ')'  expected	84	None	replace
60	[BUG]  [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.',  expPos  +  1))  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.',  expPos  +  1))  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  0  ||  expPos  >  str.indexOf('.',  expPos  +  1))  {	  if(expPos    <    0    ||    expPos    >    str.indexOf('.'))    {    	non-compiled	[CE]  ')'  expected	84	None	replace
61	[BUG]  [BUGGY]  if(decPos  <  expPos  +  1  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  expPos  +  1  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  expPos  +  1  ||  expPos  >  str.length())  {	  if(expPos    <    decPos    +    1    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
62	[BUG]  [BUGGY]  if(decPos  <  decPos  +  1  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  decPos  +  1  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  decPos  +  1  ||  expPos  >  str.length())  {	  if(expPos    <    decPos    +    1    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
63	[BUG]  [BUGGY]  if(expPos  <  decPos  +  1  ||  expPos  >  str.length()  -  1)  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  decPos  +  1  ||  expPos  >  str.length()  -  1)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  decPos  +  1  ||  expPos  >  str.length()  -  1)  {	  if(expPos    <    decPos    +    1    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
64	[BUG]  [BUGGY]  if(expPos  >  -1  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  >  -1  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  >  -1  ||  expPos  >  str.length())  {	  if(expPos    >    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	75	None	replace
65	[BUG]  [BUGGY]  if(expPos  >  0  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  >  0  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  >  0  ||  expPos  >  str.length())  {	  if(expPos    >    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	75	None	replace
66	[BUG]  [BUGGY]  if(decPos  >  expPos  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  >  expPos  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  >  expPos  ||  expPos  >  str.length())  {	  if(expPos    >    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	75	None	replace
67	[BUG]  [BUGGY]  if(decPos  >  -1  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  >  -1  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  >  -1  ||  expPos  >  str.length())  {	  if(expPos    >    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	75	None	replace
68	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.');  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  decPos  =  str.indexOf('.');  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  decPos  =  str.indexOf('.');	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	77	None	replace
69	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  decPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  decPos);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	77	None	replace
70	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    2;    	non-compiled	[CE]  ')'  expected	8	None	replace
71	[BUG]  [BUGGY]  char  exp  =  str.substring(0,  str.length());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  exp  =  str.substring(0,  str.length());  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  exp  =  str.substring(0,  str.length());	  char    exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	90	None	replace
72	[BUG]  [BUGGY]  Character  exp  =  str.substring(0,  str.length()  -  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Character  exp  =  str.substring(0,  str.length()  -  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Character  exp  =  str.substring(0,  str.length()  -  1);	  char    exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	90	None	replace
73	[BUG]  [BUGGY]  Char  exp  =  str.substring(0,  str.length());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Char  exp  =  str.substring(0,  str.length());  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Char  exp  =  str.substring(0,  str.length());	  char    exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  ')'  expected	90	None	replace
74	[BUG]  [BUGGY]  char  decPos  =  str.substring(decPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  decPos  =  str.substring(decPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  decPos  =  str.substring(decPos  +  1);	  String    decPos    =    str.substring(decPos    +    1);    	non-compiled	[CE]  ')'  expected	15	None	replace
75	[BUG]  [BUGGY]  int  decPos  =  str.substring(decPos  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.substring(decPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.substring(decPos  +  1);	  String    decPos    =    str.substring(decPos    +    1);    	non-compiled	[CE]  ')'  expected	15	None	replace
76	[BUG]  [BUGGY]  String  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	  char    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	59	None	replace
77	[BUG]  [BUGGY]  final  char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	  char    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	59	None	replace
78	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;	  char    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	59	None	replace
79	[BUG]  [BUGGY]  Context.checkArgument(decPos  <  0  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  <  0  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  <  0  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  Context.checkArgument(decPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	76	None	replace
80	[BUG]  [BUGGY]  Context.checkArgument(decPos  <  1  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  <  1  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  <  1  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  Context.checkArgument(decPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	76	None	replace
81	[BUG]  [BUGGY]  Context.checkArgument(decPos  <  numDecimals  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  <  numDecimals  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  <  numDecimals  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  Context.checkArgument(decPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	76	None	replace
82	[BUG]  [BUGGY]  Context.checkArgument(decPos  <  =  expPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  <  =  expPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  <  =  expPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  Context.checkArgument(decPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	76	None	replace
83	[BUG]  [BUGGY]  FragmentDecimal  mant  =  str.substring(0,  expPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  mant  =  str.substring(0,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  mant  =  str.substring(0,  expPos);	  FragmentDecimal    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	56	None	replace
84	[BUG]  [BUGGY]  FragmentDecimal  mant  =  str.substring(0,  decPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  mant  =  str.substring(0,  decPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  mant  =  str.substring(0,  decPos  +  1);	  FragmentDecimal    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	56	None	replace
85	[BUG]  [BUGGY]  FragmentDecimal  mant  =  str.substring(1,  decPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  mant  =  str.substring(1,  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  mant  =  str.substring(1,  decPos);	  FragmentDecimal    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	56	None	replace
86	[BUG]  [BUGGY]  FragmentDecimal  mant  =  str.substring(0,  exp);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  mant  =  str.substring(0,  exp);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  mant  =  str.substring(0,  exp);	  FragmentDecimal    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	56	None	replace
87	[BUG]  [BUGGY]  String  str  =  str.substring(0,  expPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  str  =  str.substring(0,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  str  =  str.substring(0,  expPos);	  String    str    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	17	None	replace
88	[BUG]  [BUGGY]  String  str  =  str.substring(0,  decPos  +  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  str  =  str.substring(0,  decPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  str  =  str.substring(0,  decPos  +  1);	  String    str    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	17	None	replace
89	[BUG]  [BUGGY]  String  str  =  str.substring(0,  numDecimals);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  str  =  str.substring(0,  numDecimals);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  str  =  str.substring(0,  numDecimals);	  String    str    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	17	None	replace
90	[BUG]  [BUGGY]  String  str  =  str.substring(0,  decPos  -  1);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  str  =  str.substring(0,  decPos  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  str  =  str.substring(0,  decPos  -  1);	  String    str    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	17	None	replace
91	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	25	None	replace
92	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  numDecimals;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  numDecimals;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  numDecimals;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	25	None	replace
93	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	25	None	replace
94	[BUG]  [BUGGY]  Context.checkState(decPos  <  numDecimals);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkState(decPos  <  numDecimals);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkState(decPos  <  numDecimals);	  Context.checkState(decPos    <    decPos);    	non-compiled	[CE]  ')'  expected	16	None	replace
95	[BUG]  [BUGGY]  Context.checkState(decPos  <  decPos  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkState(decPos  <  decPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkState(decPos  <  decPos  +  1);	  Context.checkState(decPos    <    decPos);    	non-compiled	[CE]  ')'  expected	16	None	replace
96	[BUG]  [BUGGY]  Context.checkState(decPos  >  -1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkState(decPos  >  -1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkState(decPos  >  -1);	  Context.checkState(decPos    <    decPos);    	non-compiled	[CE]  ')'  expected	16	None	replace
97	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	10	None	replace
98	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  3;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  3;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  3;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	10	None	replace
99	[BUG]  [BUGGY]  if(decPos  <  numDecimals  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  numDecimals  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  numDecimals  ||  expPos  >  str.length())  {	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	70	None	replace
100	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  2);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  2);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  str.length()  -  2);	  String    exp    =    str.substring(0,    str.length());    	non-compiled	[CE]  ')'  expected	38	None	replace
101	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos.length());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  expPos.length());  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  expPos.length());	  String    exp    =    str.substring(0,    str.length());    	non-compiled	[CE]  ')'  expected	38	None	replace
102	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  exp);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.indexOf('.',  exp);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.indexOf('.',  exp);	  int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	18	None	replace
103	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  -  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  decPos  -  1);	  int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	7	None	replace
104	[BUG]  [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length()  +  1)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length()  +  1)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  0  ||  expPos  >  str.length()  +  1)  {	  if(decPos    <    0    ||    expPos    >    str.length()    -    1)    {    	non-compiled	[CE]  ')'  expected	69	None	replace
105	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  expPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  expPos  +  1);	  String    exp    =    str.substring(0,    expPos);    	non-compiled	[CE]  ')'  expected	34	None	replace
106	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos  +  2);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  expPos  +  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  expPos  +  2);	  String    exp    =    str.substring(0,    expPos);    	non-compiled	[CE]  ')'  expected	34	None	replace
107	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  expPos  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  expPos  -  1);	  String    exp    =    str.substring(0,    expPos);    	non-compiled	[CE]  ')'  expected	34	None	replace
108	[BUG]  [BUGGY]  String  expPos  =  str.indexOf('.',  expPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  expPos  =  str.indexOf('.',  expPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  expPos  =  str.indexOf('.',  expPos);	  char    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	66	None	replace
109	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.',  decPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.',  decPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.',  decPos);	  char    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	66	None	replace
110	[BUG]  [BUGGY]  final  char  expPos  =  str.indexOf('.',  expPos);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  char  expPos  =  str.indexOf('.',  expPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  char  expPos  =  str.indexOf('.',  expPos);	  char    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	66	None	replace
111	[BUG]  [BUGGY]  char  expPos  =  str.lastIndexOf('.',  expPos);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.lastIndexOf('.',  expPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.lastIndexOf('.',  expPos);	  char    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	66	None	replace
112	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos  -  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  expPos  -  1);	  int    expPos    =    str.indexOf('.',    expPos    -    1);    	non-compiled	[CE]  ')'  expected	51	None	replace
113	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  decPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  numDecimals  =  str.indexOf('.',  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	numDecimals  =  str.indexOf('.',  decPos);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  ')'  expected	79	None	replace
114	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.');  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  numDecimals  =  str.indexOf('.');  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	numDecimals  =  str.indexOf('.');	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  ')'  expected	79	None	replace
115	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  expPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  numDecimals  =  str.indexOf('.',  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	numDecimals  =  str.indexOf('.',  expPos);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  ')'  expected	79	None	replace
116	[BUG]  [BUGGY]  String  decPos  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  decPos  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  decPos  =  str.substring(decPos  +  1,  expPos  +  1);	  String    decPos    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	14	None	replace
117	[BUG]  [BUGGY]  int  decPos  =  str.substring(decPos  +  1,  expPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.substring(decPos  +  1,  expPos);	  String    decPos    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	14	None	replace
118	[BUG]  [BUGGY]  char  decPos  =  str.substring(decPos  +  1,  expPos);  [CE]  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  decPos  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  decPos  =  str.substring(decPos  +  1,  expPos);	  String    decPos    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  	14	None	replace
119	[BUG]  [BUGGY]  String  decPos  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  decPos  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  decPos  =  str.substring(decPos  +  1,  expPos  +  2);	  String    decPos    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	14	None	replace
120	[BUG]  [BUGGY]  Exponent  <  decPos  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  <  decPos  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  <  decPos  ||  expPos  >  str.length())  {	  Exponent    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	83	None	replace
121	[BUG]  [BUGGY]  Exponent  <  decPos  &&  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  <  decPos  &&  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  <  decPos  &&  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  Exponent    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	83	None	replace
122	[BUG]  [BUGGY]  double  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  double  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	double  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	  float    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	58	None	replace
123	[BUG]  [BUGGY]  final  float  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  float  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  float  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	  float    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	58	None	replace
124	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    2;    	non-compiled	[CE]  ')'  expected	61	None	replace
125	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    2;    	non-compiled	[CE]  ')'  expected	61	None	replace
126	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  1));  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  1));  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  str.length()  -  1));	  String    exp    =    str.substring(0,    str.length()));    	non-compiled	[CE]  ')'  expected	40	None	replace
127	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos.length()));  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  expPos.length()));  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  expPos.length()));	  String    exp    =    str.substring(0,    str.length()));    	non-compiled	[CE]  ')'  expected	40	None	replace
128	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos).trim());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  expPos).trim());  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  expPos).trim());	  String    exp    =    str.substring(0,    str.length()));    	non-compiled	[CE]  ')'  expected	40	None	replace
129	[BUG]  [BUGGY]  Context.report(JSError.make(str,  DEC_NUMBER_ERROR,  expPos));  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.report(JSError.make(str,  DEC_NUMBER_ERROR,  expPos));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.report(JSError.make(str,  DEC_NUMBER_ERROR,  expPos));	  Context.reportCodeChange();    	non-compiled	[CE]  ')'  expected	35	None	replace
130	[BUG]  [BUGGY]  Context.report(JSError.make(str,  numDecimals));  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.report(JSError.make(str,  numDecimals));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.report(JSError.make(str,  numDecimals));	  Context.reportCodeChange();    	non-compiled	[CE]  ')'  expected	35	None	replace
131	[BUG]  [BUGGY]  Context.report(JSError.make(str,  DEC_NUMBER_EXPR_RESULT));  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.report(JSError.make(str,  DEC_NUMBER_EXPR_RESULT));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.report(JSError.make(str,  DEC_NUMBER_EXPR_RESULT));	  Context.reportCodeChange();    	non-compiled	[CE]  ')'  expected	35	None	replace
132	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  expPos;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.indexOf('.')+  expPos;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.indexOf('.')+  expPos;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	20	None	replace
133	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  numDecimals;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.indexOf('.')+  numDecimals;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.indexOf('.')+  numDecimals;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	20	None	replace
134	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  2;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.indexOf('.')+  2;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.indexOf('.')+  2;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	20	None	replace
135	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  decPos;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  decPos;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  decPos;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    numDecimals;    	non-compiled	[CE]  ')'  expected	26	None	replace
136	[BUG]  [BUGGY]  if(expPos  <  0  ||  expPos  >=  str.length())  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  0  ||  expPos  >=  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  0  ||  expPos  >=  str.length())  {	  if(decPos    <    0    ||    expPos    >=    str.length())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
137	[BUG]  [BUGGY]  if(decPos  >  0  ||  expPos  <  str.length())  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  >  0  ||  expPos  <  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  >  0  ||  expPos  <  str.length())  {	  if(decPos    >    0    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	13	None	replace
138	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(0,  expPos  +  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  mant  =  str.substring(0,  expPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  mant  =  str.substring(0,  expPos  +  1);	  Exponent    mant    =    str.substring(0,    expPos);    	non-compiled	[CE]  ')'  expected	55	None	replace
139	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(0,  expPos  -  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  mant  =  str.substring(0,  expPos  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  mant  =  str.substring(0,  expPos  -  1);	  Exponent    mant    =    str.substring(0,    expPos);    	non-compiled	[CE]  ')'  expected	55	None	replace
140	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(0,  expPos  +  2);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  mant  =  str.substring(0,  expPos  +  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  mant  =  str.substring(0,  expPos  +  2);	  Exponent    mant    =    str.substring(0,    expPos);    	non-compiled	[CE]  ')'  expected	55	None	replace
141	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  decPos)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  decPos)  {	  if(decPos    >    -1)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
142	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  2;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  2;	  Integer    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    2;    	non-compiled	[CE]  ')'  expected	37	None	replace
143	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  decPos;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  decPos;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  decPos;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    numDecimals;    	non-compiled	[CE]  ')'  expected	9	None	replace
144	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  numDecimals;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  numDecimals;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  decPos)+  numDecimals;	  int    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  ')'  expected	1	None	replace
145	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  2;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  decPos)+  2;	  int    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  ')'  expected	1	None	replace
146	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.',  decPos)+  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.',  decPos)+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.',  decPos)+  1;	  int    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  ')'  expected	1	None	replace
147	[BUG]  [BUGGY]  Context.checkArgument(decPos  >  -1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  >  -1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  >  -1);	  Context.checkArgument(decPos    <    decPos);    	non-compiled	[CE]  ')'  expected	81	None	replace
148	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  expPos  +  1);	  Integer    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	21	None	replace
149	[BUG]  [BUGGY]  Integer  expPos  =  str.lastIndexOf('.',  expPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.lastIndexOf('.',  expPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.lastIndexOf('.',  expPos);	  Integer    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	21	None	replace
150	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos  -  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos  -  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  expPos  -  1);	  Integer    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	21	None	replace
151	[BUG]  [BUGGY]  String  expPos  =  str.indexOf('.',  expPos)+  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  expPos  =  str.indexOf('.',  expPos)+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  expPos  =  str.indexOf('.',  expPos)+  1;	  char    expPos    =    str.indexOf('.',    expPos)+    1;    	non-compiled	[CE]  ')'  expected	3	None	replace
152	[BUG]  [BUGGY]  Character  expPos  =  str.indexOf('.',  expPos)+  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Character  expPos  =  str.indexOf('.',  expPos)+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Character  expPos  =  str.indexOf('.',  expPos)+  1;	  char    expPos    =    str.indexOf('.',    expPos)+    1;    	non-compiled	[CE]  ')'  expected	3	None	replace
153	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1)+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1)+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  decPos  +  1)+  1;	  int    expPos    =    str.indexOf('.',    expPos    +    1)+    1;    	non-compiled	[CE]  ')'  expected	93	None	replace
154	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  expPos  +  1)/  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  expPos  +  1)/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  expPos  +  1)/  1;	  int    expPos    =    str.indexOf('.',    expPos    +    1)+    1;    	non-compiled	[CE]  ')'  expected	93	None	replace
155	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  expPos  +  1)+  2;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  expPos  +  1)+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  expPos  +  1)+  2;	  int    expPos    =    str.indexOf('.',    expPos    +    1)+    1;    	non-compiled	[CE]  ')'  expected	93	None	replace
156	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos  +  1);	  Integer    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	23	None	replace
157	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  -  1);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos  -  1);	  Integer    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	23	None	replace
158	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(expPos  <  str.length()  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(mant  ==  null)  {  if(expPos  <  str.length()  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(mant  ==  null)  {  if(expPos  <  str.length()  ||  expPos  >  str.length())  {	  if(decPos    >    -1)    {    if(expPos    <    str.length()    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	71	None	replace
159	[BUG]  [BUGGY]  if(expPos  <  str.length()  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  str.length()  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  str.length()  ||  expPos  >  str.length())  {	  if(decPos    >    -1)    {    if(expPos    <    str.length()    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	71	None	replace
160	[BUG]  [BUGGY]  if(decPos  <  str.length()  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  str.length()  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  str.length()  ||  expPos  >  str.length())  {	  if(decPos    >    -1)    {    if(expPos    <    str.length()    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	71	None	replace
161	[BUG]  [BUGGY]  if(expPos  <  str.length()  ||  expPos  >=  str.length())  {  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  str.length()  ||  expPos  >=  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  str.length()  ||  expPos  >=  str.length())  {	  if(decPos    >    -1)    {    if(expPos    <    str.length()    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	71	None	replace
162	[BUG]  [BUGGY]  int  expPos  =  str.length()  +  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.length()  +  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.length()  +  1;	  int    expPos    =    str.length();    	non-compiled	[CE]  ')'  expected	41	None	replace
163	[BUG]  [BUGGY]  int  expPos  =  str.length()  -  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.length()  -  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.length()  -  1;	  int    expPos    =    str.length();    	non-compiled	[CE]  ')'  expected	41	None	replace
164	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.');  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.lastIndexOf('.');  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.lastIndexOf('.');	  int    expPos    =    str.length();    	non-compiled	[CE]  ')'  expected	41	None	replace
165	[BUG]  [BUGGY]  if(expPos  <  decPos  &&  expPos  <  str.length())  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  decPos  &&  expPos  <  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  decPos  &&  expPos  <  str.length())  {	  if(expPos    <    decPos    &&    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	74	None	replace
166	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  2  +  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  2  +  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos)+  2  +  str.indexOf('E')+  1;	  Integer    expPos    =    str.indexOf('.',    decPos)+1    +    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	94	None	replace
167	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos)+  1  +  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos)+  1  +  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  expPos)+  1  +  str.indexOf('E')+  1;	  Integer    expPos    =    str.indexOf('.',    decPos)+1    +    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	94	None	replace
168	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  1  +  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  1  +  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos)+  1  +  str.indexOf('E')/  1;	  Integer    expPos    =    str.indexOf('.',    decPos)+1    +    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	94	None	replace
169	[BUG]  [BUGGY]  if(decPos  <  decPos  &&  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  decPos  &&  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  decPos  &&  expPos  >  str.length())  {	  if(decPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
170	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('e')/    1;    	non-compiled	[CE]  ')'  expected	88	None	replace
171	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('e')/    1;    	non-compiled	[CE]  ')'  expected	88	None	replace
172	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('e')/    1;    	non-compiled	[CE]  ')'  expected	88	None	replace
173	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.')+  str.lastIndexOf('e')+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.')+  str.lastIndexOf('e')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.lastIndexOf('.')+  str.lastIndexOf('e')+  1;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  ')'  expected	31	None	replace
174	[BUG]  [BUGGY]  double  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  double  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	double  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;	  float    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	29	None	replace
175	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  float  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	float  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;	  float    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	29	None	replace
176	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.');  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.');  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.lastIndexOf('.');	  final    int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	45	None	replace
177	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.')+  2;	  int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	6	None	replace
178	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  1  +  numDecimals;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.')+  1  +  numDecimals;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.')+  1  +  numDecimals;	  int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	6	None	replace
179	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.',  expPos)+  2;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.',  expPos)+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.',  expPos)+  2;	  int    expPos    =    str.indexOf('.',    expPos)+    2;    	non-compiled	[CE]  ')'  expected	65	None	replace
180	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  2;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.')+  2;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	22	None	replace
181	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  numDecimals;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  numDecimals;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.')+  numDecimals;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	22	None	replace
182	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1  +  decPos;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1  +  decPos;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.')+  1  +  decPos;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	22	None	replace
183	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;	  final    int    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	28	None	replace
184	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  expPos)+  str.lastIndexOf('E')+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  expPos)+  str.lastIndexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.lastIndexOf('.',  expPos)+  str.lastIndexOf('E')+  1;	  final    int    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	28	None	replace
185	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  exPos)+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  exPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  exPos)+  str.indexOf('E')+  1;	  final    int    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	28	None	replace
186	[BUG]  [BUGGY]  exp  =  str.substring(0,  expPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  exp  =  str.substring(0,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	exp  =  str.substring(0,  expPos);	  exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	96	None	replace
187	[BUG]  [BUGGY]  exp  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  exp  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	exp  =  str.substring(decPos  +  1,  expPos  +  1);	  exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	96	None	replace
188	[BUG]  [BUGGY]  exp  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  exp  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	exp  =  str.substring(decPos  +  1,  expPos  +  2);	  exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	96	None	replace
189	[BUG]  [BUGGY]  exp  =  str.substring(0,  decPos);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  exp  =  str.substring(0,  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	exp  =  str.substring(0,  decPos);	  exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	96	None	replace
190	[BUG]  [BUGGY]  Context.checkState(decPos  >  expPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkState(decPos  >  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkState(decPos  >  expPos);	  Context.checkState(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	33	None	replace
191	[BUG]  [BUGGY]  Context.checkState(decPos  <  expPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkState(decPos  <  expPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkState(decPos  <  expPos  +  1);	  Context.checkState(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	33	None	replace
192	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  expPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.indexOf('.',  expPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.indexOf('.',  expPos  +  1);	  int    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	19	None	replace
193	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  expPos  -  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.indexOf('.',  expPos  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.indexOf('.',  expPos  -  1);	  int    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	19	None	replace
194	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  expPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.lastIndexOf('.',  expPos);	  int    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	19	None	replace
195	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(0,  expPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  exponent  =  str.substring(0,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  exponent  =  str.substring(0,  expPos);	  Exponent    exponent    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	97	None	replace
196	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  exponent  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  exponent  =  str.substring(decPos  +  1,  expPos  +  1);	  Exponent    exponent    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	97	None	replace
197	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  exponent  =  str.substring(0,  decPos);	  Exponent    exponent    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	97	None	replace
198	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos  +  1);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  exponent  =  str.substring(0,  decPos  +  1);	  Exponent    exponent    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	97	None	replace
199	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  2;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	95	None	replace
200	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	95	None	replace
201	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  3;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  3;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  3;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	95	None	replace
202	[BUG]  [BUGGY]  if(decPos  <  expPos  ||  expPos  >=  str.length())  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  expPos  ||  expPos  >=  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  expPos  ||  expPos  >=  str.length())  {	  if(expPos    <    decPos    ||    expPos    >=    str.length())    {    	non-compiled	[CE]  ')'  expected	44	None	replace
203	[BUG]  [BUGGY]  if(expPos  <  decPos  +  1  ||  expPos  >=  str.length())  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  decPos  +  1  ||  expPos  >=  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  decPos  +  1  ||  expPos  >=  str.length())  {	  if(expPos    <    decPos    ||    expPos    >=    str.length())    {    	non-compiled	[CE]  ')'  expected	44	None	replace
204	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  2;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  2;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  2;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	47	None	replace
205	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  numDecimals;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  numDecimals;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  numDecimals;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	47	None	replace
206	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.')+  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.')+  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.lastIndexOf('.')+  1;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	47	None	replace
207	[BUG]  [BUGGY]  double  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  double  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	double  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  float    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	62	None	replace
208	[BUG]  [BUGGY]  final  float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  float    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	62	None	replace
209	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  expPos);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  expPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.lastIndexOf('.',  expPos);	  final    int    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	52	None	replace
210	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  0);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  0);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  0);	  final    int    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	52	None	replace
211	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1  +  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1  +  1;	  Integer    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1    +    1;    	non-compiled	[CE]  ')'  expected	60	None	replace
212	[BUG]  [BUGGY]  double  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  double  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	double  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;	  float    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  ')'  expected	54	None	replace
213	[BUG]  [BUGGY]  String  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;	  char    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	80	None	replace
214	[BUG]  [BUGGY]  final  char  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  char  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  char  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;	  char    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	80	None	replace
215	[BUG]  [BUGGY]  final  String  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  String  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  String  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;	  char    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	80	None	replace
216	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  expPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  decPos  =  str.indexOf('.',  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  decPos  =  str.indexOf('.',  expPos);	  if(decPos    <    decPos    &&    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	68	None	replace
217	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  1  +  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  1  +  1;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	47	None	replace
218	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  1  +  numDecimals;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  1  +  numDecimals;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  1  +  numDecimals;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	47	None	replace
219	[BUG]  [BUGGY]  if(expPos  <  decPos  &&  expPos  >  str.length()  -  1)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  decPos  &&  expPos  >  str.length()  -  1)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  decPos  &&  expPos  >  str.length()  -  1)  {	  if(expPos    <    decPos    &&    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	74	None	replace
220	[BUG]  [BUGGY]  Context.checkArgument(expPos  <  decPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(expPos  <  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(expPos  <  decPos);	  Context.checkArgument(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	82	None	replace
221	[BUG]  [BUGGY]  Context.checkArgument(decPos  +  expPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  +  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  +  expPos);	  Context.checkArgument(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	82	None	replace
222	[BUG]  [BUGGY]  FragmentDecimal  mant  =  str.substring(decPos  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  mant  =  str.substring(decPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  mant  =  str.substring(decPos  +  1);	  FragmentDecimal    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	56	None	replace
223	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	70	None	replace
224	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  float  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	float  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    2;    	non-compiled	[CE]  ')'  expected	24	None	replace
225	[BUG]  [BUGGY]  if(expPos  >  0  ||  decPos  >  str.length())  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  >  0  ||  decPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  >  0  ||  decPos  >  str.length())  {	  if(decPos    >    0    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	13	None	replace
226	[BUG]  [BUGGY]  if(decPos  >  0  &&  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  >  0  &&  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  >  0  &&  expPos  >  str.length())  {	  if(decPos    >    0    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	13	None	replace
227	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.',  expPos  +  1)+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.',  expPos  +  1)+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.',  expPos  +  1)+  1;	  int    expPos    =    str.indexOf('.',    expPos    +    1)+    1;    	non-compiled	[CE]  ')'  expected	93	None	replace
228	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    numDecimals;    	non-compiled	[CE]  ')'  expected	9	None	replace
229	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    numDecimals;    	non-compiled	[CE]  ')'  expected	9	None	replace
230	[BUG]  [BUGGY]  if(expPos  >  -1  &&  expPos  <  str.length())  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  >  -1  &&  expPos  <  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  >  -1  &&  expPos  <  str.length())  {	  if(expPos    <    decPos    ||    expPos    >=    str.length())    {    	non-compiled	[CE]  ')'  expected	44	None	replace
231	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.',  expPos  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.',  expPos  -  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.',  expPos  -  1);	  int    expPos    =    str.indexOf('.',    expPos    -    1);    	non-compiled	[CE]  ')'  expected	51	None	replace
232	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(0,  decPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  mant  =  str.substring(0,  decPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  mant  =  str.substring(0,  decPos  +  1);	  Exponent    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	57	None	replace
233	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  float  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	float  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	95	None	replace
234	[BUG]  [BUGGY]  Exponent  <  decPos  &&  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  <  decPos  &&  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  <  decPos  &&  expPos  >  str.length())  {	  Exponent    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	83	None	replace
235	[BUG]  [BUGGY]  Context.checkState(expPos  <  decPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkState(expPos  <  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkState(expPos  <  decPos);	  Context.checkState(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	33	None	replace
236	[BUG]  [BUGGY]  Context.checkState(decPos  >=  expPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkState(decPos  >=  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkState(decPos  >=  expPos);	  Context.checkState(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	33	None	replace
237	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    2;    	non-compiled	[CE]  ')'  expected	8	None	replace
238	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    2;    	non-compiled	[CE]  ')'  expected	8	None	replace
239	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('e')+  str.indexOf('E')+  numDecimals;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  float  expPos  =  str.indexOf('e')+  str.indexOf('E')+  numDecimals;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	float  expPos  =  str.indexOf('e')+  str.indexOf('E')+  numDecimals;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    numDecimals;    	non-compiled	[CE]  ')'  expected	26	None	replace
240	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  numDecimals;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  numDecimals;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  numDecimals;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    numDecimals;    	non-compiled	[CE]  ')'  expected	26	None	replace
241	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  float  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	float  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    2;    	non-compiled	[CE]  ')'  expected	61	None	replace
242	[BUG]  [BUGGY]  if(decPos  <  decPos  +  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  decPos  +  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  decPos  +  expPos  >  str.length())  {	  if(decPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
243	[BUG]  [BUGGY]  if(decPos  <  -1)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  -1)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  -1)  {	  if(decPos    >    -1)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
244	[BUG]  [BUGGY]  if(expPos  <  0  ||  expPos  >  str.length()  -  1)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  0  ||  expPos  >  str.length()  -  1)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  0  ||  expPos  >  str.length()  -  1)  {	  if(expPos    <    0    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	11	None	replace
245	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  exp)+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  exp)+  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  expPos  =  str.indexOf('.',  exp)+  1;	  FragmentDecimal    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  ')'  expected	87	None	replace
246	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  DEC_POP)+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  DEC_POP)+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  DEC_POP)+  1;	  int    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  ')'  expected	1	None	replace
247	[BUG]  [BUGGY]  exp  =  str.substring(decPos  +  1,  expPos  -  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  exp  =  str.substring(decPos  +  1,  expPos  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	exp  =  str.substring(decPos  +  1,  expPos  -  1);	  exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	96	None	replace
248	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  exp);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  exp);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  expPos  =  str.indexOf('.',  exp);	  FragmentDecimal    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	85	None	replace
249	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  exp);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  exp);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  exp);	  Integer    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	23	None	replace
250	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  ')'  expected	31	None	replace
251	[BUG]  [BUGGY]  if(numDecimals  <  0)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(numDecimals  <  0)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(numDecimals  <  0)  {	  if(expPos    >    -1)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
252	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  decPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.indexOf('.',  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.indexOf('.',  decPos);	  int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	18	None	replace
253	[BUG]  [BUGGY]  long  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  long  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	long  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  1;	  float    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	29	None	replace
254	[BUG]  [BUGGY]  (numDecimals  + "  is  not  a  valid  number.   ");  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  (numDecimals  + "  is  not  a  valid  number.   ");  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	(numDecimals  + "  is  not  a  valid  number.   ");	  (str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  ')'  expected	49	None	replace
255	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  1  +  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.')+  1  +  1;	  int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	6	None	replace
256	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  float  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	float  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	25	None	replace
257	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	25	None	replace
258	[BUG]  [BUGGY]  Context.report(numDecimals);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.report(numDecimals);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.report(numDecimals);	  Context.reportCodeChange();    	non-compiled	[CE]  ')'  expected	35	None	replace
259	[BUG]  [BUGGY]  Context.report(JSError.make(str,  DEC_MINUS_ONE,  expPos));  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.report(JSError.make(str,  DEC_MINUS_ONE,  expPos));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.report(JSError.make(str,  DEC_MINUS_ONE,  expPos));	  Context.reportCodeChange();    	non-compiled	[CE]  ')'  expected	35	None	replace
260	[BUG]  [BUGGY]  nisipet  =  str.charAt(0);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  nisipet  =  str.charAt(0);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	nisipet  =  str.charAt(0);	  nisipet    =    str.charAt(decPos    +    1);    	non-compiled	[CE]  ')'  expected	48	None	replace
261	[BUG]  [BUGGY]  nisipet  =  str.charAt(decPos  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  nisipet  =  str.charAt(decPos  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	nisipet  =  str.charAt(decPos  -  1);	  nisipet    =    str.charAt(decPos    +    1);    	non-compiled	[CE]  ')'  expected	48	None	replace
262	[BUG]  [BUGGY]  if(decPos  >=  0  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  >=  0  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  >=  0  ||  expPos  >  str.length())  {	  if(decPos    <    0    ||    expPos    >    str.length()    -    1)    {    	non-compiled	[CE]  ')'  expected	69	None	replace
263	[BUG]  [BUGGY]  if(expPos  <  0  ||  decPos  >=  str.length())  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  0  ||  decPos  >=  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  0  ||  decPos  >=  str.length())  {	  if(decPos    <    0    ||    expPos    >=    str.length())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
264	[BUG]  [BUGGY]  Context.checkState(numDecimals  <  decPos);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkState(numDecimals  <  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkState(numDecimals  <  decPos);	  Context.checkState(decPos    <    decPos);    	non-compiled	[CE]  ')'  expected	16	None	replace
265	[BUG]  [BUGGY]  String  str  =  str.substring(0,  decPos  +  1,  expPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  str  =  str.substring(0,  decPos  +  1,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  str  =  str.substring(0,  decPos  +  1,  expPos);	  String    str    =    str.substring(0,    decPos);    	non-compiled	[CE]  ')'  expected	17	None	replace
266	[BUG]  [BUGGY]  Context.checkArgument(decPos  <  0  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  <  0  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  <  0  ||  expPos  >  str.length())  {	  Context.checkArgument(decPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	76	None	replace
267	[BUG]  [BUGGY]  Context.checkArgument(decPos  <  =  1  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  <  =  1  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  <  =  1  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  Context.checkArgument(decPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	76	None	replace
268	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  ')'  expected	78	None	replace
269	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  ')'  expected	78	None	replace
270	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.')+  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  decPos  =  str.indexOf('.')+  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  decPos  =  str.indexOf('.')+  1;	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	77	None	replace
271	[BUG]  [BUGGY]  lastChar  =  str.charAt(decPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  lastChar  =  str.charAt(decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	lastChar  =  str.charAt(decPos);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	77	None	replace
272	[BUG]  [BUGGY]  lastChar  =  str.charAt(decPos  +  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  lastChar  =  str.charAt(decPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	lastChar  =  str.charAt(decPos  +  1);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	77	None	replace
273	[BUG]  [BUGGY]  if(decPos  <  decPos  &&  expPos  >=  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  decPos  &&  expPos  >=  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  decPos  &&  expPos  >=  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos    &&    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	68	None	replace
274	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  exp);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  exp);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  exp);	  final    int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ')'  expected	45	None	replace
275	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  DECImal_ZERO);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  DECImal_ZERO);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  DECImal_ZERO);	  final    int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	46	None	replace
276	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  +  1  <  str.length())  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  >  -1)  {  if(expPos  +  1  <  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  >  -1)  {  if(expPos  +  1  <  str.length())  {	  if(decPos    >    -1)    {    if(expPos    <    decPos    +    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	72	None	replace
277	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  +  1  <  expPos.length())  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  >  -1)  {  if(expPos  +  1  <  expPos.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  >  -1)  {  if(expPos  +  1  <  expPos.length())  {	  if(decPos    >    -1)    {    if(expPos    <    decPos    +    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	72	None	replace
278	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  <  str.length()  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  0)  {  if(expPos  <  str.length()  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  0)  {  if(expPos  <  str.length()  ||  expPos  >  str.length())  {	  if(decPos    >    -1)    {    if(expPos    <    str.length()    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	71	None	replace
279	[BUG]  [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  -  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(decPos  +  1,  expPos  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(decPos  +  1,  expPos  -  1);	  String    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	32	None	replace
280	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.')+  decPos;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.')+  decPos;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.')+  decPos;	  int    expPos    =    str.indexOf('.')+    decPos;    	non-compiled	[CE]  ')'  expected	53	None	replace
281	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos  +  1,  numDecimals);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  expPos  +  1,  numDecimals);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  expPos  +  1,  numDecimals);	  String    exp    =    str.substring(0,    expPos);    	non-compiled	[CE]  ')'  expected	34	None	replace
282	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  1  +  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.indexOf('.')+  1  +  1;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	20	None	replace
283	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  1  +  exp;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.indexOf('.')+  1  +  exp;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.indexOf('.')+  1  +  exp;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	20	None	replace
284	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  1  +  numDecimals;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  decPos  =  str.indexOf('.')+  1  +  numDecimals;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  decPos  =  str.indexOf('.')+  1  +  numDecimals;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	20	None	replace
285	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	float  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	89	None	replace
286	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(decPos  +  1,  expPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  mant  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  mant  =  str.substring(decPos  +  1,  expPos);	  if(expPos    <    decPos    &&    expPos    <    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	73	None	replace
287	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	10	None	replace
288	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	10	None	replace
289	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  exponent  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  exponent  =  str.substring(decPos  +  1,  expPos  +  2);	  Exponent    exponent    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	97	None	replace
290	[BUG]  [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.')||  expPos  >  -1)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.')||  expPos  >  -1)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  0  ||  expPos  >  str.indexOf('.')||  expPos  >  -1)  {	  if(expPos    <    0    ||    expPos    >    str.indexOf('.'))    {    	non-compiled	[CE]  ')'  expected	84	None	replace
291	[BUG]  [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.')&&  expPos  <  -1)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.')&&  expPos  <  -1)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  0  ||  expPos  >  str.indexOf('.')&&  expPos  <  -1)  {	  if(expPos    <    0    ||    expPos    >    str.indexOf('.'))    {    	non-compiled	[CE]  ')'  expected	84	None	replace
292	[BUG]  [BUGGY]  if(expPos  >  0  ||  expPos  >  str.indexOf('.'))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  >  0  ||  expPos  >  str.indexOf('.'))  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  >  0  ||  expPos  >  str.indexOf('.'))  {	  if(expPos    <    0    ||    expPos    >    str.indexOf('.'))    {    	non-compiled	[CE]  ')'  expected	84	None	replace
293	[BUG]  [BUGGY]  char  decPos  =  str.indexOf('.',  expPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  decPos  =  str.indexOf('.',  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  decPos  =  str.indexOf('.',  expPos);	  int    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ')'  expected	19	None	replace
294	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	float  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    2;    	non-compiled	[CE]  ')'  expected	30	None	replace
295	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    2;    	non-compiled	[CE]  ')'  expected	30	None	replace
296	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1  +  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.')+  1  +  1;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	22	None	replace
297	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos)+  1  +  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos)+  1  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  expPos)+  1  +  1;	  final    int    expPos    =    str.indexOf('.',    expPos)+    1;    	non-compiled	[CE]  ')'  expected	2	None	replace
298	[BUG]  [BUGGY]  if(expPos  >  -1  &&  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  >  -1  &&  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  >  -1  &&  expPos  >  str.length())  {	  if(expPos    >    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	75	None	replace
299	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  2));  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  2));  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  str.length()  -  2));	  String    exp    =    str.substring(0,    str.length()));    	non-compiled	[CE]  ')'  expected	40	None	replace
300	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  2  +  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  2  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')+  2  +  1;	  Integer    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1    +    1;    	non-compiled	[CE]  ')'  expected	60	None	replace
301	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')-  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')-  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')-  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	89	None	replace
302	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(decPos  +  1,  expPos  -  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  exponent  =  str.substring(decPos  +  1,  expPos  -  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  exponent  =  str.substring(decPos  +  1,  expPos  -  1);	  Exponent    exponent    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	97	None	replace
303	[BUG]  [BUGGY]  if(expPos  <  decPos  +  expPos)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  decPos  +  expPos)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  decPos  +  expPos)  {	  if(decPos    >    -1)    {    if(expPos    <    decPos    +    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	72	None	replace
304	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  decPos)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  decPos)  {	  if(decPos    >    -1)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
305	[BUG]  [BUGGY]  if(numDecimals  <  decPos)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(numDecimals  <  decPos)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(numDecimals  <  decPos)  {	  if(decPos    >    -1)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
306	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  expPos)/  2;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  expPos)/  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  expPos)/  2;	  int    expPos    =    str.indexOf('.',    expPos)+    2;    	non-compiled	[CE]  ')'  expected	65	None	replace
307	[BUG]  [BUGGY]  Context.checkArgument(decPos  <  decPos  &&  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  <  decPos  &&  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  <  decPos  &&  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  Context.checkArgument(decPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	76	None	replace
308	[BUG]  [BUGGY]  Context.checkArgument(decPos  <  decPos  +  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  <  decPos  +  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  <  decPos  +  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  Context.checkArgument(decPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	76	None	replace
309	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  expPos  -  1  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  expPos  -  1  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  expPos  -  1  +  1);	  int    expPos    =    str.indexOf('.',    expPos    -    1);    	non-compiled	[CE]  ')'  expected	51	None	replace
310	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	25	None	replace
311	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	25	None	replace
312	[BUG]  [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.')&&  expPos  <  decPos)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  0  ||  expPos  >  str.indexOf('.')&&  expPos  <  decPos)  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  0  ||  expPos  >  str.indexOf('.')&&  expPos  <  decPos)  {	  if(expPos    <    0    ||    expPos    >    str.indexOf('.'))    {    	non-compiled	[CE]  ')'  expected	84	None	replace
313	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  1  +  decPos;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.')+  1  +  decPos;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.')+  1  +  decPos;	  int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	6	None	replace
314	[BUG]  [BUGGY]  Exponent  <?>  exp  =  str.substring(decPos  +  1,  expPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  <?>  exp  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  <?>  exp  =  str.substring(decPos  +  1,  expPos);	  if(expPos    <    decPos    &&    expPos    <    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	73	None	replace
315	[BUG]  [BUGGY]  aughtException(str  + "  is  not  a  valid  number.   ");  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  aughtException(str  + "  is  not  a  valid  number.   ");  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	aughtException(str  + "  is  not  a  valid  number.   ");	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	77	None	replace
316	[BUG]  [BUGGY]  MutableString  str  =  str.substring(0,  decPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  MutableString  str  =  str.substring(0,  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	MutableString  str  =  str.substring(0,  decPos);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	77	None	replace
317	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  decPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  decPos  =  str.indexOf('.',  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  decPos  =  str.indexOf('.',  decPos);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	77	None	replace
318	[BUG]  [BUGGY]  Character  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Character  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Character  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	  char    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	59	None	replace
319	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  expPos)+  2  +  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  expPos)+  2  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  expPos)+  2  +  1;	  int    expPos    =    str.indexOf('.',    expPos)+    1    +    1;    	non-compiled	[CE]  ')'  expected	64	None	replace
320	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')-  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')-  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')-  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	95	None	replace
321	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    1;    	non-compiled	[CE]  ')'  expected	95	None	replace
322	[BUG]  [BUGGY]  if(expPos  >  -1  &&  expPos  <  decPos  +  1  ||  expPos  >  str.length())  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  >  -1  &&  expPos  <  decPos  +  1  ||  expPos  >  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  >  -1  &&  expPos  <  decPos  +  1  ||  expPos  >  str.length())  {	  if(expPos    <    decPos    +    1    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
323	[BUG]  [BUGGY]  Context.checkArgument(decPos  >  -1?  expPos  :  decPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  >  -1?  expPos  :  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  >  -1?  expPos  :  decPos);	  Context.checkArgument(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	82	None	replace
324	[BUG]  [BUGGY]  Context.checkArgument(decPos  >  -1)?  expPos  <  expPos  :  decPos;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.checkArgument(decPos  >  -1)?  expPos  <  expPos  :  decPos;  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.checkArgument(decPos  >  -1)?  expPos  <  expPos  :  decPos;	  Context.checkArgument(decPos    <    expPos);    	non-compiled	[CE]  ')'  expected	82	None	replace
325	[BUG]  [BUGGY]  long  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  long  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	long  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	  float    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	58	None	replace
326	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')-  1;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')-  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')-  1;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	10	None	replace
327	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  decPos);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  decPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.lastIndexOf('.',  decPos);	  final    int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	46	None	replace
328	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  2;	  int    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    2;    	non-compiled	[CE]  ')'  expected	61	None	replace
329	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')/  1;	  Integer    expPos    =    str.indexOf('.',    decPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	36	None	replace
330	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos  +  1)+  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos  +  1)+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  expPos  +  1)+  1;	  final    int    expPos    =    str.indexOf('.',    expPos)+    1;    	non-compiled	[CE]  ')'  expected	2	None	replace
331	[BUG]  [BUGGY]  char  exp  =  str.substring(0,  expPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  exp  =  str.substring(0,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  exp  =  str.substring(0,  expPos);	  String    exp    =    str.substring(0,    expPos);    	non-compiled	[CE]  ')'  expected	34	None	replace
332	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	FragmentDecimal  expPos  =  str.indexOf('.',  decPos  +  1);	  FragmentDecimal    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ')'  expected	85	None	replace
333	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  decPos);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  decPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	String  exp  =  str.substring(0,  str.length()  -  decPos);	  String    exp    =    str.substring(0,    str.length()));    	non-compiled	[CE]  ')'  expected	40	None	replace
334	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  ')'  expected	78	None	replace
335	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  ')'  expected	78	None	replace
336	[BUG]  [BUGGY]  Character  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Character  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Character  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  char    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	63	None	replace
337	[BUG]  [BUGGY]  if(decPos  <  decPos  &&  expPos  >  0)  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  decPos  &&  expPos  >  0)  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  decPos  &&  expPos  >  0)  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos    &&    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	68	None	replace
338	[BUG]  [BUGGY]  if(decPos  <  decPos  &&  expPos  <  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  <  decPos  &&  expPos  <  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  <  decPos  &&  expPos  <  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos    &&    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	68	None	replace
339	[BUG]  [BUGGY]  char  exp  =  str.substring(decPos  +  1,  expPos);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  exp  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  exp  =  str.substring(decPos  +  1,  expPos);	  String    exp    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ')'  expected	32	None	replace
340	[BUG]  [BUGGY]  Context.report(JSError.make(str,  decPos,  expPos));  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.report(JSError.make(str,  decPos,  expPos));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.report(JSError.make(str,  decPos,  expPos));	  Context.reportCodeChange();    	non-compiled	[CE]  ')'  expected	35	None	replace
341	[BUG]  [BUGGY]  Context.report(JSError.make(str,  DEC_POP,  expPos));  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.report(JSError.make(str,  DEC_POP,  expPos));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.report(JSError.make(str,  DEC_POP,  expPos));	  Context.reportCodeChange();    	non-compiled	[CE]  ')'  expected	35	None	replace
342	[BUG]  [BUGGY]  Context.report(JSError.make(str,  expPos,  numDecimals));  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Context.report(JSError.make(str,  expPos,  numDecimals));  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Context.report(JSError.make(str,  expPos,  numDecimals));	  Context.reportCodeChange();    	non-compiled	[CE]  ')'  expected	35	None	replace
343	[BUG]  [BUGGY]  long  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  long  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	long  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;	  float    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  ')'  expected	54	None	replace
344	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  4  +  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  4  +  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos)+  4  +  str.indexOf('E')+  1;	  Integer    expPos    =    str.indexOf('.',    decPos)+1    +    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	94	None	replace
345	[BUG]  [BUGGY]  if(expPos  <  decPos  &&  expPos  >=  str.length())  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  <  decPos  &&  expPos  >=  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  <  decPos  &&  expPos  >=  str.length())  {	  if(expPos    <    decPos    ||    expPos    >=    str.length())    {    	non-compiled	[CE]  ')'  expected	44	None	replace
346	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	final  int  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  1;	  final    int    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	28	None	replace
347	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  1  +  1;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  1  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Integer  expPos  =  str.indexOf('.',  expPos)+  str.indexOf('E')/  1  +  1;	  Integer    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1    +    1;    	non-compiled	[CE]  ')'  expected	60	None	replace
348	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  expPos  +  2);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  expPos  +  2);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  expPos  +  2);	  int    expPos    =    str.indexOf('.',    expPos    +    1);    	non-compiled	[CE]  ')'  expected	50	None	replace
349	[BUG]  [BUGGY]  long  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  long  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	long  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  float    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	62	None	replace
350	[BUG]  [BUGGY]  if(decPos  >  0  ||  expPos  >=  str.length())  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(decPos  >  0  ||  expPos  >=  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(decPos  >  0  ||  expPos  >=  str.length())  {	  if(decPos    <    0    ||    expPos    >=    str.length())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
351	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  char  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	char  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')+  1;	  char    expPos    =    str.indexOf('.',    expPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	80	None	replace
352	[BUG]  [BUGGY]  Exponent  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  Exponent  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	Exponent  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.	  Exponent    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  ')'  expected	83	None	replace
353	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')/  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	int  expPos  =  str.indexOf('.',  decPos)+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('.',    decPos)+    str.indexOf('E')+    1;    	non-compiled	[CE]  ')'  expected	27	None	replace
354	[BUG]  [BUGGY]  if(expPos  >  0  ||  expPos  <  str.length())  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point  if  (expPos  >  -1)  {  //  there  is  an  exponent      [BUGGY]  if(expPos  >  0  ||  expPos  <  str.length())  {  [BUGGY]      throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  if  (expPos  >  -1)  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	if(expPos  >  0  ||  expPos  <  str.length())  {	  if(decPos    >    0    ||    expPos    >    str.length())    {    	non-compiled	[CE]  ')'  expected	13	None	replace
