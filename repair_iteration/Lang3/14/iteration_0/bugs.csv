bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
27	[BUG] [BUGGY] if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE  throw new NumberFormatException(str + " is not a valid number."); [FE] AssertionError [CONTEXT] String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point if (expPos > -1) { // there is an exponent [BUGGY] if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE     throw new NumberFormatException(str + " is not a valid number."); [BUGGY] throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers. } else { if (expPos > -1) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point if (expPos > -1) { // there is an exponent [BUGGY] [BUGGY] if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE     throw new NumberFormatException(str + " is not a valid number."); throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers. } else { if (expPos > -1) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	add	
