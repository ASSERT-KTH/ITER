bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(numDecimals  >  0)  {  if(decPos  >  -1)  {  return  null;  }  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]  if(numDecimals  >  0)  {  if(decPos  >  -1)  {  return  null;  }  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	if(numDecimals  >  0)  {  if(decPos  >  -1)  {  return  null;  }	if  (decPos  >  -1)  {  //  there  is  a  decimal  point    if  (expPos  >  -1)  {  //  there  is  an  exponent  	non-compiled	[CE]  ')'  expected	65	None	replace
2	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.');  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]  Integer  decPos  =  str.indexOf('.');  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	Integer  decPos  =  str.indexOf('.');	if  (decPos  >  -1)  {  //  there  is  a  decimal  point    if  (expPos  >  -1)  {  //  there  is  an  exponent  	non-compiled	[CE]  ')'  expected	65	None	replace
3	[BUG]  [BUGGY]  if(numDecimals  <  =  0)  {  if(decPos  >  -1)  {  return  null;  }  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]  if(numDecimals  <  =  0)  {  if(decPos  >  -1)  {  return  null;  }  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	if(numDecimals  <  =  0)  {  if(decPos  >  -1)  {  return  null;  }	if  (decPos  >  -1)  {  //  there  is  a  decimal  point    if  (expPos  >  -1)  {  //  there  is  an  exponent  	non-compiled	[CE]  ')'  expected	65	None	replace
4	[BUG]  [BUGGY]  if(numDecimals  >  0)  {  if(decPos  >  0)  {  return  null;  }  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]  if(numDecimals  >  0)  {  if(decPos  >  0)  {  return  null;  }  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	if(numDecimals  >  0)  {  if(decPos  >  0)  {  return  null;  }	if  (decPos  >  -1)  {  //  there  is  a  decimal  point    if  (expPos  >  -1)  {  //  there  is  an  exponent  	non-compiled	[CE]  ')'  expected	65	None	replace
5	[BUG]  [BUGGY]    [CE]  ')'  expected  [FE]            AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]    [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	  	if  (decPos  >  -1)  {  //  there  is  a  decimal  point    if  (expPos  >  -1)  {  //  there  is  an  exponent  	non-compiled	[CE]  ')'  expected	65	None	replace
6	[BUG]  [BUGGY]    int  expPos  =  str.indexOf('.');  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]    int  expPos  =  str.indexOf('.');  [BUGGY]  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	    int  expPos  =  str.indexOf('.');		non-compiled	[CE]  ')'  expected	66	None	add
7	[BUG]  [BUGGY]    numDecimals  =  Math.min(decPos,  expPos);  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]    numDecimals  =  Math.min(decPos,  expPos);  [BUGGY]  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	    numDecimals  =  Math.min(decPos,  expPos);		non-compiled	[CE]  ')'  expected	66	None	add
8	[BUG]  [BUGGY]    numDecimals  =  Math.max(decPos,  expPos);  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]    numDecimals  =  Math.max(decPos,  expPos);  [BUGGY]  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	    numDecimals  =  Math.max(decPos,  expPos);		non-compiled	[CE]  ')'  expected	66	None	add
9	[BUG]  [BUGGY]    int  expPos  =  str.indexOf('.',  expPos);  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]    int  expPos  =  str.indexOf('.',  expPos);  [BUGGY]  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	    int  expPos  =  str.indexOf('.',  expPos);		non-compiled	[CE]  ')'  expected	66	None	add
10	[BUG]  [BUGGY]    int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]    int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	    int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;		non-compiled	[CE]  ')'  expected	66	None	add
11	[BUG]  [BUGGY]    int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]    int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	    int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;		non-compiled	[CE]  ')'  expected	66	None	add
12	[BUG]  [BUGGY]    int  decPos  =  str.indexOf('.');  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]    int  decPos  =  str.indexOf('.');  [BUGGY]  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	    int  decPos  =  str.indexOf('.');		non-compiled	[CE]  ')'  expected	66	None	add
13	[BUG]  [BUGGY]    int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]    int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	    int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;		non-compiled	[CE]  ')'  expected	66	None	add
14	[BUG]  [BUGGY]  int  numDecimals  =  str.indexOf('.');  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]  int  numDecimals  =  str.indexOf('.');  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	int  numDecimals  =  str.indexOf('.');	if  (decPos  >  -1)  {  //  there  is  a  decimal  point    if  (expPos  >  -1)  {  //  there  is  an  exponent  	non-compiled	[CE]  ')'  expected	65	None	replace
15	[BUG]  [BUGGY]  numDecimals  =  str.length();  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]  numDecimals  =  str.length();  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	numDecimals  =  str.length();	if  (decPos  >  -1)  {  //  there  is  a  decimal  point    if  (expPos  >  -1)  {  //  there  is  an  exponent  	non-compiled	[CE]  ')'  expected	65	None	replace
16	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos);  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	int  expPos  =  str.indexOf('.',  decPos);	if  (decPos  >  -1)  {  //  there  is  a  decimal  point    if  (expPos  >  -1)  {  //  there  is  an  exponent  	non-compiled	[CE]  ')'  expected	65	None	replace
17	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos);  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	Integer  decPos  =  str.indexOf('.',  decPos);	if  (decPos  >  -1)  {  //  there  is  a  decimal  point    if  (expPos  >  -1)  {  //  there  is  an  exponent  	non-compiled	[CE]  ')'  expected	65	None	replace
18	[BUG]  [BUGGY]    numDecimals  =  str.indexOf('.');  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]    numDecimals  =  str.indexOf('.');  [BUGGY]  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	    numDecimals  =  str.indexOf('.');		non-compiled	[CE]  ')'  expected	66	None	add
19	[BUG]  [BUGGY]    numDecimals  =  str.indexOf('.',  decPos);  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  final  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  [BUGGY]    numDecimals  =  str.indexOf('.',  decPos);  [BUGGY]  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +   "  is  not  a  valid  number. ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	    numDecimals  =  str.indexOf('.',  decPos);		non-compiled	[CE]  ')'  expected	66	None	add
