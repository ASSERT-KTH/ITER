bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  dec);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  expPos  =  str.indexOf('.',  dec);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  expPos  =  str.indexOf('.',  dec);	  int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ';'  expected	45	None	replace
2	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  expPos  =  str.indexOf('.',  decPos);	  int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ';'  expected	45	None	replace
3	[BUG]  [BUGGY]  double  expPos  =  str.indexOf('.');  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  double  expPos  =  str.indexOf('.');  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	double  expPos  =  str.indexOf('.');	  int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  ';'  expected	45	None	replace
4	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.',  decPos);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  expPos  =  str.lastIndexOf('.',  decPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  expPos  =  str.lastIndexOf('.',  decPos);	  int    expPos    =    str.lastIndexOf('.',    dec);    	non-compiled	[CE]  ';'  expected	13	None	replace
5	[BUG]  [BUGGY]  double  expPos  =  str.lastIndexOf('.',  dec);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  double  expPos  =  str.lastIndexOf('.',  dec);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	double  expPos  =  str.lastIndexOf('.',  dec);	  int    expPos    =    str.lastIndexOf('.',    dec);    	non-compiled	[CE]  ';'  expected	13	None	replace
6	[BUG]  [BUGGY]  char  expPos  =  str.lastIndexOf('.',  dec);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  expPos  =  str.lastIndexOf('.',  dec);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  expPos  =  str.lastIndexOf('.',  dec);	  int    expPos    =    str.lastIndexOf('.',    dec);    	non-compiled	[CE]  ';'  expected	13	None	replace
7	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.',  mant);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  expPos  =  str.lastIndexOf('.',  mant);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  expPos  =  str.lastIndexOf('.',  mant);	  int    expPos    =    str.lastIndexOf('.',    dec);    	non-compiled	[CE]  ';'  expected	13	None	replace
8	[BUG]  [BUGGY]  numDecimals  =  mant.substring(0,  decPos);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  mant.substring(0,  decPos);  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  mant.substring(0,  decPos);	  numDecimals    =    dec.substring(0,    decPos);    	non-compiled	[CE]  ';'  expected	32	None	replace
9	[BUG]  [BUGGY]  numDecimals  =  str.substring(0,  decPos);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  str.substring(0,  decPos);  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  str.substring(0,  decPos);	  numDecimals    =    dec.substring(0,    decPos);    	non-compiled	[CE]  ';'  expected	32	None	replace
10	[BUG]  [BUGGY]  numDecimals  =  str.lastIndexOf('.');  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  str.lastIndexOf('.');  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  str.lastIndexOf('.');	  double    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  ';'  expected	14	None	replace
11	[BUG]  [BUGGY]  double  expPos  =  str.lastIndexOf('.',  DECIMAL_PREFIX);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  double  expPos  =  str.lastIndexOf('.',  DECIMAL_PREFIX);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	double  expPos  =  str.lastIndexOf('.',  DECIMAL_PREFIX);	  double    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  ';'  expected	14	None	replace
12	[BUG]  [BUGGY]  double  numDecimals  =  dec.length();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  double  numDecimals  =  dec.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	double  numDecimals  =  dec.length();	  double    numDecimals    =    mant.length();    	non-compiled	[CE]  ';'  expected	21	None	replace
13	[BUG]  [BUGGY]  double  numDecimals  =  mant.length()  +  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  double  numDecimals  =  mant.length()  +  1;  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	double  numDecimals  =  mant.length()  +  1;	  double    numDecimals    =    mant.length();    	non-compiled	[CE]  ';'  expected	21	None	replace
14	[BUG]  [BUGGY]  mant  =  str.substring(0,  prefix  +  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  prefix  +  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  prefix  +  1);	  mant    =    str.substring(0,    prefix);    	non-compiled	[CE]  ';'  expected	12	None	replace
15	[BUG]  [BUGGY]  mant  =  str.substring(0,  prefix).trim();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  prefix).trim();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  prefix).trim();	  mant    =    str.substring(0,    prefix);    	non-compiled	[CE]  ';'  expected	12	None	replace
16	[BUG]  [BUGGY]  double  decDecimals  =  dec.length();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  double  decDecimals  =  dec.length();  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	double  decDecimals  =  dec.length();	  int    decDecimals    =    dec.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    	non-compiled	[CE]  ';'  expected	41	None	replace
17	[BUG]  [BUGGY]  double  decDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  double  decDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	double  decDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.	  int    decDecimals    =    dec.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    	non-compiled	[CE]  ';'  expected	41	None	replace
18	[BUG]  [BUGGY]  long  decDecimals  =  dec.length();  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  long  decDecimals  =  dec.length();  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	long  decDecimals  =  dec.length();	  int    decDecimals    =    dec.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    	non-compiled	[CE]  orphaned  case	41	None	replace
19	[BUG]  [BUGGY]  long  decDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  long  decDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	long  decDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.	  int    decDecimals    =    dec.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    	non-compiled	[CE]  orphaned  case	41	None	replace
20	[BUG]  [BUGGY]  mant  =  str.substring(0,  exPos  +  2);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  exPos  +  2);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  exPos  +  2);	  mant    =    str.substring(0,    exPos    +    1);    	non-compiled	[CE]  'catch'  without  'try'	20	None	replace
21	[BUG]  [BUGGY]  mant  =  str.substring(0,  expPos  +  1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  expPos  +  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  expPos  +  1);	  mant    =    str.substring(0,    exPos    +    1);    	non-compiled	[CE]  ';'  expected	20	None	replace
22	[BUG]  [BUGGY]  int  decDecimals  =  mant.length();  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  decDecimals  =  mant.length();  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  decDecimals  =  mant.length();	  int    decDecimals    =    dec.length();    	non-compiled	[CE]  orphaned  case	31	None	replace
23	[BUG]  [BUGGY]  int  decDecimals  =  hexDigits.length();  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  decDecimals  =  hexDigits.length();  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  decDecimals  =  hexDigits.length();	  int    decDecimals    =    dec.length();    	non-compiled	[CE]  'catch'  without  'try'	31	None	replace
24	[BUG]  [BUGGY]  int  decDecimals  =  str.length();  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  decDecimals  =  str.length();  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  decDecimals  =  str.length();	  int    decDecimals    =    dec.length();    	non-compiled	[CE]  orphaned  case	31	None	replace
25	[BUG]  [BUGGY]  Integer  decDecimals  =  dec.length();  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  Integer  decDecimals  =  dec.length();  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	Integer  decDecimals  =  dec.length();	  int    decDecimals    =    dec.length();    	non-compiled	[CE]  'catch'  without  'try'	31	None	replace
26	[BUG]  [BUGGY]  mant  =  str.substring(0,  exponentPos);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  exponentPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  exponentPos);	  mant    =    str.substring(0,    expPos);    	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
27	[BUG]  [BUGGY]  String  expPos  =  str.length();  [CE]  'catch'  without  'try'  [FE]                          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  String  expPos  =  str.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	String  expPos  =  str.length();	  char    expPos    =    str.length();    	non-compiled	[CE]  'catch'  without  'try'	6	None	replace
28	[BUG]  [BUGGY]  char  expPos  =  str.length()  +  1;  [CE]  'catch'  without  'try'  [FE]                            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  expPos  =  str.length()  +  1;  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  expPos  =  str.length()  +  1;	  char    expPos    =    str.length();    	non-compiled	[CE]  'catch'  without  'try'	6	None	replace
29	[BUG]  [BUGGY]  char  expPos  =  mant.length();  [CE]  'catch'  without  'try'  [FE]                              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  expPos  =  mant.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  expPos  =  mant.length();	  char    expPos    =    str.length();    	non-compiled	[CE]  'catch'  without  'try'	6	None	replace
30	[BUG]  [BUGGY]  double  expPos  =  str.length();  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  double  expPos  =  str.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	double  expPos  =  str.length();	  int    expPos    =    str.length()    +    1;    	non-compiled	[CE]  'catch'  without  'try'	5	None	replace
31	[BUG]  [BUGGY]  mant  =  str.substring(0,  3);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  3);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  3);	  mant    =    str.substring(0,    1);    	non-compiled	[CE]  'catch'  without  'try'	11	None	replace
32	[BUG]  [BUGGY]  mant  =  str.substring(0,  1).trim();  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  1).trim();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  1).trim();	  mant    =    str.substring(0,    1);    	non-compiled	[CE]  'catch'  without  'try'	11	None	replace
33	[BUG]  [BUGGY]  mant  =  str.substring(0,  str.length()  +  1);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  str.length()  +  1);  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  str.length()  +  1);	  mant    =    str.substring(0,    str.length());    	non-compiled	[CE]  'catch'  without  'try'	2	None	replace
34	[BUG]  [BUGGY]  mant  =  str.substring(0,  str.length()  -  2);  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  str.length()  -  2);  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  str.length()  -  2);	  mant    =    str.substring(0,    str.length());    	non-compiled	[CE]  'catch'  without  'try'	2	None	replace
35	[BUG]  [BUGGY]  mant  =  str.substring(1,  str.length());  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(1,  str.length());  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(1,  str.length());	  mant    =    str.substring(0,    str.length());    	non-compiled	[CE]  'catch'  without  'try'	2	None	replace
36	[BUG]  [BUGGY]  Integer  numDecimals  =  mant.length();  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  Integer  numDecimals  =  mant.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	Integer  numDecimals  =  mant.length();	  long    numDecimals    =    mant.length();    	non-compiled	[CE]  'catch'  without  'try'	23	None	replace
37	[BUG]  [BUGGY]  mant  =  str.substring(0,  4);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  4);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  4);	  mant    =    str.substring(0,    2);    	non-compiled	[CE]  'catch'  without  'try'	36	None	replace
38	[BUG]  [BUGGY]  int  expPos  =  mant.length()  -  1;  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  expPos  =  mant.length()  -  1;  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  expPos  =  mant.length()  -  1;	  int    expPos    =    mant.length();    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
39	[BUG]  [BUGGY]  int  expPos  =  dec.length();  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  expPos  =  dec.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  expPos  =  dec.length();	  int    expPos    =    mant.length();    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
40	[BUG]  [BUGGY]  mant  =  str.substring(0,  prefixPos  +  1);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  prefixPos  +  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  prefixPos  +  1);	  mant    =    str.substring(0,    prefixPos);    	non-compiled	[CE]  'catch'  without  'try'	29	None	replace
41	[BUG]  [BUGGY]  String  numDecimals  =  mant.length();  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  String  numDecimals  =  mant.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	String  numDecimals  =  mant.length();	  char    numDecimals    =    mant.length();    	non-compiled	[CE]  orphaned  case	24	None	replace
42	[BUG]  [BUGGY]  char  numDecimals  =  dec.length();  [CE]  orphaned  case  [FE]                      AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  numDecimals  =  dec.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  numDecimals  =  dec.length();	  char    numDecimals    =    mant.length();    	non-compiled	[CE]  orphaned  case	24	None	replace
43	[BUG]  [BUGGY]  mant  =  str.substring(1,  decPos  +  1);  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(1,  decPos  +  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(1,  decPos  +  1);	  mant    =    str.substring(1,    decPos);    	non-compiled	[CE]  orphaned  case	26	None	replace
44	[BUG]  [BUGGY]  mant  =  str.substring(1,  expPos);  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(1,  expPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(1,  expPos);	  mant    =    str.substring(1,    decPos);    	non-compiled	[CE]  orphaned  case	26	None	replace
45	[BUG]  [BUGGY]  mant  =  str.substring(1,  prefixPos);  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(1,  prefixPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(1,  prefixPos);	  mant    =    str.substring(1,    decPos);    	non-compiled	[CE]  orphaned  case	26	None	replace
46	[BUG]  [BUGGY]  if(mant!=  null)  {  numDecimals  =  str.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  if(mant!=  null)  {  numDecimals  =  str.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	if(mant!=  null)  {  numDecimals  =  str.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {	  if(mant!=    null)    {    numDecimals    =    mant.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    }    else    {    	non-compiled	[CE]  'catch'  without  'try'	43	None	replace
47	[BUG]  [BUGGY]  if(dec  ==  null)  {  numDecimals  =  mant.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  if(dec  ==  null)  {  numDecimals  =  mant.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	if(dec  ==  null)  {  numDecimals  =  mant.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {	  if(mant!=    null)    {    numDecimals    =    mant.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    }    else    {    	non-compiled	[CE]  'catch'  without  'try'	43	None	replace
48	[BUG]  [BUGGY]  if(dec!=  null)  {  numDecimals  =  mant.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  if(dec!=  null)  {  numDecimals  =  mant.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	if(dec!=  null)  {  numDecimals  =  mant.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {	  if(mant!=    null)    {    numDecimals    =    mant.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    }    else    {    	non-compiled	[CE]  'catch'  without  'try'	43	None	replace
49	[BUG]  [BUGGY]  long  numDecimals  =  dec.length();  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  long  numDecimals  =  dec.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	long  numDecimals  =  dec.length();	  int    numDecimals    =    dec.length();    	non-compiled	[CE]  orphaned  case	22	None	replace
50	[BUG]  [BUGGY]  Integer  expPos  =  str.lastIndexOf('.');  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  Integer  expPos  =  str.lastIndexOf('.');  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	Integer  expPos  =  str.lastIndexOf('.');	  long    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	16	None	replace
51	[BUG]  [BUGGY]  long  expPos  =  str.lastIndexOf('.',  dec);  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  long  expPos  =  str.lastIndexOf('.',  dec);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	long  expPos  =  str.lastIndexOf('.',  dec);	  long    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	16	None	replace
52	[BUG]  [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos  +  3);  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos  +  3);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(decPos  +  1,  expPos  +  3);	  mant    =    str.substring(decPos    +    1,    expPos    +    1);    	non-compiled	[CE]  'catch'  without  'try'	7	None	replace
53	[BUG]  [BUGGY]  mant  =  str.substring(2,  exPos);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(2,  exPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(2,  exPos);	  mant    =    str.substring(1,    exPos);    	non-compiled	[CE]  'catch'  without  'try'	39	None	replace
54	[BUG]  [BUGGY]  mant  =  str.substring(0,  expPos  +  2);  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  expPos  +  2);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  expPos  +  2);	  mant    =    str.substring(decPos    +    1,    expPos    +    2);    	non-compiled	[CE]  'catch'  without  'try'	34	None	replace
55	[BUG]  [BUGGY]  mant  =  str.substring(0,  decPos  +  2);  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  decPos  +  2);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  decPos  +  2);	  mant    =    str.substring(0,    decPos    +    1);    	non-compiled	[CE]  'catch'  without  'try'	10	None	replace
56	[BUG]  [BUGGY]  long  expPos  =  str.length();  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  long  expPos  =  str.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	long  expPos  =  str.length();	  int    expPos    =    str.length()    -    1;    	non-compiled	[CE]  'catch'  without  'try'	4	None	replace
57	[BUG]  [BUGGY]  mant  =  str.substring(decPos  +  1,  exponentPos);  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(decPos  +  1,  exponentPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(decPos  +  1,  exponentPos);	  mant    =    str.substring(decPos    +    1,    decPos);    	non-compiled	[CE]  orphaned  case	28	None	replace
58	[BUG]  [BUGGY]  mant  =  str.substring(decPos  +  1,  exponent);  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(decPos  +  1,  exponent);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(decPos  +  1,  exponent);	  mant    =    str.substring(decPos    +    1,    decPos);    	non-compiled	[CE]  orphaned  case	28	None	replace
59	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.',  DEC_POP  +  1);  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  expPos  =  str.lastIndexOf('.',  DEC_POP  +  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  expPos  =  str.lastIndexOf('.',  DEC_POP  +  1);	  int    expPos    =    str.lastIndexOf('.',    DEC_POP);    	non-compiled	[CE]  orphaned  case	30	None	replace
60	[BUG]  [BUGGY]  double  expPos  =  str.lastIndexOf('.',  DEC_POP);  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  double  expPos  =  str.lastIndexOf('.',  DEC_POP);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	double  expPos  =  str.lastIndexOf('.',  DEC_POP);	  int    expPos    =    str.lastIndexOf('.',    DEC_POP);    	non-compiled	[CE]  orphaned  case	30	None	replace
61	[BUG]  [BUGGY]  char  expPos  =  str.lastIndexOf('.',  DEC_POP);  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  expPos  =  str.lastIndexOf('.',  DEC_POP);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  expPos  =  str.lastIndexOf('.',  DEC_POP);	  int    expPos    =    str.lastIndexOf('.',    DEC_POP);    	non-compiled	[CE]  orphaned  case	30	None	replace
62	[BUG]  [BUGGY]  String  expPos  =  str.lastIndexOf('.');  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  String  expPos  =  str.lastIndexOf('.');  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	String  expPos  =  str.lastIndexOf('.');	  char    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	15	None	replace
63	[BUG]  [BUGGY]  char  expPos  =  str.lastIndexOf('.',  1);  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  expPos  =  str.lastIndexOf('.',  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  expPos  =  str.lastIndexOf('.',  1);	  char    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	15	None	replace
64	[BUG]  [BUGGY]  numDecimals  =  new  int[mant.length()  ];  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  new  int[mant.length()  ];  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  new  int[mant.length()  ];	  numDecimals    =    mant.length()    +    1;    	non-compiled	[CE]  orphaned  case	17	None	replace
65	[BUG]  [BUGGY]  numDecimals  =  new  int[mant.length()  +  1];  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  new  int[mant.length()  +  1];  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  new  int[mant.length()  +  1];	  numDecimals    =    mant.length()    +    1;    	non-compiled	[CE]  orphaned  case	17	None	replace
66	[BUG]  [BUGGY]  if(dec  >  -1)  {  numDecimals  =  str.length();/  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  if(dec  >  -1)  {  numDecimals  =  str.length();/  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	if(dec  >  -1)  {  numDecimals  =  str.length();/  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {	  if(dec    >    -1)    {    numDecimals    =    str.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    }    else    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
67	[BUG]  [BUGGY]  ';'  expected;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  ';'  expected;  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	';'  expected;	  if(dec    >    -1)    {    numDecimals    =    str.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    }    else    {    	non-compiled	[CE]  not  a  statement	37	None	replace
68	[BUG]  [BUGGY]  mant  =  str.substring(0,  decPos  +  1,  expPos);  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  decPos  +  1,  expPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  decPos  +  1,  expPos);	  mant    =    str.substring(decPos    +    1,    expPos,    expPos);    	non-compiled	[CE]  orphaned  case	44	None	replace
69	[BUG]  [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos,  exponentPos);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos,  exponentPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(decPos  +  1,  expPos,  exponentPos);	  mant    =    str.substring(decPos    +    1,    expPos,    expPos);    	non-compiled	[CE]  'catch'  without  'try'	44	None	replace
70	[BUG]  [BUGGY]  int  numDecimals  =  str.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  numDecimals  =  str.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  numDecimals  =  str.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.	  numDecimals    =    str.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
71	[BUG]  [BUGGY]  mant  =  str.substring(0,  expPos  -  1);  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  expPos  -  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  expPos  -  1);	  mant    =    str.substring(0,    decPos    -    1);    	non-compiled	[CE]  orphaned  case	35	None	replace
72	[BUG]  [BUGGY]  mant  =  str.substring(0,  prevPos  -  1);  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  prevPos  -  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  prevPos  -  1);	  mant    =    str.substring(0,    decPos    -    1);    	non-compiled	[CE]  orphaned  case	35	None	replace
73	[BUG]  [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos  -  2);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos  -  2);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(decPos  +  1,  expPos  -  2);	  mant    =    str.substring(decPos    +    1,    expPos    -    1);    	non-compiled	[CE]  'catch'  without  'try'	9	None	replace
74	[BUG]  [BUGGY]  int  numDecimals  =  str.length();  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  int  numDecimals  =  str.length();  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	int  numDecimals  =  str.length();	  numDecimals    =    str.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
75	[BUG]  [BUGGY]  long  expPos  =  mant.length();  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  long  expPos  =  mant.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	long  expPos  =  mant.length();	  int    expPos    =    mant.length();    	non-compiled	[CE]  orphaned  case	3	None	replace
76	[BUG]  [BUGGY]  mant  =  str.substring(0,  endPos  +  1);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  endPos  +  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  endPos  +  1);	  mant    =    str.substring(0,    exPos    +    1);    	non-compiled	[CE]  'catch'  without  'try'	20	None	replace
77	[BUG]  [BUGGY]  numDecimals  =  mant.length();/  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  mant.length();/  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  mant.length();/  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.	  if(mant!=    null)    {    numDecimals    =    mant.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    }    else    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
78	[BUG]  [BUGGY]  char  numDecimals  =  str.length();  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  numDecimals  =  str.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  numDecimals  =  str.length();	  char    numDecimals    =    mant.length();    	non-compiled	[CE]  orphaned  case	24	None	replace
79	[BUG]  [BUGGY]  numberDecimals  =  dec.length();  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numberDecimals  =  dec.length();  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numberDecimals  =  dec.length();	  numDecimals    =    dec.length()    +    1;    	non-compiled	[CE]  orphaned  case	19	None	replace
80	[BUG]  [BUGGY]  char  expPos  =  str.lastIndexOf('.',  DEC);  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  expPos  =  str.lastIndexOf('.',  DEC);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  expPos  =  str.lastIndexOf('.',  DEC);	  char    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	15	None	replace
81	[BUG]  [BUGGY]  double  expPos  =  str.lastIndexOf('.',  DEC_PREFIX);  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  double  expPos  =  str.lastIndexOf('.',  DEC_PREFIX);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	double  expPos  =  str.lastIndexOf('.',  DEC_PREFIX);	  double    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	14	None	replace
82	[BUG]  [BUGGY]  double  expPos  =  str.indexOf('.',  dec);  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  double  expPos  =  str.indexOf('.',  dec);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	double  expPos  =  str.indexOf('.',  dec);	  double    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	14	None	replace
83	[BUG]  [BUGGY]  char  expPos  =  str.charAt(0);  [CE]  orphaned  case  [FE]                          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  expPos  =  str.charAt(0);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  expPos  =  str.charAt(0);	  char    expPos    =    str.length();    	non-compiled	[CE]  orphaned  case	6	None	replace
84	[BUG]  [BUGGY]  char  expPos  =  str.charAt(decPos);  [CE]  orphaned  case  [FE]                            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  expPos  =  str.charAt(decPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  expPos  =  str.charAt(decPos);	  char    expPos    =    str.length();    	non-compiled	[CE]  orphaned  case	6	None	replace
85	[BUG]  [BUGGY]  mant  =  str.substring(1,  decPos  +  2);  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(1,  decPos  +  2);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(1,  decPos  +  2);	  mant    =    str.substring(1,    decPos);    	non-compiled	[CE]  orphaned  case	26	None	replace
86	[BUG]  [BUGGY]  mant  =  str.substring(2,  decPos);  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(2,  decPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(2,  decPos);	  mant    =    str.substring(1,    decPos);    	non-compiled	[CE]  orphaned  case	26	None	replace
87	[BUG]  [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos  +  4);  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos  +  4);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(decPos  +  1,  expPos  +  4);	  mant    =    str.substring(decPos    +    1,    expPos    +    2);    	non-compiled	[CE]  orphaned  case	34	None	replace
88	[BUG]  [BUGGY]  mant  =  str.substring(1,  endPos);  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(1,  endPos);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(1,  endPos);	  mant    =    str.substring(1,    exPos);    	non-compiled	[CE]  orphaned  case	39	None	replace
89	[BUG]  [BUGGY]  long  expPos  =  str.lastIndexOf('.',  DEC_POP);  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  long  expPos  =  str.lastIndexOf('.',  DEC_POP);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	long  expPos  =  str.lastIndexOf('.',  DEC_POP);	  long    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  orphaned  case	16	None	replace
90	[BUG]  [BUGGY]  ';'  expected  =  true;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  ';'  expected  =  true;  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	';'  expected  =  true;	  if(dec    >    -1)    {    numDecimals    =    str.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    }    else    {    	non-compiled	[CE]  not  a  statement	37	None	replace
91	[BUG]  [BUGGY]  numberDecimals  =  str.length();  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numberDecimals  =  str.length();  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numberDecimals  =  str.length();	  numDecimals    =    str.length()    +    1;    	non-compiled	[CE]  orphaned  case	25	None	replace
92	[BUG]  [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos,  exponent);  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos,  exponent);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(decPos  +  1,  expPos,  exponent);	  mant    =    str.substring(decPos    +    1,    expPos,    expPos);    	non-compiled	[CE]  orphaned  case	44	None	replace
93	[BUG]  [BUGGY]  char  decDecimals  =  dec.length();  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  decDecimals  =  dec.length();  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  decDecimals  =  dec.length();	  int    decDecimals    =    dec.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    	non-compiled	[CE]  orphaned  case	41	None	replace
94	[BUG]  [BUGGY]  numDecimals  =  dec.substring(0,  expPos);  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  dec.substring(0,  expPos);  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  dec.substring(0,  expPos);	  numDecimals    =    dec.substring(0,    decPos);    	non-compiled	[CE]  orphaned  case	32	None	replace
95	[BUG]  [BUGGY]  mant  =  str.substring(0,  prefix  -  1);  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  prefix  -  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  prefix  -  1);	  mant    =    str.substring(0,    decPos    -    1);    	non-compiled	[CE]  orphaned  case	35	None	replace
96	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.');  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  expPos  =  str.indexOf('.');  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  expPos  =  str.indexOf('.');	  int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  orphaned  case	45	None	replace
97	[BUG]  [BUGGY]  numDecimals  =  new  int[decPos  +  1];  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  new  int[decPos  +  1];  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  new  int[decPos  +  1];	  numDecimals    =    mant.length()    +    1;    	non-compiled	[CE]  orphaned  case	17	None	replace
98	[BUG]  [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos,  expPos  +  1);  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos,  expPos  +  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(decPos  +  1,  expPos,  expPos  +  1);	  mant    =    str.substring(decPos    +    1,    expPos,    expPos);    	non-compiled	[CE]  orphaned  case	44	None	replace
99	[BUG]  [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos,  expPos  -  1);  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos,  expPos  -  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(decPos  +  1,  expPos,  expPos  -  1);	  mant    =    str.substring(decPos    +    1,    expPos,    expPos);    	non-compiled	[CE]  orphaned  case	44	None	replace
100	[BUG]  [BUGGY]  short  numDecimals  =  mant.length();  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  short  numDecimals  =  mant.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	short  numDecimals  =  mant.length();	  long    numDecimals    =    mant.length();    	non-compiled	[CE]  orphaned  case	23	None	replace
101	[BUG]  [BUGGY]  mant  =  str.substring(0,  decPos  -  1  +  1);  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(0,  decPos  -  1  +  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(0,  decPos  -  1  +  1);	  mant    =    str.substring(0,    decPos    -    1);    	non-compiled	[CE]  orphaned  case	35	None	replace
102	[BUG]  [BUGGY]  if(mant  ==  null)  {  numDecimals  =  mant.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  if(mant  ==  null)  {  numDecimals  =  mant.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	if(mant  ==  null)  {  numDecimals  =  mant.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {	  if(mant!=    null)    {    numDecimals    =    mant.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    }    else    {    	non-compiled	[CE]  orphaned  case	43	None	replace
103	[BUG]  [BUGGY]  numDecimals  =  dec.substring(0,  decPos  +  1);  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  dec.substring(0,  decPos  +  1);  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  dec.substring(0,  decPos  +  1);	  numDecimals    =    dec.substring(0,    decPos);    	non-compiled	[CE]  orphaned  case	32	None	replace
104	[BUG]  [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos  +  1).length();  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(decPos  +  1,  expPos  +  1).length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(decPos  +  1,  expPos  +  1).length();	  mant    =    str.substring(decPos    +    1,    expPos    +    2);    	non-compiled	[CE]  orphaned  case	34	None	replace
105	[BUG]  [BUGGY]  numDecimals  =  decPos.length();  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  decPos.length();  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  decPos.length();	  numDecimals    =    expPos.length();    	non-compiled	[CE]  orphaned  case	42	None	replace
106	[BUG]  [BUGGY]  char  numDecimals  =  mant.charAt(0);  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  numDecimals  =  mant.charAt(0);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  numDecimals  =  mant.charAt(0);	  char    numDecimals    =    mant.length();    	non-compiled	[CE]  orphaned  case	24	None	replace
107	[BUG]  [BUGGY]  Integer  expPos  =  str.length();  [CE]  orphaned  case  [FE]                        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  Integer  expPos  =  str.length();  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	Integer  expPos  =  str.length();	  int    expPos    =    str.length()    +    1;    	non-compiled	[CE]  orphaned  case	5	None	replace
108	[BUG]  [BUGGY]  mant  =  str.substring(expPos  +  1,  expPos  -  1);  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(expPos  +  1,  expPos  -  1);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(expPos  +  1,  expPos  -  1);	  mant    =    str.substring(decPos    +    1,    expPos    -    1);    	non-compiled	[CE]  orphaned  case	9	None	replace
109	[BUG]  [BUGGY]  numDecimals  =  str.dec();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  str.dec();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  str.dec();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.	  numDecimals    =    str.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    	non-compiled	[CE]  orphaned  case	33	None	replace
110	[BUG]  [BUGGY]  mant  =  str.substring(1,  prefix);  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(1,  prefix);  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(1,  prefix);	  mant    =    str.substring(0,    prefix);    	non-compiled	[CE]  orphaned  case	12	None	replace
111	[BUG]  [BUGGY]  mant  =  str.substring(1,  str.length()  -  1);  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  mant  =  str.substring(1,  str.length()  -  1);  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	mant  =  str.substring(1,  str.length()  -  1);	  mant    =    str.substring(0,    str.length());    	non-compiled	[CE]  orphaned  case	2	None	replace
112	[BUG]  [BUGGY]  if(dec  <  -1)  {  numDecimals  =  str.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  if(dec  <  -1)  {  numDecimals  =  str.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	if(dec  <  -1)  {  numDecimals  =  str.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {	  if(dec    >    -1)    {    numDecimals    =    str.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    }    else    {    	non-compiled	[CE]  orphaned  case	37	None	replace
113	[BUG]  [BUGGY]  char  decDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  char  decDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  [BUGGY]      }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	char  decDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.	  int    decDecimals    =    dec.length();    //    gets    number    of    digits    past    the    decimal    to    ensure    no    loss    of    precision    for    floating    point    numbers.    	non-compiled	[CE]  orphaned  case	41	None	replace
114	[BUG]  [BUGGY]  if(dec!=  null)  {  numDecimals  =  desc.length();  }  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  if(dec!=  null)  {  numDecimals  =  desc.length();  }  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	if(dec!=  null)  {  numDecimals  =  desc.length();  }	  numDecimals    =    desc.length();    	non-compiled	[CE]  orphaned  case	38	None	replace
115	[BUG]  [BUGGY]  if(dec!=  null)  {  numDecimals  =  desc.length();  }  else  {  numDecimals  =  dec.length();  }  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  if(dec!=  null)  {  numDecimals  =  desc.length();  }  else  {  numDecimals  =  dec.length();  }  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	if(dec!=  null)  {  numDecimals  =  desc.length();  }  else  {  numDecimals  =  dec.length();  }	  numDecimals    =    desc.length();    	non-compiled	[CE]  orphaned  case	38	None	replace
116	[BUG]  [BUGGY]  numDecimals  =  new  int[decPos];  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);      [BUGGY]  numDecimals  =  new  int[decPos];  [BUGGY]      numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  }  else  {  if  (expPos  >  -1)  {  if  (expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  mant  =  str.substring(0,  expPos);  }  else  {  mant  =  str;  }  dec  =  null;  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	numDecimals  =  new  int[decPos];	  numDecimals    =    mant.length()    +    1;    	non-compiled	[CE]  orphaned  case	17	None	replace
