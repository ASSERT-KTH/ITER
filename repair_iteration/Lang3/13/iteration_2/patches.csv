bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	53	None	replace
2	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( "  [CE]  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( "  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( "	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
3	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ".  [CE]  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ".  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ".	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
4	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	29	None	replace
5	[BUG]  [BUGGY]  if(numDecimals  >=  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  >=  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  >=  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	29	None	replace
6	[BUG]  [BUGGY]  if(numDecimals  <  =  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  =  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  =  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	29	None	replace
7	[BUG]  [BUGGY]  numDecimals  =  str.lastIndexOf('.',  decPos  +  1);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.lastIndexOf('.',  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.lastIndexOf('.',  decPos  +  1);	  numDecimals    =    str.lastIndexOf('.',    decPos);    	non-compiled	[CE]  'catch'  without  'try'	73	None	replace
8	[BUG]  [BUGGY]  Context.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.  [CE]  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Context.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Context.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.	  Preconditions.checkState(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  	58	None	replace
9	[BUG]  [BUGGY]  Context.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Context.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Context.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }	  Preconditions.checkState(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  	58	None	replace
10	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  DEC_POP  +  1);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.',  DEC_POP  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  DEC_POP  +  1);	  final    int    expPos    =    str.indexOf('.',    DEC_POP);    	non-compiled	[CE]  'catch'  without  'try'	61	None	replace
11	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  0);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.',  0);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  0);	  final    int    expPos    =    str.indexOf('.',    DEC_POP);    	non-compiled	[CE]  'catch'  without  'try'	61	None	replace
12	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  1);  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.',  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  1);	  final    int    expPos    =    str.indexOf('.',    DEC_POP);    	non-compiled	[CE]  'catch'  without  'try'	61	None	replace
13	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(0,  expPos);  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  mant  =  str.substring(0,  expPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  mant  =  str.substring(0,  expPos);	  Exponent    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  'catch'  without  'try'	56	None	replace
14	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(0,  exp);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  mant  =  str.substring(0,  exp);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  mant  =  str.substring(0,  exp);	  Exponent    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  'catch'  without  'try'	56	None	replace
15	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(0,  decPos  +  1);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  mant  =  str.substring(0,  decPos  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  mant  =  str.substring(0,  decPos  +  1);	  Exponent    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  'catch'  without  'try'	56	None	replace
16	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(1,  decPos);  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  mant  =  str.substring(1,  decPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  mant  =  str.substring(1,  decPos);	  Exponent    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  'catch'  without  'try'	56	None	replace
17	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  1);  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.lastIndexOf('.',  1);	  final    int    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	14	None	replace
18	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	63	None	replace
19	[BUG]  [BUGGY]  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	63	None	replace
20	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  'catch'  without  'try'	12	None	replace
21	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  2;  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  2;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.')+  2;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  'catch'  without  'try'	12	None	replace
22	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  numDecimals;  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  numDecimals;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.')+  numDecimals;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  'catch'  without  'try'	12	None	replace
23	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  1)+  1;  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  1)+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  exp  =  str.substring(0,  str.length()  -  1)+  1;	  String    exp    =    str.substring(0,    str.length())+    1;    	non-compiled	[CE]  'catch'  without  'try'	35	None	replace
24	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  +  1)+  1;  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  String  exp  =  str.substring(0,  str.length()  +  1)+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  exp  =  str.substring(0,  str.length()  +  1)+  1;	  String    exp    =    str.substring(0,    str.length())+    1;    	non-compiled	[CE]  'catch'  without  'try'	35	None	replace
25	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  +  1)/  1;  [CE]  'catch'  without  'try'  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  String  exp  =  str.substring(0,  str.length()  +  1)/  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  exp  =  str.substring(0,  str.length()  +  1)/  1;	  String    exp    =    str.substring(0,    str.length())+    1;    	non-compiled	[CE]  'catch'  without  'try'	35	None	replace
26	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.lastIndexOf('.',  expPos);	  final    int    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	21	None	replace
27	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  numDecimals);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.',  numDecimals);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  numDecimals);	  final    int    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	21	None	replace
28	[BUG]  [BUGGY]  Context.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number  [CE]  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Context.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Context.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number	  Preconditions.checkState(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	59	None	replace
29	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos)+  1;  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  decPos)+  1;	  int    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  'catch'  without  'try'	83	None	replace
30	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  2;  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  2;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.',  decPos)+  2;	  int    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  'catch'  without  'try'	83	None	replace
31	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  numDecimals;  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  numDecimals;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.',  decPos)+  numDecimals;	  int    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  'catch'  without  'try'	83	None	replace
32	[BUG]  [BUGGY]  if(decPos  <  numDecimals)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  numDecimals)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  numDecimals)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(decPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	39	None	replace
33	[BUG]  [BUGGY]  if(decPos  <  numDecimals)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  numDecimals)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  numDecimals)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(decPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	39	None	replace
34	[BUG]  [BUGGY]  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(decPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	39	None	replace
35	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos)+  1;  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  expPos)+  1;	  Integer    decPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  'catch'  without  'try'	74	None	replace
36	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  exp)+  1;  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  exp)+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  exp)+  1;	  Integer    decPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  'catch'  without  'try'	74	None	replace
37	[BUG]  [BUGGY]  Integer  decPos  =  str.lastIndexOf('.',  decPos)+  1;  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.lastIndexOf('.',  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.lastIndexOf('.',  decPos)+  1;	  Integer    decPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  'catch'  without  'try'	74	None	replace
38	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POP)+  1;  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POP)+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  DEC_POP)+  1;	  Integer    decPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  'catch'  without  'try'	74	None	replace
39	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos  +  2);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos  +  2);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  expPos  +  2);	  Integer    decPos    =    str.indexOf('.',    expPos    +    1);    	non-compiled	[CE]  'catch'  without  'try'	18	None	replace
40	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos  +  1).doubleValue();  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos  +  1).doubleValue();  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  expPos  +  1).doubleValue();	  Integer    decPos    =    str.indexOf('.',    expPos    +    1);    	non-compiled	[CE]  'catch'  without  'try'	18	None	replace
41	[BUG]  [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    <    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	38	None	replace
42	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(expPos  >  str.length())  {  return  null;  }	  if(decPos    <    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	38	None	replace
43	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  2;  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  2;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')/    1;    	non-compiled	[CE]  'catch'  without  'try'	77	None	replace
44	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')/    1;    	non-compiled	[CE]  'catch'  without  'try'	77	None	replace
45	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	float  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')/    1;    	non-compiled	[CE]  'catch'  without  'try'	77	None	replace
46	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	25	None	replace
47	[BUG]  [BUGGY]  numDecimals  =  str.lastIndexOf('.',  expPos  +  1);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.lastIndexOf('.',  expPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.lastIndexOf('.',  expPos  +  1);	  numDecimals    =    str.indexOf('.',    expPos    +    1);    	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
48	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  expPos  +  1,  decPos);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.',  expPos  +  1,  decPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  expPos  +  1,  decPos);	  numDecimals    =    str.indexOf('.',    expPos    +    1);    	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
49	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  expPos)+  1;  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.',  expPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  expPos)+  1;	  numDecimals    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  'catch'  without  'try'	43	None	replace
50	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  exp)+  1;  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.',  exp)+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  exp)+  1;	  numDecimals    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  'catch'  without  'try'	43	None	replace
51	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  decPos)+  2;  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.',  decPos)+  2;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  decPos)+  2;	  numDecimals    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  'catch'  without  'try'	43	None	replace
52	[BUG]  [BUGGY]  Integer  decPos  =  str.lastIndexOf('.',  decPos);  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.lastIndexOf('.',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.lastIndexOf('.',  decPos);	  Integer    decPos    =    str.lastIndexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	19	None	replace
53	[BUG]  [BUGGY]  String  expPos  =  str.indexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  String  expPos  =  str.indexOf('.',  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  expPos  =  str.indexOf('.',  expPos);	  char    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	52	None	replace
54	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.',  decPos);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  char  expPos  =  str.indexOf('.',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	char  expPos  =  str.indexOf('.',  decPos);	  char    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	52	None	replace
55	[BUG]  [BUGGY]  final  char  expPos  =  str.indexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  char  expPos  =  str.indexOf('.',  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  char  expPos  =  str.indexOf('.',  expPos);	  char    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	52	None	replace
56	[BUG]  [BUGGY]  final  String  expPos  =  str.indexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  String  expPos  =  str.indexOf('.',  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  String  expPos  =  str.indexOf('.',  expPos);	  char    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	52	None	replace
57	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    2;    	non-compiled	[CE]  'catch'  without  'try'	40	None	replace
58	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    2;    	non-compiled	[CE]  'catch'  without  'try'	40	None	replace
59	[BUG]  [BUGGY]  nisipet  =  str.charAt(decPos  +  1);  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  nisipet  =  str.charAt(decPos  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	nisipet  =  str.charAt(decPos  +  1);	  if(decPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  'catch'  without  'try'	79	None	replace
60	[BUG]  [BUGGY]  final  int  decPos  =  str.lastIndexOf('.',  0);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.lastIndexOf('.',  0);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.lastIndexOf('.',  0);	  final    int    decPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	46	None	replace
61	[BUG]  [BUGGY]  final  int  decPos  =  str.lastIndexOf('.',  1);  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.lastIndexOf('.',  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.lastIndexOf('.',  1);	  final    int    decPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	46	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(decPos  <  0  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Preconditions.checkState(decPos  <  0  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Preconditions.checkState(decPos  <  0  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }	  Preconditions.checkState(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	57	None	replace
63	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return;    }    	non-compiled	[CE]  'catch'  without  'try'	26	None	replace
64	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return;    }    	non-compiled	[CE]  'catch'  without  'try'	26	None	replace
65	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return;    }    	non-compiled	[CE]  'catch'  without  'try'	26	None	replace
66	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  -1)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  -1)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return;    }    	non-compiled	[CE]  'catch'  without  'try'	26	None	replace
67	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  decPos  +  1);	  final    int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  'catch'  without  'try'	6	None	replace
68	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos  -  1);  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  decPos  -  1);	  final    int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  'catch'  without  'try'	6	None	replace
69	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  exp);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  exp);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  exp);	  Integer    decPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  'catch'  without  'try'	17	None	replace
70	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    >=    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	66	None	replace
71	[BUG]  [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    >=    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	66	None	replace
72	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	85	None	replace
73	[BUG]  [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length())  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length())  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0  ||  expPos  >  str.length())  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	85	None	replace
74	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(expPos  >  -1  ||  expPos  >  str.length())  {  return  null;  }	  if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	85	None	replace
75	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    break;    }    	non-compiled	[CE]  'catch'  without  'try'	28	None	replace
76	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    break;    }    	non-compiled	[CE]  'catch'  without  'try'	28	None	replace
77	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    break;    }    	non-compiled	[CE]  'catch'  without  'try'	28	None	replace
78	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [CE]  'catch'  without  'try'  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  -1)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  -1)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    break;    }    	non-compiled	[CE]  'catch'  without  'try'	28	None	replace
79	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos);  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  String  exp  =  str.substring(0,  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  exp  =  str.substring(0,  expPos);	  String    exp    =    str.substring(0,    str.length());    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
80	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  expPos.length());  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  String  exp  =  str.substring(0,  expPos.length());  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  exp  =  str.substring(0,  expPos.length());	  String    exp    =    str.substring(0,    str.length());    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
81	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  decPos  +  1);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  decPos  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.lastIndexOf('.',  decPos  +  1);	  final    int    expPos    =    str.lastIndexOf('.',    decPos);    	non-compiled	[CE]  'catch'  without  'try'	15	None	replace
82	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  decPos  -  1);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  decPos  -  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.lastIndexOf('.',  decPos  -  1);	  final    int    expPos    =    str.lastIndexOf('.',    decPos);    	non-compiled	[CE]  'catch'  without  'try'	15	None	replace
83	[BUG]  [BUGGY]  final  double  expPos  =  str.indexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  double  expPos  =  str.indexOf('.',  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  double  expPos  =  str.indexOf('.',  expPos);	  double    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	71	None	replace
84	[BUG]  [BUGGY]  double  expPos  =  str.indexOf('.',  decPos);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  double  expPos  =  str.indexOf('.',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	double  expPos  =  str.indexOf('.',  decPos);	  double    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	71	None	replace
85	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  2);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  2);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.',  decPos  +  2);	  int    expPos    =    str.indexOf('.',    decPos    +    1);    	non-compiled	[CE]  'catch'  without  'try'	5	None	replace
86	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  float  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	float  expPos  =  str.indexOf('.',  decPos  +  1);	  int    expPos    =    str.indexOf('.',    decPos    +    1);    	non-compiled	[CE]  'catch'  without  'try'	5	None	replace
87	[BUG]  [BUGGY]  if(numDecimals  >=  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  >=  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  >=  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	30	None	replace
88	[BUG]  [BUGGY]  if(numDecimals!=  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals!=  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals!=  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
89	[BUG]  [BUGGY]  if(numDecimals  <  =  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  =  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  =  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
90	[BUG]  [BUGGY]  if(numDecimals  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
91	[BUG]  [BUGGY]  if(numDecimals!=  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals!=  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals!=  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
92	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decP  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decP  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decP	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
93	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  final    int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
94	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.indexOf('.')+  str.indexOf('e')+  1;	  final    int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
95	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.')+  str.indexOf('D')+  1;  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.indexOf('.')+  str.indexOf('D')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.indexOf('.')+  str.indexOf('D')+  1;	  final    int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  'catch'  without  'try'	45	None	replace
96	[BUG]  [BUGGY]  return  new  double  exponent  causing  IOOBE(expPos  + "  is  not  a  valid  number.   ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  return  new  double  exponent  causing  IOOBE(expPos  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	return  new  double  exponent  causing  IOOBE(expPos  + "  is  not  a  valid  number.   ");	  return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
97	[BUG]  [BUGGY]  return  new  double  exponent.causing  IOOBE(str  + "  is  not  a  valid  number.   ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  return  new  double  exponent.causing  IOOBE(str  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	return  new  double  exponent.causing  IOOBE(str  + "  is  not  a  valid  number.   ");	  return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
98	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  exp  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  exp  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  exp  +  1);	  Integer    decPos    =    str.indexOf('.',    decPos    +    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
99	[BUG]  [BUGGY]  Integer  decPos  =  str.lastIndexOf('.',  decPos  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.lastIndexOf('.',  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.lastIndexOf('.',  decPos  +  1);	  Integer    decPos    =    str.indexOf('.',    decPos    +    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
100	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  exp  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.',  exp  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  exp  +  1);	  numDecimals    =    str.indexOf('.',    exp);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
101	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  dec);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.',  dec);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  dec);	  numDecimals    =    str.indexOf('.',    exp);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
102	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
103	[BUG]  [BUGGY]  if(numDecimals  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
104	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	36	None	replace
105	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  decPos;  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  decPos;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.')+  decPos;	  Integer    expPos    =    str.indexOf('.'    +    decPos);    	non-compiled	[CE]  'catch'  without  'try'	72	None	replace
106	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  decPos  +  1);  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.'  +  decPos  +  1);	  Integer    expPos    =    str.indexOf('.'    +    decPos);    	non-compiled	[CE]  'catch'  without  'try'	72	None	replace
107	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	64	None	replace
108	[BUG]  [BUGGY]  if(numDecimals  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	64	None	replace
109	[BUG]  [BUGGY]  if(decPos  <  expPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  expPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  expPos  ||  expPos  >  str.length())  {  return  null;  }	  if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	86	None	replace
110	[BUG]  [BUGGY]  if(decPos  <  exp.length()  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  exp.length()  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  exp.length()  ||  expPos  >  str.length())  {  return  null;  }	  if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	86	None	replace
111	[BUG]  [BUGGY]  if(expPos  <  decPos  ||  expPos  >=  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  <  decPos  ||  expPos  >=  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  <  decPos  ||  expPos  >=  str.length())  {  return  null;  }	  if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	86	None	replace
112	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.',  decPos  -  1);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  float  expPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	float  expPos  =  str.indexOf('.',  decPos  -  1);	  int    expPos    =    str.indexOf('.',    decPos    -    1);    	non-compiled	[CE]  'catch'  without  'try'	47	None	replace
113	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(0,  expPos);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  exponent  =  str.substring(0,  expPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  exponent  =  str.substring(0,  expPos);	  Exponent    exponent    =    str.substring(0,    decPos);    	non-compiled	[CE]  'catch'  without  'try'	70	None	replace
114	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos  +  1);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  exponent  =  str.substring(0,  decPos  +  1);	  Exponent    exponent    =    str.substring(0,    decPos);    	non-compiled	[CE]  'catch'  without  'try'	70	None	replace
115	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(1,  decPos);  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  exponent  =  str.substring(1,  decPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  exponent  =  str.substring(1,  decPos);	  Exponent    exponent    =    str.substring(0,    decPos);    	non-compiled	[CE]  'catch'  without  'try'	70	None	replace
116	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  exp);  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.indexOf('.',  exp);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.indexOf('.',  exp);	  final    int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	24	None	replace
117	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.')+  2;  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.')+  2;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.')+  2;	  numDecimals    =    str.indexOf('.')+    1;    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
118	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.')+  3;  [CE]  'catch'  without  'try'  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.')+  3;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.')+  3;	  numDecimals    =    str.indexOf('.')+    1;    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
119	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	31	None	replace
120	[BUG]  [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length())  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length())  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0  ||  expPos  >  str.length())  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	32	None	replace
121	[BUG]  [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	32	None	replace
122	[BUG]  [BUGGY]  double  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  double  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	double  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  float    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  'catch'  without  'try'	42	None	replace
123	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [CE]  'catch'  without  'try'  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  'catch'  without  'try'	76	None	replace
124	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    <    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	67	None	replace
125	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POP  +  1);  [CE]  'catch'  without  'try'  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POP  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  DEC_POP  +  1);	  Integer    decPos    =    str.indexOf('.',    DEC_POP);    	non-compiled	[CE]  'catch'  without  'try'	51	None	replace
126	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  1);  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  1);	  Integer    decPos    =    str.indexOf('.',    DEC_POP);    	non-compiled	[CE]  'catch'  without  'try'	51	None	replace
127	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  0);  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  0);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  0);	  Integer    decPos    =    str.indexOf('.',    DEC_POP);    	non-compiled	[CE]  'catch'  without  'try'	51	None	replace
128	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  2;  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  'catch'  without  'try'	49	None	replace
129	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  'catch'  without  'try'	49	None	replace
130	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  'catch'  without  'try'  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  char  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	char  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  'catch'  without  'try'	49	None	replace
131	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(expPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	81	None	replace
132	[BUG]  [BUGGY]  ||  expPos  <  str.length())  {  return  new  Double(decPos  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  ||  expPos  <  str.length())  {  return  new  Double(decPos  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	||  expPos  <  str.length())  {  return  new  Double(decPos  +  1);	  if(expPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
133	[BUG]  [BUGGY]  if(numDecimals  <  decPos)  {  if(decPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  decPos)  {  if(decPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  decPos)  {  if(decPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    0    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
134	[BUG]  [BUGGY]  if(numDecimals  <  decPos)  {  if(decPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  decPos)  {  if(decPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  decPos)  {  if(decPos  <  0  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    0    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	65	None	replace
135	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    0    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	65	None	replace
136	[BUG]  [BUGGY]  Integer  expPos  =  str.lastIndexOf('.',  decPos);  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.lastIndexOf('.',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.lastIndexOf('.',  decPos);	  Integer    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	13	None	replace
137	[BUG]  [BUGGY]  Integer  expPos  =  str.lastIndexOf('.',  numDecimals);  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.lastIndexOf('.',  numDecimals);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.lastIndexOf('.',  numDecimals);	  Integer    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	13	None	replace
138	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('C')+  1;  [CE]  'catch'  without  'try'  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('C')+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('C')+  1;	  Integer    expPos    =    str.indexOf('.'    +    1);    	non-compiled	[CE]  'catch'  without  'try'	50	None	replace
139	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('D')+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('D')+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('D')+  1;	  Integer    expPos    =    str.indexOf('.'    +    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
140	[BUG]  [BUGGY]  final  float  expPos  =  str.indexOf('.',  expPos);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  float  expPos  =  str.indexOf('.',  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  float  expPos  =  str.indexOf('.',  expPos);	  float    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
141	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos  +  1);	  Integer    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
142	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.',  expPos);	  Integer    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
143	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos  -  1);	  Integer    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
144	[BUG]  [BUGGY]  if(numDecimals  ==  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
145	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    IOOBE;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
146	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    IOOBE;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
147	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    IOOBE;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
148	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  -1)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  -1)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    IOOBE;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
149	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;	  int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
150	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('D')+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('D')+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('D')+  1;	  int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
151	[BUG]  [BUGGY]  char  decPos  =  str.indexOf('.');  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  char  decPos  =  str.indexOf('.');  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	char  decPos  =  str.indexOf('.');	  int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
152	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  exp);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  decPos  =  str.indexOf('.',  exp);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  decPos  =  str.indexOf('.',  exp);	  int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
153	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('D')+  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('D')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('D')+  1;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
154	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
155	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
156	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	char  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
157	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.',  decPos);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.lastIndexOf('.',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.lastIndexOf('.',  decPos);	  int    expPos    =    str.lastIndexOf('.',    expPos);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
158	[BUG]  [BUGGY]  final  float  expPos  =  str.indexOf('.',  decPos);  [CE]  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  float  expPos  =  str.indexOf('.',  decPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  float  expPos  =  str.indexOf('.',  decPos);	  float    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  	7	None	replace
159	[BUG]  [BUGGY]  String  expPos  =  str.indexOf('.');  [CE]  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  String  expPos  =  str.indexOf('.');  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  expPos  =  str.indexOf('.');	  char    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	60	None	replace
160	[BUG]  [BUGGY]  final  char  expPos  =  str.indexOf('.');  [CE]  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  char  expPos  =  str.indexOf('.');  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  char  expPos  =  str.indexOf('.');	  char    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	60	None	replace
161	[BUG]  [BUGGY]  char  expPos  =  str.lastIndexOf('.');  [CE]  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  char  expPos  =  str.lastIndexOf('.');  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	char  expPos  =  str.lastIndexOf('.');	  char    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	60	None	replace
162	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  numDecimals;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
163	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  3;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  3;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  3;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
164	[BUG]  [BUGGY]  if(numDecimals  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
165	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
166	[BUG]  [BUGGY]  if(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(expPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  	84	None	replace
167	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  dec);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  dec);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.lastIndexOf('.',  dec);	  final    int    expPos    =    str.indexOf('.',    dec);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
168	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(mant);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
169	[BUG]  [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length())  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0  ||  expPos  >  str.length())  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0  ||  expPos  >  str.length())  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(mant);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
170	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(mant);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
171	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(mant);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
172	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(expPos  >  -1  ||  expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(expPos  >  -1  ||  expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(expPos  >  -1  ||  expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
173	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(DecPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(DecPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(DecPos  +  1);  }	  if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
174	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())return  new  Double(decPos  +  1);  }	  if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
175	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(mant  ==  null)  {  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    <    decPos)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
176	[BUG]  [BUGGY]  if(numDecimals  ==  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    <    decPos)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
177	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  decPos  +  1,  expPos);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.',  decPos  +  1,  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  decPos  +  1,  expPos);	  numDecimals    =    str.indexOf('.',    decPos    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }	  Preconditions.checkState(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.	  Preconditions.checkState(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
180	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  -  1  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  -  1  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.',  decPos  -  1  +  1);	  int    expPos    =    str.indexOf('.',    decPos    -    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
181	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.')+  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  char  expPos  =  str.indexOf('.')+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	char  expPos  =  str.indexOf('.')+  1;	  char    expPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
182	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  1  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.',  decPos)+  1  +  1;	  int    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
183	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.',  decPos)+  1;  [CE]  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  float  expPos  =  str.indexOf('.',  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	float  expPos  =  str.indexOf('.',  decPos)+  1;	  int    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  	83	None	replace
184	[BUG]  [BUGGY]  if(numDecimals!=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals!=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals!=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    <    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  	67	None	replace
185	[BUG]  [BUGGY]  if(numDecimals  <  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    <    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  	67	None	replace
186	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  expPos  +  1);  [CE]  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.',  expPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.',  expPos  +  1);	  int    expPos    =    str.lastIndexOf('.',    expPos);    	non-compiled	[CE]  	23	None	replace
187	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  1;  [CE]  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  decPos  =  str.indexOf('.')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  decPos  =  str.indexOf('.')+  1;	  int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  	44	None	replace
188	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  expPos);  [CE]  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  decPos  =  str.indexOf('.',  expPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  decPos  =  str.indexOf('.',  expPos);	  int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  	44	None	replace
189	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [CE]  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  -1)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    IOOBE;    }    	non-compiled	[CE]  	27	None	replace
190	[BUG]  [BUGGY]  if(numDecimals  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    >=    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
191	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    >=    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
192	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  1  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  1  +  1;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
193	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  2;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  2;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  ')'  expected	16	None	replace
194	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  DEC);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.',  DEC);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  DEC);	  final    int    expPos    =    str.indexOf('.',    dec);    	non-compiled	[CE]  ')'  expected	78	None	replace
195	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  -decPos);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.',  -decPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  -decPos);	  final    int    expPos    =    str.indexOf('.',    dec);    	non-compiled	[CE]  ')'  expected	78	None	replace
196	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos  +  2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos  +  2);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  decPos  +  2);	  Integer    decPos    =    str.indexOf('.',    decPos    +    1);    	non-compiled	[CE]  ')'  expected	20	None	replace
197	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos  +  3);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos  +  3);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  decPos  +  3);	  Integer    decPos    =    str.indexOf('.',    decPos    +    1);    	non-compiled	[CE]  ')'  expected	20	None	replace
198	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos  -  1);  [CE]  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  decPos  -  1);	  Integer    decPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  	17	None	replace
199	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.',  expPos  +  1);  [CE]  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  float  expPos  =  str.indexOf('.',  expPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	float  expPos  =  str.indexOf('.',  expPos  +  1);	  float    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  	22	None	replace
200	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  decPos);  [CE]  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  String  exp  =  str.substring(0,  decPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  exp  =  str.substring(0,  decPos);	  String    exp    =    str.substring(0,    str.length());    	non-compiled	[CE]  	33	None	replace
201	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  String  exp  =  str.substring(0,  str.length()  -  2);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  exp  =  str.substring(0,  str.length()  -  2);	  String    exp    =    str.substring(0,    str.length());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }	  Preconditions.checkState(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	57	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(decPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Preconditions.checkState(decPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Preconditions.checkState(decPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }	  Preconditions.checkState(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	57	None	replace
204	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.')+  1  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.')+  1  +  1;	  numDecimals    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
205	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.');  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.');  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.');	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
206	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1  +  1;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
207	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
208	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    0    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
209	[BUG]  [BUGGY]  if(numDecimals  <  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    0    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
210	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decP  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decP  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decP	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
211	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
212	[BUG]  [BUGGY]  if(numDecimals  <  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    <    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
213	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(mant);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
214	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(mant);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
215	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  -1)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  -1)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(mant);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
216	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
217	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
218	[BUG]  [BUGGY]  Integer  dec  =  str.substring(0,  decPos);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  dec  =  str.substring(0,  decPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  dec  =  str.substring(0,  decPos);	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
219	[BUG]  [BUGGY]  Integer  decPos  =  str.substring(0,  decPos);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.substring(0,  decPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.substring(0,  decPos);	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
220	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.')+  1;	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
221	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  DEC_POP);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.indexOf('.',  DEC_POP);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.indexOf('.',  DEC_POP);	  final    int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
222	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.'  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.indexOf('.'  +  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.indexOf('.'  +  1);	  final    int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
223	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.',  decPos);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.indexOf('.',  decPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.indexOf('.',  decPos);	  final    int    decPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
224	[BUG]  [BUGGY]  final  int  decPos  =  str.lastIndexOf('.',  DEC_POP);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.lastIndexOf('.',  DEC_POP);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.lastIndexOf('.',  DEC_POP);	  final    int    decPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
225	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
226	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  decPos)+  1  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.',  decPos)+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  decPos)+  1  +  1;	  numDecimals    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
227	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
228	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
229	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
230	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
231	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  DEC_POP  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.',  DEC_POP  -  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  DEC_POP  -  1);	  final    int    expPos    =    str.indexOf('.',    DEC_POP);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
232	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.')+  2;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.')+  2;	  int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
233	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.')+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  float  expPos  =  str.indexOf('.')+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	float  expPos  =  str.indexOf('.')+  1;	  int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
234	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  1  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.')+  1  +  1;	  int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number	  Preconditions.checkState(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  +  [CE]  'catch'  without  'try'  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  +  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Preconditions.checkState(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  +	  Preconditions.checkState(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  'catch'  without  'try'	59	None	replace
237	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(decPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	39	None	replace
238	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(decPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	39	None	replace
239	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(decPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	39	None	replace
240	[BUG]  [BUGGY]  if(decPos  <  numDecimals)  {  if(decPos  >  0  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  numDecimals)  {  if(decPos  >  0  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  numDecimals)  {  if(decPos  >  0  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(decPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	39	None	replace
241	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	31	None	replace
242	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  -1  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  -1  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >  -1  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	82	None	replace
243	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(mant  ==  null)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(mant  ==  null)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(mant  ==  null)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	32	None	replace
244	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	32	None	replace
245	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(mant  ==  null)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(mant  ==  null)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(mant  ==  null)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	32	None	replace
246	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  DEC  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.',  DEC  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  DEC  +  1);	  numDecimals    =    str.indexOf('.',    expPos    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
247	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  DEC_POP  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.',  DEC_POP  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  DEC_POP  +  1);	  numDecimals    =    str.indexOf('.',    expPos    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
248	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
249	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
250	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POINT);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POINT);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  DEC_POINT);	  Integer    decPos    =    str.indexOf('.',    DEC_POP);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
251	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  Double.valueOf(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  Double.valueOf(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  Double.valueOf(decPos  +  1);  }	  if(numDecimals    <    decPos)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
252	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())return  new  Double(decPos  +  1);  }	  if(numDecimals    <    decPos)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
253	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.')+  1  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.indexOf('.')+  1  +  1;	  final    int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
254	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
255	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >=  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >=  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >=  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
256	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos  -  1);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  exponent  =  str.substring(0,  decPos  -  1);	  Exponent    exponent    =    str.substring(0,    decPos);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
257	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(expPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
258	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  0)  {  exp  =  str.substring(0,  decPos);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  0)  {  exp  =  str.substring(0,  decPos);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >  0)  {  exp  =  str.substring(0,  decPos);  }	  if(expPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
259	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  0)  {  return  new  Double(expPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  0)  {  return  new  Double(expPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >  0)  {  return  new  Double(expPos  +  1);  }	  if(expPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
260	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  1  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  decPos)+  1  +  1;	  Integer    decPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
261	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  2;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  decPos)+  2;	  Integer    decPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
262	[BUG]  [BUGGY]  Integer  decPos  =  str.lastIndexOf('.',  expPos  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  decPos  =  str.lastIndexOf('.',  expPos  +  1);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.lastIndexOf('.',  expPos  +  1);	  Integer    decPos    =    str.lastIndexOf('.',    expPos);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
263	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  <  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
264	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >=  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
265	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(0,  numDecimals);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  mant  =  str.substring(0,  numDecimals);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  mant  =  str.substring(0,  numDecimals);	  Exponent    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
266	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(0,  DECImal);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  mant  =  str.substring(0,  DECImal);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  mant  =  str.substring(0,  DECImal);	  Exponent    mant    =    str.substring(0,    decPos);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
267	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.')+  1  +  1;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
268	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  3;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  3;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.')+  3;	  Integer    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
269	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1  &&  expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1  &&  expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
270	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  decPos  +  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.',  decPos  +  2);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  decPos  +  2);	  numDecimals    =    str.indexOf('.',    decPos    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
271	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(expPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
272	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  -1)  {  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  -1)  {  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
273	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
274	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
275	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(mant);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
276	[BUG]  [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos);  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(mant);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
277	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
278	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
279	[BUG]  [BUGGY]  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
280	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    0    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
281	[BUG]  [BUGGY]  if(expPos  >  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  0)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    0    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
282	[BUG]  [BUGGY]  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    0    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
283	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    IOOBE;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
284	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    IOOBE;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
285	[BUG]  [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    IOOBE;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
286	[BUG]  [BUGGY]  if(decPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
287	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
288	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')-  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')-  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')-  1;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')/    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
289	[BUG]  [BUGGY]  float  expPos  =  str.lastIndexOf('.',  expPos);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  float  expPos  =  str.lastIndexOf('.',  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	float  expPos  =  str.lastIndexOf('.',  expPos);	  int    expPos    =    str.lastIndexOf('.',    expPos);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
290	[BUG]  [BUGGY]  double  expPos  =  str.lastIndexOf('.',  expPos);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  double  expPos  =  str.lastIndexOf('.',  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	double  expPos  =  str.lastIndexOf('.',  expPos);	  int    expPos    =    str.lastIndexOf('.',    expPos);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
291	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')/  1;	  final    int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
292	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.')+  str.indexOf('e')+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.')+  str.indexOf('e')+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.')+  str.indexOf('e')+  1;	  numDecimals    =    str.indexOf('.',    expPos    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
293	[BUG]  [BUGGY]  Character  expPos  =  str.indexOf('.',  expPos);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Character  expPos  =  str.indexOf('.',  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Character  expPos  =  str.indexOf('.',  expPos);	  char    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
294	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    <    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
295	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    <    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
296	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }	  Preconditions.checkState(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
297	[BUG]  [BUGGY]  if(decPos  >=  decPos)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >=  decPos)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >=  decPos)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
298	[BUG]  [BUGGY]  if(decPos  >=  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >=  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >=  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  not  a  statement	85	None	replace
299	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
300	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
301	[BUG]  [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return;    }    	non-compiled	[CE]  not  a  statement	26	None	replace
302	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  not  a  statement	31	None	replace
303	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  not  a  statement	31	None	replace
304	[BUG]  [BUGGY]  if(numDecimals  <  =  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  =  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  =  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  not  a  statement	31	None	replace
305	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
306	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())return  null;  }	  if(numDecimals    ==    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
307	[BUG]  [BUGGY]  Double  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Double  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Double  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	  float    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
308	[BUG]  [BUGGY]  return  new  double  exponent(causing  IOOBE,  str  + "  is  not  a  valid  number.   ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  return  new  double  exponent(causing  IOOBE,  str  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	return  new  double  exponent(causing  IOOBE,  str  + "  is  not  a  valid  number.   ");	  return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
309	[BUG]  [BUGGY]  return  new  double  exponent(causing  IOOBE(str  + "  is  not  a  valid  number.   ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  return  new  double  exponent(causing  IOOBE(str  + "  is  not  a  valid  number.   ");  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	return  new  double  exponent(causing  IOOBE(str  + "  is  not  a  valid  number.   ");	  return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.       ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
310	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)/  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)/  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.',  decPos)/  1;	  int    expPos    =    str.indexOf('.',    decPos)+    1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
311	[BUG]  [BUGGY]  if(decPos  >  -1)  {  expPos  =  str.indexOf('.',  expPos);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  expPos  =  str.indexOf('.',  expPos);  }  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  expPos  =  str.indexOf('.',  expPos);  }	  double    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
312	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    <    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
313	[BUG]  [BUGGY]  if(expPos  >  0)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  0)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  0)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    <    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
314	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(DecPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(DecPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(DecPos  +  1);  }	  if(expPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
315	[BUG]  [BUGGY]  Exponent  <?>  exponent  =  str.substring(0,  decPos);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  <?>  exponent  =  str.substring(0,  decPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  <?>  exponent  =  str.substring(0,  decPos);	  if(expPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
316	[BUG]  [BUGGY]  if(numDecimals  >  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  >  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  >  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    ==    0)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
317	[BUG]  [BUGGY]  if(numDecimals  <  decPos)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  decPos)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  decPos)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
318	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(expPos  <  decPos  +  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
319	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos)+  1;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos)+  1;	  Integer    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
320	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1).length();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1).length();  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.',  decPos  +  1).length();	  int    expPos    =    str.indexOf('.',    decPos    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
321	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
322	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  <  decPos)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  <  decPos)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(decPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
323	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(decPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
324	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.')+  4;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  numDecimals  =  str.indexOf('.')+  4;  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.')+  4;	  numDecimals    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
325	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(numDecimals    <    decPos)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
326	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  break;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
327	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
328	[BUG]  [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }	  if(mant    ==    null)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
329	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    <    decPos)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
330	[BUG]  [BUGGY]  if(numDecimals  <  decPos)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(numDecimals  <  decPos)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  decPos)  {  if(expPos  >  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    <    decPos)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
331	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  if(expPos  >  expPos.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  <  decPos)  {  if(expPos  >  expPos.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  <  decPos)  {  if(expPos  >  expPos.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    <    decPos)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
332	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(numDecimals  >=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(expPos  >  -1)  {  if(numDecimals  >=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(numDecimals  >=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    >=    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
333	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  >=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(numDecimals  >=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(numDecimals  >=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(numDecimals    >=    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
334	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos  +  2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos  +  2);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  exponent  =  str.substring(0,  decPos  +  2);	  Exponent    exponent    =    str.substring(0,    decPos);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
335	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.')+  str.indexOf('-')+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  decPos  =  str.indexOf('.')+  str.indexOf('-')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.indexOf('.')+  str.indexOf('-')+  1;	  final    int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
336	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(mant    ==    null)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
337	[BUG]  [BUGGY]  if(decPos  <  decPos  ||  expPos  >  str.length())  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(de  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  <  decPos  ||  expPos  >  str.length())  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(de  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  decPos  ||  expPos  >  str.length())  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(de	  if(mant    ==    null)    {    if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
338	[BUG]  [BUGGY]  Double  expPos  =  str.indexOf('.',  expPos);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Double  expPos  =  str.indexOf('.',  expPos);  [BUGGY]      if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Double  expPos  =  str.indexOf('.',  expPos);	  float    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
339	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('-')+  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('-')+  1;  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('-')+  1;	  final    int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
340	[BUG]  [BUGGY]  DesertionError.make(str,  decPos,  expPos,  numDecimals));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  DesertionError.make(str,  decPos,  expPos,  numDecimals));  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	DesertionError.make(str,  decPos,  expPos,  numDecimals));	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
341	[BUG]  [BUGGY]  DesertionError.make(str,  decPos,  expPos,  numDecimals);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  DesertionError.make(str,  decPos,  expPos,  numDecimals);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	DesertionError.make(str,  decPos,  expPos,  numDecimals);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
342	[BUG]  [BUGGY]  DesertionError.make(str,  decPos,  exp);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  DesertionError.make(str,  decPos,  exp);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	DesertionError.make(str,  decPos,  exp);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
343	[BUG]  [BUGGY]  DesertionError.make(str,  DEC_MINUS_ONE,  decPos));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  DesertionError.make(str,  DEC_MINUS_ONE,  decPos));  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	DesertionError.make(str,  DEC_MINUS_ONE,  decPos));	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
344	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  exp);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  final  int  expPos  =  str.indexOf('.',  exp);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  exp);	  final    int    expPos    =    str.indexOf('.',    dec);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
345	[BUG]  [BUGGY]  Iterator  <  String>  expPos  =  str.iterator().next();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  Iterator  <  String>  expPos  =  str.iterator().next();  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Iterator  <  String>  expPos  =  str.iterator().next();	  if(decPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
346	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  decPos);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.',  decPos);  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	FragmentDecimal  expPos  =  str.indexOf('.',  decPos);	  if(decPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
347	[BUG]  [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.');  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  FragmentDecimal  expPos  =  str.indexOf('.');  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	FragmentDecimal  expPos  =  str.indexOf('.');	  if(decPos    >    0)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
348	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ".);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ".);  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ".);  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
349	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( ". ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point      [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( ". ");  }  [BUGGY]      if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( ". ");  }	  if(numDecimals    ==    0)    {    if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
