bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  decPos);  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  numDecimals  =  str.indexOf('.',  decPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  decPos);	      numDecimals    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	10	None	replace
2	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  exp);  [CE]  'catch'  without  'try'  [FE]                  AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  numDecimals  =  str.indexOf('.',  exp);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  exp);	      numDecimals    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	10	None	replace
3	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.')+  1;  [CE]  'catch'  without  'try'  [FE]                    AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  numDecimals  =  str.indexOf('.')+  1;  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.')+  1;	      numDecimals    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	10	None	replace
4	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  1;  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  int  expPos  =  str.indexOf('.')+  1;  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.')+  1;	      int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	6	None	replace
5	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.',  decPos  +  1);	      int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  'catch'  without  'try'	16	None	replace
6	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos);  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  expPos  =  str.indexOf('.',  decPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  decPos);	      int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  'catch'  without  'try'	16	None	replace
7	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.',  decPos);  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  float  expPos  =  str.indexOf('.',  decPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	float  expPos  =  str.indexOf('.',  decPos);	      int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  'catch'  without  'try'	16	None	replace
8	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  expPos  +  1);  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  numDecimals  =  str.indexOf('.',  expPos  +  1);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  expPos  +  1);	      numDecimals    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	7	None	replace
9	[BUG]  [BUGGY]  numDecimals  =  str.lastIndexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  numDecimals  =  str.lastIndexOf('.',  expPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.lastIndexOf('.',  expPos);	      numDecimals    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	7	None	replace
10	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  decPos  +  1);  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  numDecimals  =  str.indexOf('.',  decPos  +  1);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  decPos  +  1);	      numDecimals    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	7	None	replace
11	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos);  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.',  decPos);	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
12	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1;  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1;  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.')+  1;	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
13	[BUG]  [BUGGY]  Integer  expPos  =  str.lastIndexOf('.');  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Integer  expPos  =  str.lastIndexOf('.');  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.lastIndexOf('.');	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
14	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.');  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  expPos  =  str.lastIndexOf('.');  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.lastIndexOf('.');	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  'catch'  without  'try'	11	None	replace
15	[BUG]  [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  decPos);  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  expPos  =  str.lastIndexOf('.',  decPos);  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.lastIndexOf('.',  decPos);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  'catch'  without  'try'	11	None	replace
16	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  1;  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  expPos  =  str.indexOf('.')+  1;  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  1;	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  'catch'  without  'try'	17	None	replace
17	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos);  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  decPos);	      Integer    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	14	None	replace
18	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos  +  1);  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos  +  1);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  expPos  +  1);	      Integer    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	14	None	replace
19	[BUG]  [BUGGY]  Integer  decPos  =  str.lastIndexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Integer  decPos  =  str.lastIndexOf('.',  expPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.lastIndexOf('.',  expPos);	      Integer    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	14	None	replace
20	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos  +  1);  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  decPos  +  1);	      Integer    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	14	None	replace
21	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  expPos  =  str.indexOf('.',  expPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  expPos);	      int    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	13	None	replace
22	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  float  expPos  =  str.indexOf('.',  expPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	float  expPos  =  str.indexOf('.',  expPos);	      int    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	13	None	replace
23	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  int  expPos  =  str.lastIndexOf('.',  expPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.lastIndexOf('.',  expPos);	      int    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	13	None	replace
24	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.');  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  decPos  =  str.indexOf('.');  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.indexOf('.');	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	1	None	replace
25	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   "    	non-compiled	[CE]  'catch'  without  'try'	12	None	replace
26	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   "    	non-compiled	[CE]  'catch'  without  'try'	12	None	replace
27	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  IOOBE;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   "    	non-compiled	[CE]  'catch'  without  'try'	12	None	replace
28	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  break;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   "    	non-compiled	[CE]  'catch'  without  'try'	12	None	replace
29	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
30	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
31	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
32	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                  AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(mant  ==  null)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
33	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length());  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  String  exp  =  str.substring(0,  str.length());  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  exp  =  str.substring(0,  str.length());	      String    exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  'catch'  without  'try'	9	None	replace
34	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length()  +  1);  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  String  exp  =  str.substring(0,  str.length()  +  1);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  exp  =  str.substring(0,  str.length()  +  1);	      String    exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  'catch'  without  'try'	9	None	replace
35	[BUG]  [BUGGY]  String  exp  =  str.substring(0,  str.length())+  1;  [CE]  'catch'  without  'try'  [FE]                  AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  String  exp  =  str.substring(0,  str.length())+  1;  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	String  exp  =  str.substring(0,  str.length())+  1;	      String    exp    =    str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  'catch'  without  'try'	9	None	replace
36	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	4	None	replace
37	[BUG]  [BUGGY]  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	4	None	replace
38	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                  AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(decPos  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	4	None	replace
39	[BUG]  [BUGGY]  if(numDecimals  <  decPos)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                    AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  <  decPos)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  decPos)  {  if(decPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	4	None	replace
40	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;	      int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  'catch'  without  'try'	15	None	replace
41	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	      int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  'catch'  without  'try'	15	None	replace
42	[BUG]  [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	float  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	      int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  'catch'  without  'try'	15	None	replace
43	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  decPos)+  1;  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  numDecimals  =  str.indexOf('.',  decPos)+  1;  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  decPos)+  1;	      numDecimals    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	7	None	replace
44	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.');  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  int  decPos  =  str.indexOf('.');  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  decPos  =  str.indexOf('.');	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	1	None	replace
45	[BUG]  [BUGGY]  final  int  decPos  =  str.indexOf('.')+  1;  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  decPos  =  str.indexOf('.')+  1;  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.indexOf('.')+  1;	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	1	None	replace
46	[BUG]  [BUGGY]  final  int  decPos  =  str.lastIndexOf('.');  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  decPos  =  str.lastIndexOf('.');  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  decPos  =  str.lastIndexOf('.');	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	1	None	replace
47	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  -  1);  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.',  decPos  -  1);	      int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  'catch'  without  'try'	16	None	replace
48	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	      	non-compiled	[CE]  'catch'  without  'try'	5	None	replace
49	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  'catch'  without  'try'  [FE]                  AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	      	non-compiled	[CE]  'catch'  without  'try'	5	None	replace
50	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  1);  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  1);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.'  +  1);	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
51	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POP);  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POP);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  DEC_POP);	      Integer    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	14	None	replace
52	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  char  expPos  =  str.indexOf('.',  expPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	char  expPos  =  str.indexOf('.',  expPos);	      int    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	13	None	replace
53	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   "    	non-compiled	[CE]  'catch'  without  'try'	12	None	replace
54	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   "    	non-compiled	[CE]  'catch'  without  'try'	12	None	replace
55	[BUG]  [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(mant);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   "    	non-compiled	[CE]  'catch'  without  'try'	12	None	replace
56	[BUG]  [BUGGY]  Exponent  mant  =  str.substring(0,  decPos);  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Exponent  mant  =  str.substring(0,  decPos);  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  mant  =  str.substring(0,  decPos);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  'catch'  without  'try'	11	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	17	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.  [CE]  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	17	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number  [CE]  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Preconditions.checkState(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	17	None	replace
60	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.');  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  char  expPos  =  str.indexOf('.');  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	char  expPos  =  str.indexOf('.');	      int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	6	None	replace
61	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  DEC_POP);  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  expPos  =  str.indexOf('.',  DEC_POP);  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  DEC_POP);	  final    int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	2	None	replace
62	[BUG]  [BUGGY]  numDecimals  =  str.indexOf('.',  DEC);  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  numDecimals  =  str.indexOf('.',  DEC);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.indexOf('.',  DEC);	      numDecimals    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	10	None	replace
63	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	4	None	replace
64	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	4	None	replace
65	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                  AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(expPos  <  0  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	4	None	replace
66	[BUG]  [BUGGY]  if(numDecimals  >=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  >=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  >=  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
67	[BUG]  [BUGGY]  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
68	[BUG]  [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  ==  0)  {  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
69	[BUG]  [BUGGY]  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  [CE]  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	return  new  double  exponent  causing  IOOBE(str  + "  is  not  a  valid  number.   ");	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	17	None	replace
70	[BUG]  [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos);  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Exponent  exponent  =  str.substring(0,  decPos);  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Exponent  exponent  =  str.substring(0,  decPos);	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    double    exponent    causing    IOOBE(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  'catch'  without  'try'	17	None	replace
71	[BUG]  [BUGGY]  double  expPos  =  str.indexOf('.',  expPos);  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  double  expPos  =  str.indexOf('.',  expPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	double  expPos  =  str.indexOf('.',  expPos);	      int    expPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	13	None	replace
72	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  decPos);  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Integer  expPos  =  str.indexOf('.'  +  decPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  expPos  =  str.indexOf('.'  +  decPos);	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	8	None	replace
73	[BUG]  [BUGGY]  numDecimals  =  str.lastIndexOf('.',  decPos);  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  numDecimals  =  str.lastIndexOf('.',  decPos);  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	numDecimals  =  str.lastIndexOf('.',  decPos);	      numDecimals    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	7	None	replace
74	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  1;  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos)+  1;  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	Integer  decPos  =  str.indexOf('.',  decPos)+  1;	      Integer    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  'catch'  without  'try'	14	None	replace
75	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   "    	non-compiled	[CE]  'catch'  without  'try'	12	None	replace
76	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	1	None	replace
77	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')/  1;	      int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  'catch'  without  'try'	15	None	replace
78	[BUG]  [BUGGY]  final  int  expPos  =  str.indexOf('.',  dec);  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  final  int  expPos  =  str.indexOf('.',  dec);  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	final  int  expPos  =  str.indexOf('.',  dec);	  final    int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  'catch'  without  'try'	2	None	replace
79	[BUG]  [BUGGY]  if(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  'catch'  without  'try'  [FE]        AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(decPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    //    prevents    double    exponent    causing    IOOBE    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  'catch'  without  'try'	11	None	replace
80	[BUG]  [BUGGY]  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]            AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(numDecimals  <  decPos)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
81	[BUG]  [BUGGY]  if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
82	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  new  Double(decPos  +  1);  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    new    Double(decPos    +    1);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
83	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  1;  [CE]  'catch'  without  'try'  [FE]          AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  int  expPos  =  str.indexOf('.',  decPos)+  1;  [BUGGY]    if  (expPos  >  -1)  {  //  there  is  an  exponent    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE          throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	int  expPos  =  str.indexOf('.',  decPos)+  1;	      int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  'catch'  without  'try'	16	None	replace
84	[BUG]  [BUGGY]  if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]              AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  0)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	4	None	replace
85	[BUG]  [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  >  -1)  {  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	4	None	replace
86	[BUG]  [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [CE]  'catch'  without  'try'  [FE]                  AssertionError    [CONTEXT]    String  dec;  String  exp;  final  int  decPos  =  str.indexOf('.');  final  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  //  assumes  both  not  present    int  numDecimals  =  0;  //  Check  required  precision  (LANG-693)  if  (decPos  >  -1)  {  //  there  is  a  decimal  point    [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }  [BUGGY]    if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  numDecimals  =  dec.length();  //  gets  number  of  digits  past  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	if(expPos  <  decPos  ||  expPos  >  str.length())  {  return  null;  }	  if(decPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    return    null;    }    	non-compiled	[CE]  'catch'  without  'try'	4	None	replace
