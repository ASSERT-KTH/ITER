increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,str.substring(0, str.length()); str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(dec!=  null)  {  if(expPos  >  -1)  {  dec  =  str.substring(0,  decPos);  }  ,exp = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos,  mant);  ,dec = str.substring(decPos, expPos);
increase failing tests,571,replace, [FE] AssertionError testCreateNumberFailure_4, exp    =    str.substring(expPos    +    1,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str.substring(expPos  +  1));  }  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length()); if(dec == null) { return createInteger(str.substring(expPos + 1)); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(decPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length());
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                dec        =        str.substring(0,        expPos);        dec    =    str.substring(0,    expPos);    dec  =  str.substring(decPos  +  1,  str.length()  -  1);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos); dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                dec        =        str.substring(0,        expPos);        dec    =    str.substring(0,    expPos);    dec  =  str.substring(decPos  +  1,  str.length()  -  1);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos); dec = str.substring(decPos + 1, str.length()); }
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.length  ,exp = str.substring(0, str.length() + 1); if(expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); }
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.length  ,exp = str.substring(0, str.length() + 1); if(expPos > -1 && expPos < str.length()) { exp = str.substring(expPos + 1, str.length()); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1);  if(dec  ==  expPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1); if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1);  if(dec  ==  expPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1); if(expPos > 0) { throw new NumberFormatException(""); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos - 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos - 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =(expPos  ==  0)?  str.length()  :  f;  ,str.substring(0, str.length()).substring(expPos + 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =(expPos  ==  0)?  str.length()  :  f;  ,str.substring(0, str.length() - 1).substring(decPos + 1);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str  =  str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str  =  str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length());
increase failing tests,594,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  if(f  ==  null)  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > 0) { if(expPos > 0) { throw new NumberFormatException(" "); }
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  dec.numOctal;  ,return decPos;
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, return  f.number;  ,return expPos;
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  ,if(dec!= null && expPos > -1 && expPos < str.length()) {
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  'P',  allZeros);  ,dec = str.substring(decPos - 1, expPos - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length()); str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length() + 1); str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length()); str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  >  -1  &&  str.length()  >  0)  {  ,if(expPos > -1 && decPos > -1 && str.length() > 0) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  >  -1  &&  str.length()  >  0)  {  ,if(expPos > -1 && expPos > str.length()) {
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null  &&  exp  ==  null)  {  return  createInteger(str.substring(expPos  +  1,  str.length()  -  1));  }  ,exp = str.substring(expPos + 1, str.length()); if(expPos > -1 && expPos < str.length()) { return createInteger(str.substring(expPos + 1, str.length())); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  <  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(dec == null) { if(expPos > -1 && decPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  <  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(f == null) { if(expPos > -1 && decPos < -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  <  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(f == null) { if(expPos > -1 && decPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(f == null) { if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(dec == null) { if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, final  Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  ,if(decPos > -1) { if(decPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, final  Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  ,if(mant == null) { if(decPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, final  Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  ,if(decPos > -1) { if(decPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length()); str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length()); str.substring(0, str.length());
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(!expPos)  {  ,if(expPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length()) { throw new NumberFormatException(" "); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); str.substring(0, str.length()); str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); str.substring(0, str.length()); str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); str.substring(1, str.length()); str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); str.substring(2, str.length()); str.substring(expPos + 1, str.length());
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, final  boolean  allZeros  =  isAllZeros(exp)&&  isAllZeros(mant);  ,exp = str.substring(expPos + 1, str.length()) + 1; if(dec == null) {
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!  ,dec = str.substring(decPos - 1, expPos); if(expPos > -1) { if(expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  <  -1  &&  expPos  <  str.length()  -  1)  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(expPos > -1) { if(expPos == str.length() - 1) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  <  -1  &&  expPos  <  str.length()  -  1)  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(expPos > -1) { if(expPos == str.length()) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(mant):  Float.parseFloat(f);  ,dec = str.substring(decPos + 1, expPos); int numDecimal = str.indexOf('E', 'E')+ 1;
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1,  expPos  /  1);  dec = str.substring(decPos + 1, expPos / 2);
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1,  expPos  /  1);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos / 2); }
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1,  expPos  /  1);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos / 2); } else { dec = str.substring(decPos + 1, expPos / 2); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =  str.lastIndexOf('e',  '0');  ,int e = str.lastIndexOf('e', '0');
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, return  f.intValue;  ,return str.indexOf(' ', expPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  *  1;  ,return f * 2;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  *  1;  ,return f + 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  *  1;  ,return f * 3;
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('  '),  0;  ,if(expPos > -1 && expPos > -1) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('  '),  0;  ,if(expPos > -1 && expPos > -1) { if(expPos > -1 && expPos < str.length()) { return createDouble(str); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); str.substring(1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); str.substring(2, str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1  -  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1  -  1);  dec = str.substring(decPos + 1); dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1  -  1);  dec = str.substring(decPos + 1, expPos); dec = str.substring(decPos + 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length()));  ,exp = str.substring(0, str.length() - 2);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(f.charAt(0)  ==  '-')  {  f  =  createInteger(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros  ,dec = str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length()); str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length()); str.substring(1, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() + 1); str.substring(expPos + 1, str.length()); str.substring(0, str.length());
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  int  expPos  =  str.substring(0,  str.length()  -  1);  if(expPos  >  -1  &&  expPos  <  str.  ,if(expPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length()) { return createInteger(str); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  int  expPos  =  str.substring(0,  str.length()  -  1);  if(expPos  >  -1  &&  expPos  <  str.  ,if(expPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    +    1,    expPos    +    1);    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  int  expPos  =  str.lastIndexOf('e',  expPos);  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos + 1); dec = str.substring(decPos + 1, expPos); if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  if(dec  ==  null)  {  exp  =  str.substring(decPo  ,exp = str.substring(0, str.length()); if(expPos > -1 && expPos < str.length()) { exp = str.substring(expPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  {  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.doubleValue()  ==  ,if(expPos > -1) { if(expPos < str.length()) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  ,if(expPos < -1 && expPos < str.length()) {
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  ,if(expPos == -1 && expPos < str.length()) {
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                str.substring(decPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 2);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,dec = str.substring(decPos + 1, expPos + 1); dec = str.substring(decPos + 1, expPos);
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.indexOf('  ',  -1);  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) { if(decPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.indexOf('  ',  -1);  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) { if(decPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos)+  1;  ,if(expPos > -1 && expPos < str.length()) { if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos)+  1;  ,if(expPos > -1 || expPos < str.length()) { if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); str.substring(0, str.length()); str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); str.substring(0, str.length()); str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); str.substring(1, str.length()); str.substring(0, str.length());
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); str.substring(str.charAt(0));
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); str.substring(1, str.length() - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,dec = str.substring(decPos + 2, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  -=  str.substring(expPos  +  1,  str.length()).toString();  ,exp = str.substring(expPos + 1, str.length()).toString();
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  f.numElement;  ,return numDecimals;
increase failing tests,570,replace, [FE] AssertionError testCreateNumberFailure_4, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createDouble(str.substring(expPos  +  1);  }  ,if(expPos > -1 && expPos > -1 && expPos < str.length()) { if(dec == null) { return createDouble(str.substring(expPos + 1, str.length())); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, createInteger(decPos,  str,  expPos);  ,dec = str.substring(decPos + 1, expPos + 1); if(expPos > -1) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length()); str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length()); str.substring(0, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =(str  ==  null)?  -1  :  str.length();  ,int length =(str == null)? -1 : str.length();
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.length()  ,exp = str.substring(0, str.length() - 2);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.length()  ,exp = str.substring(0, str.length() - 3);
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  ,if(dec == null || expPos > -1 && expPos < str.length()) {
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                dec        =        str.substring(0,        expPos);        dec    =    str.substring(0,    expPos);    dec  =  str.substring(decPos  +  1,  str.length());  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos); dec = str.substring(decPos + 1, str.length()); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 2, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 2);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  ,if(expPos > -1 && expPos < decPos) { if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  ,if(decPos > -1 && expPos < decPos) { if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  ,if(expPos > 1 && expPos < decPos) { if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  <  -1)  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(f == null) { if(expPos > -1 && decPos < -1) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  <  -1)  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(dec == null) { if(expPos > -1 && decPos < -1) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  <  -1)  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(f == null) { if(expPos > -1 && expPos < -1) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumberFailure_4, exp  =  str.substring(expPos  +  1,  str.length()  -  1)  +  1;  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createNumber(str.substring(exp  ,exp = str.substring(expPos + 1, str.length())+ 1; if(dec == null) { return createNumber(str.substring(expPos + 1, str.length())); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createDouble(str.substring(expPos  +  1,  str.length()  -  1);  }  ,if(dec == null) { if(expPos > -1 && expPos < str.length()) { return createDouble(str.substring(expPos + 1, str.length() - 1)); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f),  exp  :  Float.parseFloat(f,  exp);  ,dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f),  exp  :  Float.parseFloat(f,  exp);  ,dec = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f),  exp  :  Float.parseFloat(f,  exp);  ,dec = str.substring(decPos, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, boolean  allZeros  =  isAllZeros(mant)&&  isAllZeros(exp);  ,boolean ALLZeros = isAllZeros(mant)&& isAllZeros(exp);
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str  =  str.substring(0,  expPos  -  1);  ,exp = str.substring(0, expPos - 1);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  str.substring(1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(dec.length()  ==  0)  {  if(dec.charAt(0)  ==  '-')  {  f  =  createLong(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZ  ,exp = str.substring(0, str.length() - 1); str.substring(0, str.length() - 1);
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, return  Float.parseFloat(mant);  ,return Float.parseFloat(str);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(exp,  mant,  f);  ,if(decPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); } else { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('  ')-  1,  numDecimals;  ,if(expPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length()) { return createDouble(str); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  expPAs  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(expPos > -1 && expPos < str.length()) { if(dec == null && expPos > -1 && expPos < str.length()) { return createInteger(str); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =(expPos  ==  0)?  str.length()  :  1;  ,str.substring(0, str.length()).substring(expPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =(expPos  ==  0)?  str.length()  :  1;  ,str.substring(0, str.length() - 1).substring(decPos);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =(expPos  ==  0)?  str.length()  :  1;  ,str.substring(0, str.length() - 3).substring(decPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 2, str.length());
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!(str.isInfinite()  ||(pfx.doubleValue()  ==  0.0F  &&!allZeros)))  {  ,dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(0, expPos);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length()).toLowerCase();  dec  =  str.substring(decPos  +  1,  str.length()).toLowerCase();  ,exp = str.substring(expPos + 1, str.length() - 2); dec = str.substring(decPos + 1, str.length()).toLowerCase();
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(f.length()  ==  1)  {  f  =  createLong(str);  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0F  &&!allZeros)))  {  f;  }  ,dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  expPos  <  str.length()  -  1)  {  return  createDouble(str);  }  ,if(dec == null && expPos < str.length()) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 2, str.length());
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testIsNumber,         str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length() - 2); dec = str.substring(decPos + 1, str.length());
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos + 1); if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    +    1,    expPos    -    1);    dec  =  str.substring(decPos  -  1,  expPos  -  1);  if(expPos  >  -1)  {  int  expPos  =  str.lastIndexOf('e')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos - 1, expPos - 1); if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, createInteger(decPos,  expPos,  -1);  ,dec = str.substring(decPos + 1, expPos); int numDecimal = str.indexOf('E', 'E');
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, str  =  str.substring(strPos  +  1,  str.length());  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, str  =  str.substring(strPos  +  1,  str.length());  ,exp = str.substring(expPos + 1, str.length() - 1); exp = str.substring(expPos + 1, str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(!(str.isInfinite()  ||(str.charValue()  ==  0.0S  &&!allZeros)))  {  ,if(dec!= null && expPos > -1 && expPos < str.length() - 1) {
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(0,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(0, str.indexOf('n', expPos)); dec = str.substring(decPos + 1, str.length());
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, dec  =  str.substring(0,  expPos);  exp  =  str.substring(expPos  -  1,  str.length());  ,dec = str.substring(0, expPos); exp = str.substring(decPos - 1, str.length());
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  if(  }  ,dec = str.substring(0, expPos);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, &&!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  {  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.doubleValue()  ==  ,if(expPos > -1) { if(expPos < str.length() - 1) { throw new NumberFormatException(" "); }
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length() + 1)+ 1;
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length() + 1);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length() - 1); exp = str.substring(expPos + 1, str.length() + 1)+ 1;
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  -=  str.substring(expPos  +  1,  str.length()).toLowerCase();  ,exp = str.substring(expPos + 1, str.length()).toLowerCase();
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1    -    1);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  }  dec = str.substring(decPos + 1, expPos);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2); dec = str.substring(decPos + 1, str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  -1  &&  expPos  <  str.length()  1)  {  ,if(expPos > -1 && expPos < 0 && expPos < str.length() - 1) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( " ");  }  ,if(dec == null && expPos > -1 && expPos < str.length()) { if(dec == null && expPos > -1 && expPos < str.length()) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( " ");  }  ,if(expPos > -1 && expPos < str.length()) { if(dec == null && expPos > -1 && expPos < str.length()) { throw new NumberFormatException(" "); }
increase failing tests,573,replace, [FE] StackOverflowError testCreateNumber,         str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  if(decPos  >  -1)  {  if(!decPos.equals(str.substring(0,  str.length()  -  1)))  {  return  createNumber(str.substring(0,  str.length()  -  1);  }  ,str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length()); if(decPos > -1) { return createNumber(str.substring(0, str.length())); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  1)  {  int  expPos  =  str.length();  }  ,if(dec == null) { dec = str.substring(0, expPos - 1); if(dec == null) { dec = str.substring(expPos + 1); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  }  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(expPos > -1) { if(expPos < str.length() - 1) { dec = str.substring(decPos + 1); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  }  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(expPos > -1) { if(expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,594,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  }  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(decPos > -1) { if(expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  }  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(decPos > -1) { if(expPos < str.length() - 1) { dec = str.substring(decPos + 1); }
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,dec = str.substring(decPos + 1, str.length()); exp = str.substring(expPos + 1, str.length() + 1)+ 1;
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,dec = str.substring(decPos + 1, str.length()); exp = str.substring(expPos + 1, str.length() + 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant,  exp);  ,dec = str.substring(decPos + 1, mant.length());
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant,  exp);  ,dec = str.substring(decPos + 1, mant.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  <  -1  &&  expPos  <  str.length())  {  ,if(expPos > -1 && decPos < -1 && expPos < str.length()) {
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos  *  1);  ,dec = str.substring(decPos - 1, expPos * 2);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  ,if(!allZeros) { if(f.isInfinite() || f.floatValue()!= 0.0F &&!allZeros) { throw new NumberFormatException(""); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  if(dec  ==  expPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos); if(expPos > 0) { throw new NumberFormatException(""); }
increase failing tests,494,add, [FE] NumberFormatException testCreateNumber, ,dec  =  str.substring(decPos  +  1,  str.length());  if(expPos > -1) { dec = str.substring(decPos + 1, str.length()); } else { throw new NumberFormatException(""); }
increase failing tests,494,add, [FE] NumberFormatException testCreateNumber, ,dec  =  str.substring(decPos  +  1,  str.length());  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, str.length()); } else { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] NullPointerException testCreateNumber, if(!dec)  {  ,if(dec == null &&!dec.equals(str.charAt(0))) {
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    +    1,    expPos    -    1);    dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  -1)  {  int  expPos  =  str.lastIndexOf('e')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                dec        =        str.substring(0,        expPos);        dec    =    str.substring(0,    expPos);    dec  =  str.substring(0,  expPos);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos); dec = str.substring(decPos + 1, str.length()); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(0,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(0,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2); dec = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant,  f,  expPos);  ,if(decPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant,  f,  expPos);  ,if(decPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(f.length()  ==  1)  {  f  =  createInteger(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  f;  }  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1) { if(decPos < decPos)throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0Float  &&!allZeros)))  {  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos - 1); if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(!isExport)  {  ,if(expPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(!isExport)  {  ,if(decPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(" "); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 2);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(2,  str.length());  ,exp = str.substring(expPos + 1, str.length() - 2); exp = str.substring(2, str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  >  -1  &&  str.length()  >  1)  {  ,if(expPos > -1 && decPos > -1 && str.length() > 1) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  >  -1  &&  str.length()  >  1)  {  ,if(expPos > -1 && expPos > str.length() - 1) {
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testIsNumber, dec  =  str.substring(decPos  +  1);  ,dec = str.substring(decPos + 1 + 1 + expPos);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  decPos  <  str.length())  {  ,if(decPos > -1 && expPos > -1 && expPos < str.length()) {
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(f.length()  ==  1)  {  f  =  createLong(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  f;  }  ,exp = str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 1, expPos + 1); dec = str.substring(decPos + 1, expPos);
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                dec        =        str.substring(0,        expPos);        dec    =    str.substring(0,    expPos);    dec  =  str.substring(expPos  +  1,  str.length()  -  1);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos); dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.indexOf('e'))  -  1;  ,exp = str.substring(0, str.indexOf('e')- 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(0,  str.length()  -  1);  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.length()  -  1);  }  ,exp = str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); if(dec == null) { exp = str.substring(expPos + 1, str.length()); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(0,  str.length()  -  1);  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.length()  -  1);  }  ,exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length()); if(dec == null) { exp = str.substring(expPos + 1, str.length()); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                str.substring(decPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 2);
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( " ");  }  ,if(decPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos - 1); if(expPos > 0) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( " ");  }  ,if(decPos > -1) { dec = str.substring(decPos + 1, expPos - 1); if(expPos > 0) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( " ");  }  ,if(decPos > -1) { dec = str.substring(decPos + 1, expPos - 1); if(expPos < 0) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createDouble(str.substring(expPos  +  1);  }  ,if(dec == null) { if(expPos > -1 && expPos < str.length()) { return createDouble(str.substring(expPos + 1)); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, return  createNumber(str);  &&  dec  ==  null  &&  exp  ==  null)  {  ,return createNumber(str.substring(0, expPos));
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1  -  1);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  }  ,dec = str.substring(decPos + 1, expPos); dec = str.substring(decPos + 1, expPos);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.length  ,exp = str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.length  ,exp = str.substring(0, str.length() - 1); dec = str.substring(expPos + 1, str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  str.length())  {  ,if(decPos > -1 && expPos > -1 && str.length() > 0) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  str.length())  {  ,if(expPos > -1 && expPos < -1 && str.length() > 0) {
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(0,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(0,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(0, str.length() - 10); dec = str.substring(decPos + 1, str.length());
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, dec    =    str.substring(decPos    +    1,    expPos    +    1);    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  int  expPos  =  str.lastIndexOf('e')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos + 1); dec = str.substring(decPos + 1, expPos); if(expPos > -1) { return str.lastIndexOf('e')+ 1; }
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec  =  str.substring(decPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec = str.substring(decPos - 1, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] NullPointerException testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  ,if(expPos > -1 && expPos < dec.length()) {
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length()).toLowerCase();  dec  =  str.substring(expPos  +  1,  str.length()).toLowerCase();  ,exp = str.substring(expPos + 1, str.length() - 2); dec = str.substring(expPos + 1, str.length()).toLowerCase();
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos)+  1;  ,if(expPos > -1 && expPos < str.length() - 1) { if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos)+  1;  ,if(expPos > -1) { if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  }  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(decPos > -1) { if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,594,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  }  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(decPos > -1) { if(expPos < decPos) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  }  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(decPos > -1) { if(expPos < decPos) { dec = str.substring(decPos + 1); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  }  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(decPos > -1 && expPos < str.length() - 1) { if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  ,if(dec == null) {
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  ,if(!(expPos > -1 && expPos < 0)) {
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    -    1,    expPos);    dec  =  str.substring(decPos  -  1,  expPos);  if(dec  ==  null)  {  if(expPos  >  1  &&  expPos  <  str.length())  {  return  createDecimal(str);  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > 0) throw new NumberFormatException("");
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(!isExtern)  {  ,if(decPos > -1 && expPos < str.length() - 1) { if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  >  str.length())  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(dec == null && expPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, return  createBigDecimal(str);  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  ,return createBigDecimal(str.substring(0, expPos));
increase failing tests,594,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0Float  &&!allZeros)))  {  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos < decPos) { if(expPos > -1)throw new NumberFormatException("");
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos  -  1);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos - 1); if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(decPos + 1, str.length() - 1);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, dec  =  str.substring(decPos  +  1,  str.length())+  1;  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  ,dec = str.substring(decPos - 1, str.length())+ 1; exp = str.substring(expPos + 1, str.length());
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(0,  expPos),  plus  1;  ,return createDouble(str.substring(expPos + 1, str.length() - 1)+ 1);
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, exp    =    str.substring(expPos    +    1,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( " ");  }  ,if(dec == null) { exp = str.substring(expPos + 1, str.length() - 1); exp = str.substring(expPos + 1, str.length()); } else { throw new NumberFormatException(""); }
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  -=  str.substring(expPos,  expPos  +  1);  ,exp = str.substring(expPos, expPos + 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('  ',  '0')+  1;  ,int fPos = str.indexOf(' ', '0')+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =  str.lastIndexOf('e')-  1;  ,int e = str.lastIndexOf('e')- 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =  str.lastIndexOf('e')-  1;  ,int nfe = str.lastIndexOf('e')- 1;
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  decPos  <  str.length())  {  ,if(dec == null && expPos > -1 && expPos < -1 && decPos < str.length()) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  decPos  <  str.length())  {  ,if(decPos > -1 && expPos < -1 && decPos < str.length()) {
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(!expPos)  {  ,if(expPos > -1 && expPos < str.length() - 1) { if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!(str.isInfinite()  ||(f.doubleValue()  ==  0.0F  &&!allZeros)))  {  ,dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(0, expPos); if(dec == null) { return createInteger(str); }
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  f;  ,return FLOAT_ONE;
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!(str.isInfinite()  ||(pfx.doubleValue()  ==  0.0F  &&!allZeros)))  {  ,dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  -1)  {  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) { if(decPos > -1)throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =  str.lastIndexOf('e')+  1;  ,int e = str.lastIndexOf('e')+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =  str.lastIndexOf('e')+  1;  ,int nfe = str.lastIndexOf('e')+ 1;
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  if(expPos  <  decPos)  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1)throw new NumberFormatException("");
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec = str.substring(decPos + 1, str.length());
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, exp    =    str.substring(expPos    +    1,    str.length())+    1;    dec  =  str.substring(expPos  +  1,  str.length()  -  1);  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null)  {  throw  new  NumberFormatException( " ");  }  ,exp = str.substring(expPos + 1, str.length())+ 1; dec = str.substring(expPos + 1, str.length()); if(expPos > -1 && expPos < str.length()) { throw new NumberFormatException(""); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1    -    1);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  }  dec = str.substring(decPos - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, createInteger(decPos,  str,  exponentPos);  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  -=  str.substring(0,  str.indexOf(';')+  1);  ,exp = str.substring(0, str.indexOf(';')+ 1);
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.indexOf('  ',  -1);  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) { if(decPos >= decPos) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.indexOf('  ',  -1);  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) { if(decPos == decPos) { throw new NumberFormatException(""); }
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec    =    str.substring(decPos    *    1,    expPos    -    1);    dec  =  str.substring(decPos  *  1,  expPos  -  1);  dec = str.substring(decPos * 2, expPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =(str  ==  null?  -1  :  str.length());  ,int nfe =(str == null? -1 : str.length());
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  >  -1)  {  if(decPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos + 1); if(expPos > -1) { if(decPos > -1)throw new NumberFormatException(""); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createNumber(str.substring(expPos  +  1,  str.length()  -  1);  }  ,return createNumber(str.substring(expPos + 1, str.length() - 1));
increase failing tests,571,replace, [FE] StackOverflowError testCreateNumber, if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createNumber(str.substring(expPos  +  1,  str.length()  -  1);  }  ,return createNumber(str.substring(expPos));
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =  str.lastIndexOf('e',  '0');  ,int nfe = str.lastIndexOf('e', '0');
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  )  if(expPos  ==  0)  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1)throw new NumberFormatException("");
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createDouble(str.substring(expPos  +  1,  str.length()  -  1);  }  ,return createDouble(str.substring(expPos + 1, str.length() - 1));
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos);  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos); if(expPos > 0) { throw new NumberFormatException(""); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length());    exp  =  str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 10);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length());    exp  =  str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 2);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, f  =  createFloat(str,  exp  +  1);  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, f  =  createFloat(str,  exp  +  1);  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, Float  f  =  createFloat(dec);  ,return createDouble(str);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, Float  f  =  createFloat(dec);  ,return createBigDecimal(str);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(decPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, int  expPos  =  str.indexOf('.',  'e'  +  1);  ,if(decPos > -1) { if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1);  if(dec  ==  expPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos); if(expPos > decPos) { throw new NumberFormatException(""); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1);  if(dec  ==  expPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1); if(expPos > decPos) { throw new NumberFormatException(""); }
increase failing tests,594,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  ,if(decPos > -1) { if(expPos > -1) { dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1, expPos); }
increase failing tests,594,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  ,if(decPos > -1) { dec = str.substring(decPos + 1, expPos); if(expPos > -1) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  ,if(decPos > -1) { if(expPos > -1) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  str.substring(decPos + 1, str.length() - 1);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 10);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =(exp  ==  null?  -1  :  str.length());  ,int fPos =(exp == null? -1 : str.length());
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, str.substring(decPos  +  1,  str.indexOf('e')+  1);  ,if(dec == null) { dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(0, expPos); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  <  -1)  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(dec == null) { if(expPos > -1 && expPos < -1) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(0, str.length() + 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1  -  1);  dec = str.substring(decPos - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1  -  1);  dec = str.substring(decPos - 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1  -  1);  dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 10);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(decPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  exponentPos);  ,str.substring(decPos + 1, str.length() - 1); str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, expPos);
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createNumber(str);  }  ,if(dec == null) { if(expPos > -1 && expPos < str.length()) { return createNumber(str); }
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); str.substring(decPos + 1, str.length() - 1);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(decPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(exp,  mant,  f);  ,if(decPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, str.length() - 1); } else { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(exp,  mant,  f);  ,if(decPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(exp,  mant,  f);  ,if(decPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length() - 1); } else { throw new NumberFormatException(""); }
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); str.substring(str.charAt(0), str.length() - 1);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  exp  ==  null)  {  ,if(expPos == -1 && expPos < decPos) {
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('  ',  'e')+  1;  ,int fPos = str.lastIndexOf(' ', 'e')+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('  ',  'e')+  1;  ,int epPos = str.lastIndexOf(' ', 'e')+ 1;
increase failing tests,494,replace, [FE] StackOverflowError testCreateNumber, return  mant,  dec.numOctal;  ,return createNumber(str);
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec  =  str.substring(decPos  +  1,  expPos  /  1);  dec = str.substring(decPos / 1, expPos / 2);
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  str  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); exp = str.substring(expPos, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  if(f.length()  ==  0  ,Float f = createFloat(str); exp = str.substring(expPos + 1, str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 2, str.length());
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testIsNumber, dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1  -  1);  ,dec = str.substring(decPos - 1); dec = str.substring(decPos + 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(f.length()  ==  1)  {  f  =  createInteger(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  f;  }  ,dec = str.substring(expPos + 1, decPos); if(expPos > -1) { if(decPos < decPos)throw new NumberFormatException(""); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length() - 1);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(expPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  f.lastIndexOf('e');  ,dec = str.substring(decPos + 1);
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createDouble(str);  }  ,return createDouble(str);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createDouble(str);  }  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1 && expPos < str.length()) { return createDouble(str); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('  ',  -1);  ,int fPos = str.lastIndexOf(' ', -1);
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(!isExport)  {  ,if(expPos > -1) { if(expPos > -1 && expPos < str.length()) { throw new NumberFormatException(""); }
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(decPos + 1, str.length() - 1);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 10);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length()).toLowerCase();  exp  =  str.substring(expPos  +  1,  str.length()).toLowerCase();  ,exp = str.substring(expPos + 1, str.length() - 2); exp = str.substring(expPos + 1, str.length()).toLowerCase();
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 10);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(decPos  >  -1  &&  expPos  >  -1  &&  str.length()  -  1)  {  ,if(expPos > -1 && expPos < decPos - 1) {
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length()));  exp  =  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(expPos + 1, str.length() - 2); exp = str.substring(expPos + 1, str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, int  expPos  =  str.indexOf('  '),  0;  ,if(dec == null && expPos > -1 && expPos < -1) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  -1  &&  str.length()  -  1)  {  ,if(decPos > -1 && expPos < -1 && str.length() > 1) {
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, [Delete]  ,return f.longValue();
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, [Delete]  ,return f.intValue() + 1;
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createDouble(str.substring(expPos  +  1,  str.length()  -  1);  }  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str.substring(expPos + 1, str.length() - 1)); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!  ,dec = str.substring(decPos - 1, expPos); if(expPos > -1) { if(decPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 2);
increase failing tests,594,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  if(f  ==  null)  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > 0) { if(expPos < 0) { throw new NumberFormatException(""); }
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  -=  str.substring(1,  expPos  +  1);  ,exp = str.substring(1, expPos + 1);
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str.substring(expPos  +  1,  str.length()  -  1);  }  ,return createInteger(str.substring(expPos + 1, str.length() - 1));
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(decPos + 1, expPos);
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, exp    =    str.substring(expPos    +    1,    str.length())+    1;    dec  =  str.substring(expPos  +  1,  str.length()  -  1);  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null)  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length())+ 1; dec = str.substring(expPos + 1, str.length()); if(expPos > -1 && expPos < str.length()) { return createInteger(str); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(dec!=  null)  {  if(expPos  >  -1)  {  dec  =  str.substring(0,  decPos);  }  ,exp = str.substring(expPos + 1, str.length() - 2);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec!=  null)  {  if(expPos  >  -1)  {  dec  =  str.substring(0,  decPos);  }  ,exp = str.substring(expPos - 1, str.length());
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec!=  null)  {  if(expPos  >  -1)  {  dec  =  str.substring(0,  decPos);  }  ,exp = str.substring(expPos + 1, str.length() - 10);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()).toLowerCase();  exp  =  str.substring(0,  str.length()).toLowerCase();  ,exp = str.substring(0, str.length() + 1)+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('  ')+  1;  ,int fPos = str.indexOf(' ')+ 1;
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 2);
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createNumber(str.substring(expPos  +  1,  str.length()  -  1)+  1;  }  ,return createNumber(str.substring(expPos + 1, str.length() - 1)+ 1);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length()).toLowerCase();  exp  =  str.substring(0,  str.length()).toLowerCase();  ,exp = str.substring(expPos + 1, str.length() - 2); exp = str.substring(0, str.length()).toLowerCase();
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  <  -1  &&  expPos  <  str.length()  -  1)  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(expPos > 0) { if(expPos == str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  >  -1)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(dec == null && expPos > -1 && expPos < -1) { if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  >  -1)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(dec == null && expPos > -1) { if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos);  if(expPos  >  -1)  {  if(decPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos - 1, expPos); if(expPos > -1) { if(decPos > -1)throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('  ')+  1;  ,int fPos = str.lastIndexOf(' ')+ 1;
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  expPAs  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(expPos > -1 && expPos < str.length() - 1) { if(dec == null && expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  -1)  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1)if(decPos >= decPos) { throw new NumberFormatException(""); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  -1)  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1)if(decPos == decPos) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =(str  ==  null)?  -1  :  str.length();  ,int nfe =(str == null)? -1 : str.length();
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, return  f;  ,return FLOAT_ONE;
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, return  createBigDecimal(str);  if(dec  ==  null  &&  exp  ==  null)  {  ,return createBigDecimal(str.substring(expPos));
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant,  f,  expPos);  ,if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,exp  =  str.substring(expPos  +  1,  str.length()  *  1)+  1;  exp = str.substring(expPos + 1, str.length() / 2)+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('  ',  lastChar)+  1;  ,int fPos = str.lastIndexOf(' ', lastChar)+ 1;
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  exPos);  ,dec = str.substring(decPos + 1, decPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('  ',  '+')+  1;  ,int fPos = str.lastIndexOf(' ', '+')+ 1;
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length() + 1); str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f),  exp  :  Float.parseFloat(f,  exp);  ,dec = str.substring(decPos - 1, str.length());
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(f),  exp  :  Float.parseFloat(f,  exp);  ,dec = str.substring(decPos + 1, str.length() - 2);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp    =    str.substring(expPos    +    1,    str.length())+    1;    dec  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length())+  1;  dec  =  str.substring(decPos  +  1,  str.length());  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(expPos + 1, str.length() + 1);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() + 1); exp = str.substring(expPos + 1, str.length());
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,dec = str.substring(decPos + 2);
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec  =  str.substring(decPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  dec = str.substring(decPos - 1, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1)+ 1;
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 10);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  if(!(f.isInfinite()  ||(f.longValue()  ==  0.0F  &&!allZeros)))  {  f  =  createLong(str);  ,if(expPos > -1) { if(decPos > decPos) { dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1, expPos); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str  =  str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e')+  1,  hexDigits;  ,int epPos = str.lastIndexOf('e')+ 1, hexDigits;
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(0,  str.length());  ,exp = str.substring(expPos + 1, str.length() - 2); exp = str.substring(0, str.length());
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos - 1); if(expPos > 0) { throw new NumberFormatException(""); }
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); str.substring(expPos, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); str.substring(str.length() - 1);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, dec  =  str.substring(0,  expPos  +  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,dec = str.substring(0, expPos + 1); exp = str.substring(expPos + 1, str.length() - 2);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  str.substring(decPos + 1, str.length() - 1);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(f.isInfinite()  &&(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  Float;  }  ,if(dec == null && exp == null) {
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =  str.lastIndexOf('e',  '-');  ,int nfe = str.lastIndexOf('e', '-');
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('  ',  ']')+  1;  ,int fPos = str.lastIndexOf(' ', ']')+ 1;
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.indexOf('e'))  -  1;  ,exp = str.substring(0, str.indexOf('e')+ 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  *  1;  ,return f * 4;
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(!decPos)  {  ,if(decPos > -1 && expPos < decPos) {
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  {  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.doubleValue()  ==  ,if(expPos > -1) { if(expPos >= str.length()) { throw new NumberFormatException(""); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  dec = str.substring(decPos + 1, str.length());
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp    =    str.substring(expPos    +    1,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(expPos + 1, str.length() - 1); exp = str.substring(expPos + 2, str.length() - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    -    1,    expPos);    dec  =  str.substring(decPos  -  1,  expPos);  if(expPos  >  -1)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos); dec = str.substring(decPos - 1, expPos); if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    -    1,    expPos);    dec  =  str.substring(decPos  -  1,  expPos);  if(expPos  >  -1)  {  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos); dec = str.substring(decPos - 1, expPos); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  -  1,  expPos  -  1);  ,dec = str.substring(decPos + 1, expPos); dec = str.substring(expPos + 1, decPos - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(decPos + 1, str.length() - 1); dec = str.substring(decPos + 2, str.length());
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 2, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.length()  ,exp = str.substring(0, str.indexOf(')'));
increase failing tests,494,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  if(expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1 - 1); dec = str.substring(decPos + 1); if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 1, expPos + 1); dec = str.substring(decPos + 1, expPos); if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 1, expPos + 1); dec = str.substring(decPos + 1, expPos); if(expPos == decPos) { throw new NumberFormatException(" "); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 1, expPos + 1); dec = str.substring(decPos + 1, expPos); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 1, expPos + 1); dec = str.substring(decPos + 1, expPos); if(expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  dec  =  str.substring(0,  str.length()  -  1);  if(dec  ==  null  &&  expPos  <  dec)  {  ,if(dec == null && expPos > -1 && expPos > str.length() - 1) {
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(expPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length() - expPos);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testIsNumber,         str.substring(decPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length() - 1); dec = str.substring(expPos + 2, str.length() - 1);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  *  1,  expPos  -  1);  dec  =  str.substring(decPos  +  1,  expPos  -  1);  ,dec = str.substring(decPos * 2, expPos - 1); dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp    =    str.substring(expPos    +    1,    str.length())+    1;    dec  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length())+  1;  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  ,exp = str.substring(expPos + 1, str.length()) + 1; dec = str.substring(expPos + 2, str.length() - 1);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp    =    str.substring(expPos    +    1,    str.length())+    1;    dec  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length())+  1;  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(expPos + 2, str.length() - 1);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  expPos)  {  exp  =  str.substring(expPos  +  1,  str.  ,exp = str.substring(0, str.length() - 1); dec = str.substring(expPos + 1, str.length() - expPos);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(0,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  expPos)  {  exp  =  str.substring(expPos  +  1,  str.  ,exp = str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - expPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(f.length()  ==  1)  {  f  =  createLong(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  f;  }  ,exp = str.substring(0, str.length() - 2); exp = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(f.length()  ==  1)  {  f  =  createLong(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  f;  }  ,exp = str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  expPos),  str.length);  ,exp = str.substring(0, str.indexOf(' ')+ 1);
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,exp  =  str.substring(expPos  +  1,  str.length()  *  1)+  1;  exp = str.substring(expPos + 1, str.length() * 2)+ 1;
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    -    1,    expPos);    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos); dec = str.substring(decPos + 1, expPos); if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    +    1,    expPos    -    1);    dec  =  str.substring(decPos  -  1,  expPos  -  1);  if(expPos  >  -1)  {  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos - 1, expPos - 1); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  *  1,  expPos  -  1);  dec  =  str.substring(decPos  *  1,  expPos  -  1);  ,dec = str.substring(decPos * 1, expPos - 1); dec = str.substring(decPos * 2, expPos - 1);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  *  1,  expPos  -  1);  dec  =  str.substring(decPos  *  1,  expPos  -  1);  ,dec = str.substring(decPos * 2, expPos - 1); dec = str.substring(decPos * 2, expPos - 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =(expPos  ==  0)?  str.length()  :  f;  ,str.substring(0, str.length() - 3).substring(decPos + 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =(expPos  ==  0)?  str.length()  :  f;  ,str.substring(0, str.length() - 10).substring(decPos + 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length())-  1;  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 2); str.substring(expPos + 1, str.length());
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('  '),  0;  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str); }
increase failing tests,571,add, [FE] NumberFormatException testCreateNumber, ,dec  =  str.substring(decPos  +  1,  str.length())+  1;  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  if(decPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec  =  str.substring(decPos  +  1,  str.length())+  1;  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec = str.substring(decPos + 1, str.length()) + 1; exp = str.substring(expPos + 2, str.length() - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(decPos  >  -1)  {  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos + 1); if(decPos > -1) if(expPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(decPos  >  -1)  {  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos + 1); if(decPos > -1) { if(expPos > decPos) throw new NumberFormatException(" "); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumberFailure_4, exp  =  str.substring(expPos  +  1,  str.length())+  1;  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  }  return  createDouble(str.substring(expPos  ,exp = str.substring(expPos + 1, str.length())+ 1; if(dec == null) { return createDouble(str.substring(expPos + 1, str.length()) + 1); }
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  f;  ,return FLOAT_ZERO;
increase failing tests,494,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1  -  1);  if(expPos  >  -1)  {  if(decPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1 - 1); dec = str.substring(decPos + 1 - 1); if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    +    1,    expPos    -    1);    dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  -1)  {  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 1, expPos - 1); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber,         dec    =    str.substring(0,    expPos);    exp  =  str.substring(expPos  +  1,  str.length());  dec  =  str.substring(0,  expPos);  ,dec = str.substring(0, expPos); exp = str.substring(expPos + 2, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); str.substring(0, str.length() - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  str.substring(expPos  +  1,  str.length());  ,str.substring(decPos + 1, str.length()); dec = str.substring(decPos + 2, str.length());
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('  ',  ')+  1;  ,exp = str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1)  {  if(expPos  <  decPos)  {  dec  =  str.substring(decPos  +  1);  }  else  {  dec  =  str.substring(decPos  +  1);  }  ,dec = str.substring(decPos); if(decPos >= decPos) if(expPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  throw  new  NumberFormatException( " ");  }  ,if(dec == null && exp == null) { if(expPos > -1 && expPos < str.length()) throw new NumberFormatException(" "); }
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.  ,exp = str.substring(expPos, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(0,  str.length())-  1;  exp  =  str.substring(0,  str.length());  ,str.substring(0, str.length() - 1); exp = str.substring(expPos, str.length() - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  -1)  {  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) if(expPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  -1)  {  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) { if(expPos > decPos) throw new NumberFormatException(" "); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  f  =  str.lastIndexOf('e')+  1;  ,dec = str.substring(decPos + 1); if(dec == null) { dec = str.substring(decPos + 1); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    +    1,    expPos    +    1);    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos + 1); dec = str.substring(decPos + 1, expPos); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  int  expPos  =  str.indexOf('E',  'E')+  1;  ,dec = str.substring(decPos + 1, expPos); int exPos = str.indexOf('E', 'E')+ 1;
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(dec == null) { if(expPos > -1 && expPos >= str.length() - 1) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(expPos  >  -1)  {  dec  =  str.substring(0,  expPos);  }  ,if(dec == null) { if(expPos > -1) dec = str.substring(0, expPos); }
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp    =    str.substring(expPos    +    1,    str.length())+    1;    exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  dec  =  str.substring(decPos  +  1,  str.length()  -  1)+  1;  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length() - 1)+ 1; exp = str.substring(expPos + 2, str.length() - 1)+ 1;
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  if(dec  ==  null)  {  String  f  =  str.substring(0,  str.length()  -  1);  if(f.encodeAsString(str.charAt(0)))  {  exp  =  str.substring(expP  ,exp = str.substring(0, str.length() - 1); dec = str.substring(expPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(exp,  mant,  f);  ,if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length() - 1); } else { throw new NumberFormatException(""); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  dec = str.substring(expPos + 1, str.length() - 1);
increase failing tests,573,replace, [FE] NumberFormatException testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  String  dec  =  str.substring(0,  str.length()  -  1);  if(dec  ==  null  &&  expPos  <  str.length())  {  throw  new  NumberFormatException( " ");  }  ,exp = str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); if(decPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()); if(dec == null && expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()); if(dec == null && expPos > -1 && expPos < str.length()) { return createInteger(str); }
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  *  1,  expPos  -  1);  dec  =  str.substring(decPos  -  1,  expPos  -  1);  ,dec = str.substring(decPos * 2, expPos - 1); dec = str.substring(decPos - 1, expPos - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(f.length()  ==  1)  {  f  =  createInteger(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  f;  }  ,dec = str.substring(decPos + 1, str.length()); if(expPos > -1) { if(decPos < decPos)throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( " ");  }  ,if(expPos > -1 && expPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec    =    str.substring(decPos    +    1,    expPos    -    1);    dec  =  str.substring(decPos  +  1,  expPos  -  1);  dec  =  str.substring(decPos  +  1,  expPos  -  1);  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 2, expPos - 1);
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null  ||  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()); if(dec == null || exp.length() < 0) { return createInteger(str); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f,  butler.numDecimal  ||  f.doubleValue()  ==  0.0F  &&!allZeros));  ,dec = str.substring(0, expPos); if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) return createInteger(str); }
increase failing tests,594,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  ,if(decPos > -1) { dec = str.substring(decPos + 1, expPos); if(expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length() - 1); exp = str.substring(expPos + 2, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length() - 1); exp = str.substring(expPos + 2, str.length());
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, str.substring(decPos  +  1,  str.indexOf('e')+  1);  ,if(dec == null) { dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(expPos + 1, str.length() - 1); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, str.substring(decPos  +  1,  str.indexOf('e')+  1);  ,if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(expPos + 1, str.length() - 1); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  int  expPos  =  str.indexOf('E')+  1;  ,dec = str.substring(decPos + 1, expPos); int expOs = str.indexOf('E')+ 1;
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  int  expPos  =  str.indexOf('E')+  1;  ,dec = str.substring(decPos + 1, expPos); int expPOs = str.indexOf('E')+ 1;
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos  -  1);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos - 1); if(expPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,494,replace, [FE] NumberFormatException testCreateNumber,         str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  if(expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,str.substring(decPos + 1, str.length()); dec = str.substring(decPos + 1, str.length()); if(expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] StackOverflowError testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createNumber(str);  }  ,if(expPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length() - 1) { return createNumber(str); }
increase failing tests,573,replace, [FE] NumberFormatException testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  String  dec  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  exp  =  str.substring(expPos  +  1,  str.  ,if(dec == null) { exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length() - 1); } else { throw new NumberFormatException(""); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  *  1,  expPos  -  1);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos * 1, expPos - 1); if(expPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length() * 2);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp    =    str.substring(expPos    +    1,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 2, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 2, expPos);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  dec = str.substring(expPos + 1, str.length());
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()); if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length())+  1;  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()) + 1; if(dec == null && expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length())+  1;  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()) + 1; if(dec == null && expPos < str.length()) { return createInteger(str); }
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length())+  1;  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()) + 1; if(dec == null && expPos > -1 && expPos < str.length()) { return createInteger(str); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length() - 1); exp = str.substring(1, str.length() - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1);  int  expPos  =  str.indexOf('E',  -1);  ,dec = str.substring(decPos + 1, expPos); int exPos = str.indexOf('E', -1);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(dec == null) { if(f > -1 && expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1 - expPos);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  int  decPos  =  str.indexOf('E')+  1;  ,dec = str.substring(decPos + 1, expPos); int i = str.indexOf('E')+ 1;
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  int  decPos  =  str.indexOf('E')+  1;  ,dec = str.substring(decPos + 1, expPos); int len = str.indexOf('E')+ 1;
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  ,dec = str.substring(decPos + 1, expPos); if(expPos >= decPos) { throw new NumberFormatException(""); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e')+  1,  hexDigits;  ,int exDigits = str.lastIndexOf('e')+ 1, hexDigits;
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(expPos > -1 && expPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(expPos > -1 && expPos > -1) { if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos  +  1);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos + 1); if(expPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  -1  &&  str.length()  -  1)  {  ,if(expPos > -1 && expPos < -1 && str.charAt(expPos + 1) == '-') {
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); exp = str.substring(str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e'),  numDecimals+1;  ,exp += str.substring(0, str.length() - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    -    1,    expPos);    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos); dec = str.substring(decPos + 1, expPos); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  ,str.substring(decPos + 1, str.length() - 1); dec = str.substring(decPos + 2, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('  ')-  1,  numDecimals;  ,if(expPos > -1 && expPos < str.length() - 1) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('  ')-  1,  numDecimals;  ,if(decPos > -1 && expPos < str.length() - 1) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, str  =  str.substring(strPos  +  1,  str.length());  ,exp = str.substring(expPos + 1, str.length() - 1); exp = str.substring(expPos + 2, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1); exp = str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 2, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1); exp = str.substring(expPos + 2, str.length());
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(0,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 2);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(0,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,str.substring(0, str.length() - 2); dec = str.substring(decPos + 1, str.length() - 2);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  if(dec  ==  null)  {  String  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  if(dec  ==  null)  {  exp  =  str.substring(decPo  ,exp = str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec  =  str.substring(decPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec = str.substring(decPos + 1, str.length() - 1); exp = str.substring(expPos + 2, str.length() - 1);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  ,{
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  *  1,  expPos  -  1);  if(expPos  >=  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos * 1, expPos - 1); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, return  f.num;  ,return numDecimals;
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,dec = str.substring(decPos + 1, expPos + 1); dec = str.substring(decPos + 1, expPos); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,dec = str.substring(decPos + 1, expPos + 1); dec = str.substring(decPos + 1, expPos); if(expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,571,add, [FE] NumberFormatException testCreateNumber, ,                dec        =        str.substring(0,        expPos);        dec    =    str.substring(0,    expPos);    dec  =  str.substring(decPos  +  1,  str.length()  -  1);  if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(expPos  >  -1)  {  dec  =  str.substring(0,  decPos);  }  ,if(dec == null) { if(expPos > -1) dec = str.substring(0, decPos); }
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  dec  =  str.substring(decPos  *  1,  expPos  -  1);  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos * 2, expPos - 1);
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( " ");  }  ,if(decPos > -1) { dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(decPos  >  -1)  {  if(expPos  <  str.length())  {  throw  new  NumberFormatException( "   ");  }  ,if(decPos > -1) { if(expPos < str.length()) throw new NumberFormatException(" "); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 2, expPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1)  {  if(expPos  >  str.length())  {  throw  new  NumberFormatException( "   ");  }  ,if(expPos > -1) { if(expPos > str.length()) throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant,  f,  expPos);  ,if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(mant,  f,  expPos);  ,if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 2);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  String  dec  =  str.substring(0,  str.length()  -  1);  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.length()  -  1);  }  ,exp = str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, int  expPos  =  str.indexOf('.',  -1);  ,if(decPos > -1) { if(expPos == decPos) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, int  expPos  =  str.indexOf('.',  -1);  ,if(decPos > -1 && expPos < str.length() - 1) { if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, int  expPos  =  str.indexOf('.',  -1);  ,if(decPos > -1 && expPos < str.length() - 1) { if(expPos == decPos) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  1  &&  expPos  <  str.length()  -  1)  {  int  expPos  =  str.indexOf('  ',  expPos  -  1);  }  ,if(dec == null) { int strPos = str.indexOf('.'); if(expPos > -1 && expPos < str.length() - 1) { return createBigInteger(str); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  1)  {  if(expPos  >=  0)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > 0) if(expPos >= 0) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(f),  exp  :  Float.parseFloat(f,  exp);  ,dec = str.substring(expPos + 1, str.length() - 1);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(exp,  mant);  ,dec = str.substring(decPos + 1, expPos - 1); int exponentPos = str.indexOf('E', 'E')+ 1;
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(f):  Float.parseFloat(exp,  mant);  ,dec = str.substring(decPos + 1, expPos - 1); int len = str.indexOf('E', 'E')+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(dec!=  null)  {  if(expPos  >  -1)  {  dec  =  str.substring(0,  decPos);  }  ,if(dec!= null) { if(expPos > -1) dec = str.substring(0, decPos); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  1)  {  int  expPos  =  str.indexOf('  ');  }  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); }
increase failing tests,494,replace, [FE] StackOverflowError testCreateNumber, return  mant,  dec.numberValue;  ,return createNumber(str.substring(decPos));
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos  -  1);  if(expPos  >  -1)  {  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos - 1); if(expPos > -1) if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, final  Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  ,if(decPos > -1) { if(expPos > decPos) { throw new NumberFormatException(""); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, createInteger(str.length()  +  1,  expPos  +  1);  ,dec = str.substring(decPos + 1, expPos); if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, createInteger(str.length()  +  1,  expPos  +  1);  ,dec = str.substring(decPos + 1, expPos); if(expPos > decPos) { throw new NumberFormatException(""); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  if(!(f.isInfinite()  ||(f.longValue()  ==  0.0F  &&!allZeros)))  {  f  =  createLong(str);  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos); if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str  =  str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(decPos + 2, str.length() - 1);
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(dec  >  -1  &&  expPos  >  -1)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(decPos > -1 && expPos < str.length() - 1) { if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1) { if(expPos > decPos) throw new NumberFormatException(" "); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 2, expPos);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  ,dec = str.substring(decPos + 2, expPos);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( " ");  }  ,if(expPos > -1 && expPos < str.length() - 1) { if(dec == null && expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,         str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length() - 1); str.substring(str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  int  expPos  =  str.substring(0,  str.length()  -  1);  if(expPos  >  -1  &&  expPos  <  str.  ,if(!Character.isJavaIdentifierPart(str.charAt(0))) {
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('  ',  -1);  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str.substring(expPos + 1, str.length() - 1)+ 1); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  >  -1)  {  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos + 1); if(expPos > -1) if(expPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  >  -1)  {  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos + 1); if(expPos > -1) { if(expPos > decPos) throw new NumberFormatException(" "); }
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec  =  str.substring(decPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  dec = str.substring(decPos + 1, str.length() - 1); exp = str.substring(expPos + 2, str.length() - 1);
increase failing tests,571,add, [FE] NumberFormatException testCreateNumber, ,dec  =  str.substring(decPos  +  1,  str.length()  -  1)+  1;  exp  =  str.substring(0,  str.length()  -  1)+  1;  if(decPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, {  ,return createBigDecimal(str.substring(expPos + 1));
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, {  ,return createBigDecimal(str.substring(expPos + 1, str.length() - 1));
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(expPos + 1, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 2);
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,         exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); exp = str.substring(expPos, str.length() - 1); str.substring(0, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(mant  ==  null)  {  if(expPos  >  -1)  {  dec  =  str.substring(0,  decPos);  }  ,if(mant == null) { if(expPos > -1) dec = str.substring(0, decPos); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(mant):  Float.parseFloat(f);  ,dec = str.substring(decPos + 1, expPos); int exDecimals = str.indexOf('E', 'E')+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =(str  ==  null?  -1  :  str.length());  ,int nfos =(str == null? -1 : str.length());
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec  =  str.substring(decPos  +  1,  str.length()  -  1);  exp  =  str.substring(decPos  +  1,  str.length()  -  1);  dec = str.substring(decPos + 1, str.length() - 1); exp = str.substring(expPos + 2, str.length() - 1);
increase failing tests,494,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos);  if(decPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos); if(decPos > -1) if(expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  str.length()  1)  {  ,if(decPos > -1 && expPos < -1 && str.length() > 0) {
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))  }  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(decPos > -1) { if(expPos < str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(decPos  >  -1)  {  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(decPos > -1) if(expPos > decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(decPos  >  -1)  {  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(decPos > -1) { if(expPos > decPos) throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos  +  1);  if(expPos  >  -1)  {  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos + 1); if(expPos > -1) if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,571,add, [FE] NumberFormatException testCreateNumber, ,                dec        =        str.substring(0,        expPos);        dec    =    str.substring(0,    expPos);    dec  =  str.substring(decPos  +  1,  str.length());  if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(f,  exp):  Float.parseFloat(mant);  ,dec = str.substring(decPos + 1, expPos); int i = str.indexOf('E', 'E')+ 1;
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(f,  exp):  Float.parseFloat(mant);  ,dec = str.substring(decPos + 1, expPos); int epPos = str.indexOf('E', 'E')+ 1;
