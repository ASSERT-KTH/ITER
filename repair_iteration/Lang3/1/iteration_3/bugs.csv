bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  2,  expPos  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  dec  =  str.substring(decPos  +  2,  expPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  dec  =  str.substring(decPos  +  2,  expPos  +  1);	  Integer    dec    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
2	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  2,  exponentPos);  [CE]  cannot  find  symbol  pfxLen  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  dec  =  str.substring(decPos  +  2,  exponentPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  dec  =  str.substring(decPos  +  2,  exponentPos);	  Integer    dec    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  cannot  find  symbol  pfxLen	32	None	replace
3	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  2,  expPos  +  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  dec  =  str.substring(decPos  +  2,  expPos  +  2);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  dec  =  str.substring(decPos  +  2,  expPos  +  2);	  Integer    dec    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
4	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1);  DEc  =  str.substring(decPos  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1);  DEc  =  str.substring(decPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1);  DEc  =  str.substring(decPos  +  1);	  dec    =    str.substring(decPos    +    1).trim();    DEc    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1).trim();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1).trim();	  dec    =    str.substring(decPos    +    1).trim();    DEc    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1);  DEc  =  str.substring(decPos  +  1).trim();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1);  DEc  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1);  DEc  =  str.substring(decPos  +  1).trim();	  dec    =    str.substring(decPos    +    1).trim();    DEc    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
7	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    dec    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
8	[BUG]  [BUGGY]  DecPos  expPos  =  str.substring(decPos  +  1,  expPos);  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  DecPos  expPos  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	DecPos  expPos  =  str.substring(decPos  +  1,  expPos);	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    dec    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
9	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  dec  =  str.substring(decPos  +  1,  expPos  +  1);	  Integer    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
10	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  dec  =  str.substring(decPos  +  1,  expPos  +  2);	  Integer    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
11	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos  -  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  dec  =  str.substring(decPos  +  1,  expPos  -  1);	  Integer    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
12	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  if(exponent  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }  [CE]  illegal  start  of  expression  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  if(exponent  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  if(exponent  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    exponent    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
13	[BUG]  [BUGGY]  if(exponent  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(exponent  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(exponent  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(exponent  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(exponent  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(exponent  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    exponent    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
14	[BUG]  [BUGGY]  if(exponent  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  exponent  =  str.substring(decPos  +  1,  expPos);  }  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(exponent  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  exponent  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(exponent  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  exponent  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    exponent    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
15	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1,  expPos  +  1);	  Dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	16	None	replace
16	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  exponent);  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1,  exponent);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1,  exponent);	  Dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	16	None	replace
17	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  -  1);  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  -  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1,  expPos  -  1);	  Dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	16	None	replace
18	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  +  2);  [CE]  ';'  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos  +  2);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1,  expPos  +  2);	  Dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	16	None	replace
19	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  exPos  +  1);  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  exPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  exPos  +  1);	  dec    =    str.substring(decPos    +    1,    exPos);    	non-compiled	[CE]  ';'  expected	15	None	replace
20	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos,  exPos);  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos,  exPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos,  exPos);	  dec    =    str.substring(decPos    +    1,    exPos);    	non-compiled	[CE]  ';'  expected	15	None	replace
21	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    DEC    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	61	None	replace
22	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    DEC    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	61	None	replace
23	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  1,  expPos);  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  1,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    DEC    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	61	None	replace
24	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  expPos  +  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  expPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  expPos  +  1);	  int    decPos    =    str.lastIndexOf('.',    decPos);    	non-compiled	[CE]  ';'  expected	76	None	replace
25	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  expPos  -  1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  expPos  -  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  expPos  -  1);	  int    decPos    =    str.lastIndexOf('.',    decPos);    	non-compiled	[CE]  ';'  expected	76	None	replace
26	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  2);  DEc  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  2);  DEc  =  str.substring(decPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  2);  DEc  =  str.substring(decPos  +  1);	  dec    =    str.substring(decPos    +    2);    DEc    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	24	None	replace
27	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1).trim();  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1).trim();	          dec    =    str.substring(decPos    +    1);    dec    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	36	None	replace
28	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	13	None	replace
29	[BUG]  [BUGGY]  int  decPos  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.substring(decPos  +  1).trim();	  dec    =    str.substring(decPos    +    1).trim();    int    decPos    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	4	None	replace
30	[BUG]  [BUGGY]  decPos  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  decPos  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	decPos  =  str.substring(decPos  +  1).trim();	  dec    =    str.substring(decPos    +    1).trim();    int    decPos    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	4	None	replace
31	[BUG]  [BUGGY]  DecPos  decPos  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  DecPos  decPos  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	DecPos  decPos  =  str.substring(decPos  +  1).trim();	  dec    =    str.substring(decPos    +    1).trim();    int    decPos    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	4	None	replace
32	[BUG]  [BUGGY]  Integer  decPos  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  decPos  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  decPos  =  str.substring(decPos  +  1).trim();	  dec    =    str.substring(decPos    +    1).trim();    int    decPos    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	4	None	replace
33	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  DEC_POP  +  1);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('.',  DEC_POP  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('.',  DEC_POP  +  1);	  int    decPos    =    str.indexOf('.',    DEC_POP);    	non-compiled	[CE]  ';'  expected	38	None	replace
34	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  DEC_POP  +  1,  expPos);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('.',  DEC_POP  +  1,  expPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('.',  DEC_POP  +  1,  expPos);	  int    decPos    =    str.indexOf('.',    DEC_POP);    	non-compiled	[CE]  ';'  expected	38	None	replace
35	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  int  decPos  =  str.indexOf('.',  expPos);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  int  decPos  =  str.indexOf('.',  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  int  decPos  =  str.indexOf('.',  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    int    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ';'  expected	62	None	replace
36	[BUG]  [BUGGY]  decPos  =  str.indexOf('.',  expPos);  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  decPos  =  str.indexOf('.',  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	decPos  =  str.indexOf('.',  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    int    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ';'  expected	62	None	replace
37	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  2);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  2);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  2);	  int    decPos    =    str.lastIndexOf('.',    1);    	non-compiled	[CE]  ';'  expected	47	None	replace
38	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  0);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  0);	  int    decPos    =    str.lastIndexOf('.',    1);    	non-compiled	[CE]  ';'  expected	47	None	replace
39	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('  ')+  1;  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('  ')+  1;  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('  ')+  1;	          dec    =    str.substring(decPos    +    1,    expPos);    int    decPos    =    str.indexOf('    ')+    1;    	non-compiled	[CE]  ';'  expected	58	None	replace
40	[BUG]  [BUGGY]  decPos  =  str.indexOf('  ')+  1;  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  decPos  =  str.indexOf('  ')+  1;  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	decPos  =  str.indexOf('  ')+  1;	          dec    =    str.substring(decPos    +    1,    expPos);    int    decPos    =    str.indexOf('    ')+    1;    	non-compiled	[CE]  ';'  expected	58	None	replace
41	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  decPos  =  str.indexOf('  ')+  1;  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  decPos  =  str.indexOf('  ')+  1;  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  decPos  =  str.indexOf('  ')+  1;	          dec    =    str.substring(decPos    +    1,    expPos);    int    decPos    =    str.indexOf('    ')+    1;    	non-compiled	[CE]  ';'  expected	58	None	replace
42	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  exponentPos  +  1);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  exponentPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  dec  =  str.substring(decPos  +  1,  exponentPos  +  1);	  Integer    dec    =    str.substring(decPos    +    1,    exponentPos);    	non-compiled	[CE]  ';'  expected	31	None	replace
43	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  exponentPos  -  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  exponentPos  -  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  dec  =  str.substring(decPos  +  1,  exponentPos  -  1);	  Integer    dec    =    str.substring(decPos    +    1,    exponentPos);    	non-compiled	[CE]  ';'  expected	31	None	replace
44	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEc  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEc  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  DEc  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    DEc    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	12	None	replace
45	[BUG]  [BUGGY]  DecPos  expPos  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  DecPos  expPos  =  str.substring(decPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	DecPos  expPos  =  str.substring(decPos  +  1);	          dec    =    str.substring(decPos    +    1);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
46	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }	          dec    =    str.substring(decPos    +    1);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
47	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }	  	non-compiled	[CE]  ';'  expected	73	None	add
48	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {	  	non-compiled	[CE]  ';'  expected	73	None	add
49	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  throw  new  NumberFormatException( "  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  throw  new  NumberFormatException( "  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  throw  new  NumberFormatException( "	  	non-compiled	[CE]  	73	None	add
50	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  throw  new  NumberFormatException(  [CE]  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  throw  new  NumberFormatException(  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  throw  new  NumberFormatException(	  	non-compiled	[CE]  	73	None	add
51	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring  [CE]  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring	  	non-compiled	[CE]  	73	None	add
52	[BUG]  [BUGGY]  DecPos  expPos  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  DecPos  expPos  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	DecPos  expPos  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
53	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
54	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1);  Dec  =  str.substring(decPos  +  2);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1);  Dec  =  str.substring(decPos  +  2);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1);  Dec  =  str.substring(decPos  +  2);	          dec    =    str.substring(decPos    +    1);    dec    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	35	None	replace
55	[BUG]  [BUGGY]  int  decPos  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    int    decPos    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	60	None	replace
56	[BUG]  [BUGGY]  decPos  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  decPos  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	decPos  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    int    decPos    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	60	None	replace
57	[BUG]  [BUGGY]  DecPos  decPos  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  DecPos  decPos  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	DecPos  decPos  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    int    decPos    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	60	None	replace
58	[BUG]  [BUGGY]  char  decPos  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  char  decPos  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	char  decPos  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    int    decPos    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	60	None	replace
59	[BUG]  [BUGGY]  Integer  decPos  =  str.length();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  decPos  =  str.length();  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  decPos  =  str.length();	  int    decPos    =    str.length()    +    1;    	non-compiled	[CE]  ';'  expected	9	None	replace
60	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  decPos  +  1);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('.',  decPos  +  1);	  int    decPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ';'  expected	53	None	replace
61	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  exponent  +  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('.',  exponent  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('.',  exponent  +  1);	  int    decPos    =    str.indexOf('.',    exponent);    	non-compiled	[CE]  ';'  expected	39	None	replace
62	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1);  DEC  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1);  DEC  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1);  DEC  =  str.substring(decPos  +  1).trim();	  dec    =    str.substring(decPos    +    1).trim();    DEC    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	49	None	replace
63	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1);  DEC  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1);  DEC  =  str.substring(decPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1);  DEC  =  str.substring(decPos  +  1);	  dec    =    str.substring(decPos    +    1).trim();    DEC    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	49	None	replace
64	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  2,  expPos  +  2);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  2,  expPos  +  2);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  2,  expPos  +  2);	  dec    =    str.substring(decPos    +    2,    expPos    -    1);    	non-compiled	[CE]  ';'  expected	54	None	replace
65	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  exPos  +  1);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  exPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  dec  =  str.substring(decPos  +  1,  exPos  +  1);	  Integer    dec    =    str.substring(decPos    +    1,    exPos);    	non-compiled	[CE]  ';'  expected	51	None	replace
66	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos,  exPos);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos,  exPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  dec  =  str.substring(decPos  +  1,  expPos,  exPos);	  Integer    dec    =    str.substring(decPos    +    1,    exPos);    	non-compiled	[CE]  ';'  expected	51	None	replace
67	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1);  int  decPos  =  str.indexOf('.');  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1);  int  decPos  =  str.indexOf('.');  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1);  int  decPos  =  str.indexOf('.');	  dec    =    str.substring(decPos    +    2);    int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  ';'  expected	69	None	replace
68	[BUG]  [BUGGY]  decPos  =  str.indexOf('.');  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  decPos  =  str.indexOf('.');  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	decPos  =  str.indexOf('.');	  dec    =    str.substring(decPos    +    2);    int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  ';'  expected	69	None	replace
69	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  int  decPos  =  str.indexOf('.');  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  int  decPos  =  str.indexOf('.');  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  int  decPos  =  str.indexOf('.');	  dec    =    str.substring(decPos    +    2);    int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  ';'  expected	69	None	replace
70	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {  }  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {  }  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {  }	  dec    =    str.substring(decPos    +    3);    dec    =    str.substring(decPos    +    3);    }    else    {    	non-compiled	[CE]  ';'  expected	19	None	replace
71	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {	  dec    =    str.substring(decPos    +    3);    dec    =    str.substring(decPos    +    3);    }    else    {    	non-compiled	[CE]  ';'  expected	19	None	replace
72	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  exPos).trim();  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  exPos).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  exPos).trim();	  dec    =    str.substring(decPos    +    2).trim();    	non-compiled	[CE]  ';'  expected	55	None	replace
73	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  2,  expPos  +  3);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  2,  expPos  +  3);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  2,  expPos  +  3);	  dec    =    str.substring(decPos    +    2,    expPos    +    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
74	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  exponentPos  +  1);  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  exponentPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  exponentPos  +  1);	  dec    =    str.substring(decPos    +    1,    exponentPos);    	non-compiled	[CE]  ';'  expected	29	None	replace
75	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  exponentPos  -  1);  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  exponentPos  -  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  exponentPos  -  1);	  dec    =    str.substring(decPos    +    1,    exponentPos);    	non-compiled	[CE]  ';'  expected	29	None	replace
76	[BUG]  [BUGGY]  Dec  dec  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  dec  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  dec  =  str.substring(decPos  +  1,  expPos  +  1);	  Dec    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	7	None	replace
77	[BUG]  [BUGGY]  Dec  dec  =  str.substring(decPos  +  1,  exponentPos);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  dec  =  str.substring(decPos  +  1,  exponentPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  dec  =  str.substring(decPos  +  1,  exponentPos);	  Dec    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	7	None	replace
78	[BUG]  [BUGGY]  Dec  dec  =  str.substring(decPos  +  1,  exPos);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  dec  =  str.substring(decPos  +  1,  exPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  dec  =  str.substring(decPos  +  1,  exPos);	  Dec    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	7	None	replace
79	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  3);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  3);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos  +  3);	  dec    =    str.substring(decPos    +    1,    expPos    +    1);    	non-compiled	[CE]  ';'  expected	26	None	replace
80	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  1).toLowerCase();  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  1).toLowerCase();  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos  +  1).toLowerCase();	  dec    =    str.substring(decPos    +    1,    expPos    +    1);    	non-compiled	[CE]  ';'  expected	26	None	replace
81	[BUG]  [BUGGY]  dec  =  str.substring(expPos  +  1,  decPos);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(expPos  +  1,  decPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(expPos  +  1,  decPos);	          dec    =    str.substring(decPos    +    1,    expPos);    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	40	None	replace
82	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  3);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  3);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  3);	  dec    =    str.substring(decPos    +    3);    dec    =    str.substring(decPos    +    3);    	non-compiled	[CE]  ';'  expected	17	None	replace
83	[BUG]  [BUGGY]  Dec  dec  =  str.substring(decPos  +  3);  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  dec  =  str.substring(decPos  +  3);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  dec  =  str.substring(decPos  +  3);	  dec    =    str.substring(decPos    +    3);    dec    =    str.substring(decPos    +    3);    	non-compiled	[CE]  ';'  expected	17	None	replace
84	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    exponent    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
85	[BUG]  [BUGGY]  DecPos  expPos  =  str.substring(decPos  +  1,  expPos);  if(exponent  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  DecPos  expPos  =  str.substring(decPos  +  1,  expPos);  if(exponent  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	DecPos  expPos  =  str.substring(decPos  +  1,  expPos);  if(exponent  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    exponent    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
86	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  expPos  +  1);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('.',  expPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('.',  expPos  +  1);	  int    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ';'  expected	37	None	replace
87	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  exPos);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('.',  exPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('.',  exPos);	  int    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ';'  expected	37	None	replace
88	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1);  Dec  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1);  Dec  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1);  Dec  =  str.substring(decPos  +  1).trim();	  dec    =    str.substring(decPos    +    1).trim();    Dec    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	3	None	replace
89	[BUG]  [BUGGY]  char  decPos  =  str.length();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  char  decPos  =  str.length();  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	char  decPos  =  str.length();	  int    decPos    =    str.length()    -    1;    	non-compiled	[CE]  ';'  expected	8	None	replace
90	[BUG]  [BUGGY]  decPos  =  str.lastIndexOf('.')+  1;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  decPos  =  str.lastIndexOf('.')+  1;  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	decPos  =  str.lastIndexOf('.')+  1;	          dec    =    str.substring(decPos    +    1);    int    decPos    =    str.lastIndexOf('.')+    1;    	non-compiled	[CE]  ';'  expected	57	None	replace
91	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.')+  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.')+  1;  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.')+  1;	          dec    =    str.substring(decPos    +    1);    int    decPos    =    str.lastIndexOf('.')+    1;    	non-compiled	[CE]  ';'  expected	57	None	replace
92	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
93	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP	  	non-compiled	[CE]  ';'  expected	71	None	add
94	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);	  	non-compiled	[CE]  ';'  expected	71	None	add
95	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
96	[BUG]  [BUGGY]  int  decPos  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    dec    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	10	None	replace
97	[BUG]  [BUGGY]  Dec  dec  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  dec  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  dec  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    dec    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	10	None	replace
98	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  exponent);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  exponent);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  exponent);	          dec    =    str.substring(decPos    +    1);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1);    }    else    {    exponent    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	67	None	replace
99	[BUG]  [BUGGY]  DecPos  exponent  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  DecPos  exponent  =  str.substring(decPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	DecPos  exponent  =  str.substring(decPos  +  1);	          dec    =    str.substring(decPos    +    1);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1);    }    else    {    exponent    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	67	None	replace
100	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos,  exponent).trim();  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos,  exponent).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos,  exponent).trim();	  dec    =    str.substring(decPos    +    1,    expPos).trim();    	non-compiled	[CE]  ';'  expected	25	None	replace
101	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  1).trim();  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos  +  1).trim();	  dec    =    str.substring(decPos    +    1,    expPos).trim();    	non-compiled	[CE]  ';'  expected	25	None	replace
102	[BUG]  [BUGGY]  decPos  =  str.lastIndexOf('.');  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  decPos  =  str.lastIndexOf('.');  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	decPos  =  str.lastIndexOf('.');	          dec    =    str.substring(decPos    +    1);    int    decPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  ';'  expected	56	None	replace
103	[BUG]  [BUGGY]  decPos  =  str.substring(decPos  +  1);  [CE]  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  decPos  =  str.substring(decPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	decPos  =  str.substring(decPos  +  1);	          dec    =    str.substring(decPos    +    1);    int    decPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  	56	None	replace
104	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ';'  expected	74	None	replace
105	[BUG]  [BUGGY]  String  dec  =  str.substring(decPos  +  1,  expPos  +  1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  String  dec  =  str.substring(decPos  +  1,  expPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	String  dec  =  str.substring(decPos  +  1,  expPos  +  1);	  String    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	6	None	replace
106	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1);	          dec    =    str.substring(decPos    +    1);    Dec    =    str.substring(decPos    +    1);    	non-compiled	[CE]  ';'  expected	34	None	replace
107	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  Dec  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  Dec  =  str.substring(decPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  Dec  =  str.substring(decPos  +  1);	          dec    =    str.substring(decPos    +    1);    Dec    =    str.substring(decPos    +    1);    	non-compiled	[CE]  ';'  expected	34	None	replace
108	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  Dec  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  Dec  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  Dec  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    Dec    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	11	None	replace
109	[BUG]  [BUGGY]  decPos  =  str.substring(decPos  +  1,  expPos);  [CE]  not  a  statement  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  decPos  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	decPos  =  str.substring(decPos  +  1,  expPos);	          dec    =    str.substring(decPos    +    1,    expPos);    int    decPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	59	None	replace
110	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  DEC_POP  +  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  DEC_POP  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  DEC_POP  +  1);	  int    decPos    =    str.lastIndexOf('.',    DEC_POP);    	non-compiled	[CE]  not  a  statement	46	None	replace
111	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  DEC_POP  +  1,  expPos);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  DEC_POP  +  1,  expPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  DEC_POP  +  1,  expPos);	  int    decPos    =    str.lastIndexOf('.',    DEC_POP);    	non-compiled	[CE]  not  a  statement	46	None	replace
112	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  DEC_POP  +  2);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  DEC_POP  +  2);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  DEC_POP  +  2);	  int    decPos    =    str.lastIndexOf('.',    DEC_POP);    	non-compiled	[CE]  not  a  statement	46	None	replace
113	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  exp);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('.',  exp);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('.',  exp);	  int    decPos    =    str.indexOf('.',    dec);    	non-compiled	[CE]  not  a  statement	64	None	replace
114	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  2);  [CE]  not  a  statement  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  2);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  2);	  dec    =    str.substring(decPos    +    2);    Dec    =    str.substring(decPos    +    2);    	non-compiled	[CE]  not  a  statement	22	None	replace
115	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  2);  Dec  =  str.substring(decPos  +  1);  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  2);  Dec  =  str.substring(decPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  2);  Dec  =  str.substring(decPos  +  1);	  dec    =    str.substring(decPos    +    2);    Dec    =    str.substring(decPos    +    2);    	non-compiled	[CE]  not  a  statement	22	None	replace
116	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  -  2);  [CE]  not  a  statement  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  -  2);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos  -  2);	  dec    =    str.substring(decPos    +    1,    expPos    -    1);    	non-compiled	[CE]  not  a  statement	28	None	replace
117	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  exPos  -  1);  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  exPos  -  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  exPos  -  1);	  dec    =    str.substring(decPos    +    1,    expPos    -    1);    	non-compiled	[CE]  not  a  statement	28	None	replace
118	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  not  a  statement  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    dec    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  not  a  statement	70	None	replace
119	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  [CE]  not  a  statement  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    dec    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  not  a  statement	70	None	replace
120	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  1);	  dec    =    str.substring(decPos    +    2);    DEC    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	52	None	replace
121	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  2);  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  2);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  DEC  =  str.substring(decPos  +  2);	  dec    =    str.substring(decPos    +    2);    DEC    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	52	None	replace
122	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  expPos  +  1,  expPos);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  expPos  +  1,  expPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  expPos  +  1,  expPos);	  int    decPos    =    str.lastIndexOf('.',    expPos);    	non-compiled	[CE]  ';'  expected	45	None	replace
123	[BUG]  [BUGGY]  DecPos  expPos  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  DecPos  expPos  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	DecPos  expPos  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1).trim();	  dec    =    str.substring(decPos    +    1).trim();    dec    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	2	None	replace
124	[BUG]  [BUGGY]  Dec  dec  =  str.substring(decPos  +  2);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  dec  =  str.substring(decPos  +  2);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  dec  =  str.substring(decPos  +  2);	  dec    =    str.substring(decPos    +    2);    dec    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	21	None	replace
125	[BUG]  [BUGGY]  dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec        =        str.substring(decPos        +        1).trim();        dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();	  	non-compiled	[CE]  ';'  expected	1	None	add
126	[BUG]  [BUGGY]  dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  Dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  Dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec        =        str.substring(decPos        +        1).trim();        dec    =    str.substring(decPos    +    1).trim();    Dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();	  	non-compiled	[CE]  ';'  expected	1	None	add
127	[BUG]  [BUGGY]  dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  2).trim();  dec  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  2).trim();  dec  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec        =        str.substring(decPos        +        1).trim();        dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  2).trim();  dec  =  str.substring(decPos  +  1).trim();	  	non-compiled	[CE]  ';'  expected	1	None	add
128	[BUG]  [BUGGY]  dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  2).trim();  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  2).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec        =        str.substring(decPos        +        1).trim();        dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  2).trim();	  	non-compiled	[CE]  ';'  expected	1	None	add
129	[BUG]  [BUGGY]  DecPos  expPos  =  str.length();  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  DecPos  expPos  =  str.length();  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	DecPos  expPos  =  str.length();	          dec    =    str.substring(decPos    +    1);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1);    }    else    {    dec    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
130	[BUG]  [BUGGY]  DecPos  decPos  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  DecPos  decPos  =  str.substring(decPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	DecPos  decPos  =  str.substring(decPos  +  1);	          dec    =    str.substring(decPos    +    1);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
131	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  else  {  dec  =  str.substring(decPos  +  1);  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  else  {  dec  =  str.substring(decPos  +  1);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  else  {  dec  =  str.substring(decPos  +  1);  }	          dec    =    str.substring(decPos    +    1);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1);    }    else    {    dec    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
132	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  3);  int  decPos  =  str.indexOf('.',  decPos);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  3);  int  decPos  =  str.indexOf('.',  decPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  3);  int  decPos  =  str.indexOf('.',  decPos);	  dec    =    str.substring(decPos    +    3);    int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  ';'  expected	63	None	replace
133	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    exponent    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
134	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  exponent  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    exponent    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
135	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP  [CE]  ';'  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    exponent    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
136	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  exponentPos);  Dec  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  exponentPos);  Dec  =  str.substring(decPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  exponentPos);  Dec  =  str.substring(decPos  +  1);	          dec    =    str.substring(decPos    +    1);    Dec    =    str.substring(decPos    +    1);    	non-compiled	[CE]  ';'  expected	34	None	replace
137	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  DEC);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('.',  DEC);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('.',  DEC);	  int    decPos    =    str.indexOf('.',    dec);    	non-compiled	[CE]  ';'  expected	64	None	replace
138	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEc  =  str.substring(decPos  +  1,  expPos);  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  DEc  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  DEc  =  str.substring(decPos  +  1,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    DEc    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	12	None	replace
139	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos,  hexDigits).trim();  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos,  hexDigits).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos,  hexDigits).trim();	  dec    =    str.substring(decPos    +    1,    expPos).trim();    	non-compiled	[CE]  ';'  expected	25	None	replace
140	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2);	  dec    =    str.substring(decPos    +    2);    dec    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	21	None	replace
141	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);	  dec    =    str.substring(decPos    +    2);    dec    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	21	None	replace
142	[BUG]  [BUGGY]  int  decPos  =  expPos.indexOf('.',  str);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  expPos.indexOf('.',  str);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  expPos.indexOf('.',  str);	  int    decPos    =    str.indexOf('.',    expPos);    	non-compiled	[CE]  ';'  expected	37	None	replace
143	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
144	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring	  	non-compiled	[CE]  ';'  expected	71	None	add
145	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {	  	non-compiled	[CE]  ';'  expected	71	None	add
146	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();  }  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1).trim();  }	  dec    =    str.substring(decPos    +    1).trim();    dec    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	2	None	replace
147	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	40	None	replace
148	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }	          dec    =    str.substring(decPos    +    1,    expPos);    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	40	None	replace
149	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }	          dec    =    str.substring(decPos    +    1,    expPos);    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	40	None	replace
150	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ';'  expected	74	None	replace
151	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ';'  expected	74	None	replace
152	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  exponent  =  str.substring(decPos  +  1);  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  exponent  =  str.substring(decPos  +  1);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  exponent  =  str.substring(decPos  +  1);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    exponent    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
153	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2));  }  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2));  }  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2));  }	  dec    =    str.substring(decPos    +    2);    dec    =    str.substring(decPos    +    2));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
154	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2));  }  else  {  throw  new  NumberFormatException( " ");  }  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2));  }  else  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2));  }  else  {  throw  new  NumberFormatException( " ");  }	  dec    =    str.substring(decPos    +    2);    dec    =    str.substring(decPos    +    2));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
155	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2));  }  else  {  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2));  }  else  {  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2));  }  else  {	  dec    =    str.substring(decPos    +    2);    dec    =    str.substring(decPos    +    2));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
156	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    dec    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
157	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  3);  DEc  =  str.substring(decPos  +  1);  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  3);  DEc  =  str.substring(decPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  3);  DEc  =  str.substring(decPos  +  1);	  dec    =    str.substring(decPos    +    3);    DEc    =    str.substring(decPos    +    3);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
158	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {	  dec    =    str.substring(decPos    +    3);    dec    =    str.substring(decPos    +    3);    }    else    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
159	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {  }  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {  }  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  else  {  }	  dec    =    str.substring(decPos    +    3);    dec    =    str.substring(decPos    +    3);    }    else    {    	non-compiled	[CE]  ';'  expected	19	None	replace
160	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  }	  dec    =    str.substring(decPos    +    3);    dec    =    str.substring(decPos    +    3);    }    else    {    	non-compiled	[CE]  ';'  expected	19	None	replace
161	[BUG]  [BUGGY]  DecPos  decPos  =  str.lastIndexOf('.');  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  DecPos  decPos  =  str.lastIndexOf('.');  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	DecPos  decPos  =  str.lastIndexOf('.');	          dec    =    str.substring(decPos    +    1,    expPos);    int    decPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  ';'  expected	59	None	replace
162	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {	  	non-compiled	[CE]  ';'  expected	73	None	add
163	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring	  	non-compiled	[CE]  	73	None	add
164	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }	  	non-compiled	[CE]  	73	None	add
165	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  de  [CE]  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  de  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  de	  	non-compiled	[CE]  	73	None	add
166	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  [CE]  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    String  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);	  	non-compiled	[CE]  	73	None	add
167	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('  ')+  1;  dec  =  str.substring(decPos  +  1,  expPos);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('  ')+  1;  dec  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('  ')+  1;  dec  =  str.substring(decPos  +  1,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    dec    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	10	None	replace
168	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  2  -  decPos);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  dec  =  str.substring(decPos  +  2  -  decPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  dec  =  str.substring(decPos  +  2  -  decPos);	  Integer    dec    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	50	None	replace
169	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  int  decPos  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos);  int  decPos  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos);  int  decPos  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    int    decPos    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	60	None	replace
170	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  2);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  2);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  2);	          dec    =    str.substring(decPos    +    1);    dec    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	35	None	replace
171	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP	          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    dec    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
172	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  2).trim();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  2).trim();  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  2).trim();	          dec    =    str.substring(decPos    +    1);    dec    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	36	None	replace
173	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos).trim();  Dec  =  str.substring(decPos  +  1,  expPos).trim();  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos).trim();  Dec  =  str.substring(decPos  +  1,  expPos).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos).trim();  Dec  =  str.substring(decPos  +  1,  expPos).trim();	  dec    =    str.substring(decPos    +    1).trim();    Dec    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	3	None	replace
174	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  exponentPos);  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1,  exponentPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1,  exponentPos);	  Dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	16	None	replace
175	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  decPos);  DEC  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  decPos);  DEC  =  str.substring(decPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  decPos);  DEC  =  str.substring(decPos  +  1);	  dec    =    str.substring(decPos    +    2);    DEC    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	52	None	replace
176	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1);  DEc  =  str.substring(decPos  +  2);  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1);  DEc  =  str.substring(decPos  +  2);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1);  DEc  =  str.substring(decPos  +  2);	  dec    =    str.substring(decPos    +    2);    DEc    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	24	None	replace
177	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  -1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  -1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  -1);	  int    decPos    =    str.lastIndexOf('.',    1);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
178	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos).trim();  DEC  =  str.substring(decPos  +  1,  expPos).trim();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos).trim();  DEC  =  str.substring(decPos  +  1,  expPos).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos).trim();  DEC  =  str.substring(decPos  +  1,  expPos).trim();	  dec    =    str.substring(decPos    +    1).trim();    DEC    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
179	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  4);  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1,  expPos  +  4);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1,  expPos  +  4);	  dec    =    str.substring(decPos    +    1,    expPos    +    2);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
180	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  3);  DEC  =  str.substring(decPos  +  1);  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  3);  DEC  =  str.substring(decPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  3);  DEC  =  str.substring(decPos  +  1);	  dec    =    str.substring(decPos    +    3);    DEC    =    str.substring(decPos    +    3);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
181	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  1);	  dec    =    str.substring(decPos    +    2);    dec    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	21	None	replace
182	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  2);  DEC  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  2);  DEC  =  str.substring(decPos  +  1);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  2);  DEC  =  str.substring(decPos  +  1);	  dec    =    str.substring(decPos    +    2);    DEC    =    str.substring(decPos    +    2);    	non-compiled	[CE]  ';'  expected	52	None	replace
183	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  exponent  =  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  exponent  =  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  exponent  =	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    exponent    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
184	[BUG]  [BUGGY]  exponent  =  str.substring(decPos  +  1);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  exponent  =  str.substring(decPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	exponent  =  str.substring(decPos  +  1);	          dec    =    str.substring(decPos    +    1);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1);    }    else    {    exponent    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	67	None	replace
185	[BUG]  [BUGGY]  dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1).trim();  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1).trim();  dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1).trim();  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec        =        str.substring(decPos        +        1).trim();        dec    =    str.substring(decPos    +    1).trim();    dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1).trim();	  	non-compiled	[CE]  ';'  expected	1	None	add
186	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  else  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  else  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  else  {  throw  new  NumberFormatException( " ");  }	          dec    =    str.substring(decPos    +    1);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
187	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  decPos  +  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  decPos  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  decPos  +  1);	  int    decPos    =    str.lastIndexOf('.',    decPos);    	non-compiled	[CE]  ';'  expected	76	None	replace
188	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  decPos  -  1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  decPos  -  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  decPos  -  1);	  int    decPos    =    str.lastIndexOf('.',    decPos);    	non-compiled	[CE]  ';'  expected	76	None	replace
189	[BUG]  [BUGGY]  int  decPos  =  str.substring(decPos  +  1,  expPos);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.substring(decPos  +  1,  expPos);	  String    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	6	None	replace
190	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  ';'  expected	74	None	replace
191	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos,  exponent);  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos,  exponent);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1,  expPos,  exponent);	  Dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	16	None	replace
192	[BUG]  [BUGGY]  int  decPos  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	13	None	replace
193	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1,  expPos).trim();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1,  expPos).trim();  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1,  expPos).trim();	          dec    =    str.substring(decPos    +    1);    dec    =    str.substring(decPos    +    1).trim();    	non-compiled	[CE]  ';'  expected	36	None	replace
194	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }	  	non-compiled	[CE]  ';'  expected	73	None	add
195	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	  	non-compiled	[CE]  ';'  expected	73	None	add
196	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( "  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException(   "   ");  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( "  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    throw    new    NumberFormatException(   "   ");    }    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( "	  	non-compiled	[CE]  	73	None	add
197	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  dec  +  1);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  dec  +  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  dec  +  1);	  int    decPos    =    str.lastIndexOf('.',    dec);    	non-compiled	[CE]  ';'  expected	75	None	replace
198	[BUG]  [BUGGY]  Integer  decPos  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Integer  decPos  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Integer  decPos  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    int    decPos    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	60	None	replace
199	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
200	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expP	  	non-compiled	[CE]  ';'  expected	71	None	add
201	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
202	[BUG]  [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	                dec        =        str.substring(decPos        +        1,        expPos);        if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }	  	non-compiled	[CE]  ';'  expected	71	None	add
203	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  else  {  dec  =  str.substring(decPos  +  1);  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  else  {  dec  =  str.substring(decPos  +  1);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  else  {  dec  =  str.substring(decPos  +  1);  }	          dec    =    str.substring(decPos    +    1);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1);    }    else    {    dec    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
204	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }	          dec    =    str.substring(decPos    +    1);    if(decPos    >    -1)    {    dec    =    str.substring(decPos    +    1);    }    else    {    dec    =    str.substring(decPos    +    1);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
205	[BUG]  [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  exponent  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  exponent  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  exponent  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    if(expPos    >    -1)    {    dec    =    str.substring(decPos    +    1,    expPos);    }    else    {    exponent    =    str.substring(decPos    +    1,    expPos);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
206	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  2);  int  decPos  =  str.indexOf('.',  decPos);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  2);  int  decPos  =  str.indexOf('.',  decPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  2);  int  decPos  =  str.indexOf('.',  decPos);	  dec    =    str.substring(decPos    +    2);    int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  ';'  expected	69	None	replace
207	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  3);  decPos  =  str.indexOf('.',  decPos);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  3);  decPos  =  str.indexOf('.',  decPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  3);  decPos  =  str.indexOf('.',  decPos);	  dec    =    str.substring(decPos    +    3);    int    decPos    =    str.indexOf('.');    	non-compiled	[CE]  ';'  expected	63	None	replace
208	[BUG]  [BUGGY]  dec  =  str.substring(decPos  +  1);  decPos  =  str.lastIndexOf('.')+  1;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  dec  =  str.substring(decPos  +  1);  decPos  =  str.lastIndexOf('.')+  1;  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	dec  =  str.substring(decPos  +  1);  decPos  =  str.lastIndexOf('.')+  1;	          dec    =    str.substring(decPos    +    1);    int    decPos    =    str.lastIndexOf('.')+    1;    	non-compiled	[CE]  ';'  expected	57	None	replace
209	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  2,  expPos);  }  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  2,  expPos);  }  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  2,  expPos);  }	  dec    =    str.substring(decPos    +    2,    expPos);    dec    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	10	None	replace
210	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  2,  expPos);  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  2,  expPos);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  2,  expPos);  dec  =  str.substring(decPos  +  2,  expPos);	  dec    =    str.substring(decPos    +    2,    expPos);    dec    =    str.substring(decPos    +    2,    expPos);    	non-compiled	[CE]  ';'  expected	10	None	replace
211	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  3);  dec  =  str.substring(decPos  +  3);	  dec    =    str.substring(decPos    +    3);    dec    =    str.substring(decPos    +    3);    	non-compiled	[CE]  ';'  expected	17	None	replace
212	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2);  }  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2);  }  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  2);  dec  =  str.substring(decPos  +  2);  }	  dec    =    str.substring(decPos    +    2);    dec    =    str.substring(decPos    +    2));    	non-compiled	[CE]  ';'  expected	23	None	replace
213	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  decPos  +  1,  expPos);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('.',  decPos  +  1,  expPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('.',  decPos  +  1,  expPos);	  int    decPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ';'  expected	53	None	replace
214	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  decPos  -  1);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.indexOf('.',  decPos  -  1);	  int    decPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  ';'  expected	53	None	replace
215	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.')-  1;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.')-  1;  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.')-  1;	  int    decPos    =    str.length()    -    1;    	non-compiled	[CE]  ';'  expected	8	None	replace
216	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  decPos)-  1;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  decPos)-  1;  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	int  decPos  =  str.lastIndexOf('.',  decPos)-  1;	  int    decPos    =    str.length()    -    1;    	non-compiled	[CE]  ';'  expected	8	None	replace
217	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }	          dec    =    str.substring(decPos    +    1,    expPos);    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	40	None	replace
218	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  throw  new  NumberFormatException( " ");  }	          dec    =    str.substring(decPos    +    1,    expPos);    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	40	None	replace
219	[BUG]  [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  =  str.substring(decPos  +  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);	          dec    =    str.substring(decPos    +    1,    expPos);    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	40	None	replace
220	[BUG]  [BUGGY]  Dec  dec  =  str.substring(decPos  +  1,  expPos,  exponent);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  Dec  dec  =  str.substring(decPos  +  1,  expPos,  exponent);  [BUGGY]      dec  =  str.substring(decPos  +  1);  }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	Dec  dec  =  str.substring(decPos  +  1,  expPos,  exponent);	  Dec    dec    =    str.substring(decPos    +    1,    expPos);    	non-compiled	[CE]  ';'  expected	7	None	replace
221	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1).trim();  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1).trim();  }  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1).trim();  }	  dec    =    str.substring(decPos    +    1).trim();    if(dec    ==    null)    {    dec    =    str.substring(decPos    +    1).trim();    }    	non-compiled	[CE]  ';'  expected	65	None	replace
222	[BUG]  [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  if(dec  ==  null)  {  dec  =  str.substring(decPos  +  1);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (expPos  >  -1)  {  //  there  is  an  exponent  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  //  prevents  double  exponent  causing  IOOBE  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {      [BUGGY]  if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  if(dec  ==  null)  {  dec  =  str.substring(decPos  +  1);  }  [BUGGY]      }  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  pfx  str  String[]  hex_prefixes  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  hexDigits  numDecimals  pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  if(dec  ==  null)  {  dec  =  str.substring(decPos  +  1);  }	  dec    =    str.substring(decPos    +    1).trim();    if(dec    ==    null)    {    dec    =    str.substring(decPos    +    1).trim();    }    	non-compiled	[CE]  ';'  expected	65	None	replace
